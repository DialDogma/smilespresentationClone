//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmileSPettyCash.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PettyCashEntities : DbContext
    {
        public PettyCashEntities()
            : base("name=PettyCashEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<usp_PettyCash_Select_Result> usp_PettyCash_Select(Nullable<int> branchId, Nullable<int> pettyCashTypeId)
        {
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var pettyCashTypeIdParameter = pettyCashTypeId.HasValue ?
                new ObjectParameter("PettyCashTypeId", pettyCashTypeId) :
                new ObjectParameter("PettyCashTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PettyCash_Select_Result>("usp_PettyCash_Select", branchIdParameter, pettyCashTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_PettyCashTransaction_Insert_Result> usp_PettyCashTransaction_Insert(Nullable<int> pettyCashId, Nullable<int> pettyCashTransactionTypeId, string pettyCashTransactionTypeDescription, Nullable<int> organizeId, Nullable<decimal> amount, string billBook, Nullable<System.DateTime> billDate, string remark, Nullable<int> documentId, Nullable<int> createdByUserId)
        {
            var pettyCashIdParameter = pettyCashId.HasValue ?
                new ObjectParameter("PettyCashId", pettyCashId) :
                new ObjectParameter("PettyCashId", typeof(int));
    
            var pettyCashTransactionTypeIdParameter = pettyCashTransactionTypeId.HasValue ?
                new ObjectParameter("PettyCashTransactionTypeId", pettyCashTransactionTypeId) :
                new ObjectParameter("PettyCashTransactionTypeId", typeof(int));
    
            var pettyCashTransactionTypeDescriptionParameter = pettyCashTransactionTypeDescription != null ?
                new ObjectParameter("PettyCashTransactionTypeDescription", pettyCashTransactionTypeDescription) :
                new ObjectParameter("PettyCashTransactionTypeDescription", typeof(string));
    
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var billBookParameter = billBook != null ?
                new ObjectParameter("BillBook", billBook) :
                new ObjectParameter("BillBook", typeof(string));
    
            var billDateParameter = billDate.HasValue ?
                new ObjectParameter("BillDate", billDate) :
                new ObjectParameter("BillDate", typeof(System.DateTime));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PettyCashTransaction_Insert_Result>("usp_PettyCashTransaction_Insert", pettyCashIdParameter, pettyCashTransactionTypeIdParameter, pettyCashTransactionTypeDescriptionParameter, organizeIdParameter, amountParameter, billBookParameter, billDateParameter, remarkParameter, documentIdParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_PettyCashTransactionType_Select_Result> usp_PettyCashTransactionType_Select(Nullable<int> pettyCashTransactionGroupId)
        {
            var pettyCashTransactionGroupIdParameter = pettyCashTransactionGroupId.HasValue ?
                new ObjectParameter("PettyCashTransactionGroupId", pettyCashTransactionGroupId) :
                new ObjectParameter("PettyCashTransactionGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PettyCashTransactionType_Select_Result>("usp_PettyCashTransactionType_Select", pettyCashTransactionGroupIdParameter);
        }
    
        public virtual int usp_GenerateCode(string transactionCodeControlTypeDetail, Nullable<int> runningLenght, ObjectParameter result)
        {
            var transactionCodeControlTypeDetailParameter = transactionCodeControlTypeDetail != null ?
                new ObjectParameter("TransactionCodeControlTypeDetail", transactionCodeControlTypeDetail) :
                new ObjectParameter("TransactionCodeControlTypeDetail", typeof(string));
    
            var runningLenghtParameter = runningLenght.HasValue ?
                new ObjectParameter("RunningLenght", runningLenght) :
                new ObjectParameter("RunningLenght", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GenerateCode", transactionCodeControlTypeDetailParameter, runningLenghtParameter, result);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_CountDocument(string documentCode)
        {
            var documentCodeParameter = documentCode != null ?
                new ObjectParameter("DocumentCode", documentCode) :
                new ObjectParameter("DocumentCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_CountDocument", documentCodeParameter);
        }
    
        public virtual ObjectResult<usp_Document_Insert_Result> usp_Document_Insert(Nullable<int> documentTypeId, Nullable<int> createdByUserId)
        {
            var documentTypeIdParameter = documentTypeId.HasValue ?
                new ObjectParameter("DocumentTypeId", documentTypeId) :
                new ObjectParameter("DocumentTypeId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Document_Insert_Result>("usp_Document_Insert", documentTypeIdParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_Organize_Select_Result> usp_Organize_Select(Nullable<int> organizeTypeId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var organizeTypeIdParameter = organizeTypeId.HasValue ?
                new ObjectParameter("OrganizeTypeId", organizeTypeId) :
                new ObjectParameter("OrganizeTypeId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Organize_Select_Result>("usp_Organize_Select", organizeTypeIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual ObjectResult<usp_PettyCashTransaction_Select_Result> usp_PettyCashTransaction_Select(Nullable<int> pettyCashId, Nullable<int> pettyCashTransactionStatusId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var pettyCashIdParameter = pettyCashId.HasValue ?
                new ObjectParameter("PettyCashId", pettyCashId) :
                new ObjectParameter("PettyCashId", typeof(int));
    
            var pettyCashTransactionStatusIdParameter = pettyCashTransactionStatusId.HasValue ?
                new ObjectParameter("PettyCashTransactionStatusId", pettyCashTransactionStatusId) :
                new ObjectParameter("PettyCashTransactionStatusId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PettyCashTransaction_Select_Result>("usp_PettyCashTransaction_Select", pettyCashIdParameter, pettyCashTransactionStatusIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_PettyCashXPettyCashDaily_Insert_Result> usp_PettyCashXPettyCashDaily_Insert(Nullable<int> pettyCashId, Nullable<int> pettyCashTransactionStatusId, Nullable<int> c_1000_00, Nullable<int> c_0500_00, Nullable<int> c_0100_00, Nullable<int> c_0050_00, Nullable<int> c_0020_00, Nullable<int> c_0010_00, Nullable<int> c_0005_00, Nullable<int> c_0002_00, Nullable<int> c_0001_00, Nullable<int> c_0000_50, Nullable<int> c_0000_25, Nullable<int> createdUserId)
        {
            var pettyCashIdParameter = pettyCashId.HasValue ?
                new ObjectParameter("PettyCashId", pettyCashId) :
                new ObjectParameter("PettyCashId", typeof(int));
    
            var pettyCashTransactionStatusIdParameter = pettyCashTransactionStatusId.HasValue ?
                new ObjectParameter("PettyCashTransactionStatusId", pettyCashTransactionStatusId) :
                new ObjectParameter("PettyCashTransactionStatusId", typeof(int));
    
            var c_1000_00Parameter = c_1000_00.HasValue ?
                new ObjectParameter("C_1000_00", c_1000_00) :
                new ObjectParameter("C_1000_00", typeof(int));
    
            var c_0500_00Parameter = c_0500_00.HasValue ?
                new ObjectParameter("C_0500_00", c_0500_00) :
                new ObjectParameter("C_0500_00", typeof(int));
    
            var c_0100_00Parameter = c_0100_00.HasValue ?
                new ObjectParameter("C_0100_00", c_0100_00) :
                new ObjectParameter("C_0100_00", typeof(int));
    
            var c_0050_00Parameter = c_0050_00.HasValue ?
                new ObjectParameter("C_0050_00", c_0050_00) :
                new ObjectParameter("C_0050_00", typeof(int));
    
            var c_0020_00Parameter = c_0020_00.HasValue ?
                new ObjectParameter("C_0020_00", c_0020_00) :
                new ObjectParameter("C_0020_00", typeof(int));
    
            var c_0010_00Parameter = c_0010_00.HasValue ?
                new ObjectParameter("C_0010_00", c_0010_00) :
                new ObjectParameter("C_0010_00", typeof(int));
    
            var c_0005_00Parameter = c_0005_00.HasValue ?
                new ObjectParameter("C_0005_00", c_0005_00) :
                new ObjectParameter("C_0005_00", typeof(int));
    
            var c_0002_00Parameter = c_0002_00.HasValue ?
                new ObjectParameter("C_0002_00", c_0002_00) :
                new ObjectParameter("C_0002_00", typeof(int));
    
            var c_0001_00Parameter = c_0001_00.HasValue ?
                new ObjectParameter("C_0001_00", c_0001_00) :
                new ObjectParameter("C_0001_00", typeof(int));
    
            var c_0000_50Parameter = c_0000_50.HasValue ?
                new ObjectParameter("C_0000_50", c_0000_50) :
                new ObjectParameter("C_0000_50", typeof(int));
    
            var c_0000_25Parameter = c_0000_25.HasValue ?
                new ObjectParameter("C_0000_25", c_0000_25) :
                new ObjectParameter("C_0000_25", typeof(int));
    
            var createdUserIdParameter = createdUserId.HasValue ?
                new ObjectParameter("CreatedUserId", createdUserId) :
                new ObjectParameter("CreatedUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PettyCashXPettyCashDaily_Insert_Result>("usp_PettyCashXPettyCashDaily_Insert", pettyCashIdParameter, pettyCashTransactionStatusIdParameter, c_1000_00Parameter, c_0500_00Parameter, c_0100_00Parameter, c_0050_00Parameter, c_0020_00Parameter, c_0010_00Parameter, c_0005_00Parameter, c_0002_00Parameter, c_0001_00Parameter, c_0000_50Parameter, c_0000_25Parameter, createdUserIdParameter);
        }
    
        public virtual ObjectResult<usp_PettyCashTransaction_Update_Result> usp_PettyCashTransaction_Update(Nullable<int> pettyCashTransactionId, Nullable<int> pettyCashTransactionTypeId, string pettyCashTransactionTypeDescription, Nullable<int> organizeId, Nullable<decimal> amount, string billBook, Nullable<System.DateTime> billDate, string remark, Nullable<int> createdByUserId)
        {
            var pettyCashTransactionIdParameter = pettyCashTransactionId.HasValue ?
                new ObjectParameter("PettyCashTransactionId", pettyCashTransactionId) :
                new ObjectParameter("PettyCashTransactionId", typeof(int));
    
            var pettyCashTransactionTypeIdParameter = pettyCashTransactionTypeId.HasValue ?
                new ObjectParameter("PettyCashTransactionTypeId", pettyCashTransactionTypeId) :
                new ObjectParameter("PettyCashTransactionTypeId", typeof(int));
    
            var pettyCashTransactionTypeDescriptionParameter = pettyCashTransactionTypeDescription != null ?
                new ObjectParameter("PettyCashTransactionTypeDescription", pettyCashTransactionTypeDescription) :
                new ObjectParameter("PettyCashTransactionTypeDescription", typeof(string));
    
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var billBookParameter = billBook != null ?
                new ObjectParameter("BillBook", billBook) :
                new ObjectParameter("BillBook", typeof(string));
    
            var billDateParameter = billDate.HasValue ?
                new ObjectParameter("BillDate", billDate) :
                new ObjectParameter("BillDate", typeof(System.DateTime));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PettyCashTransaction_Update_Result>("usp_PettyCashTransaction_Update", pettyCashTransactionIdParameter, pettyCashTransactionTypeIdParameter, pettyCashTransactionTypeDescriptionParameter, organizeIdParameter, amountParameter, billBookParameter, billDateParameter, remarkParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_PettyCashTransactionById_Select_Result> usp_PettyCashTransactionById_Select(Nullable<int> pettyCashTransactionId)
        {
            var pettyCashTransactionIdParameter = pettyCashTransactionId.HasValue ?
                new ObjectParameter("PettyCashTransactionId", pettyCashTransactionId) :
                new ObjectParameter("PettyCashTransactionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PettyCashTransactionById_Select_Result>("usp_PettyCashTransactionById_Select", pettyCashTransactionIdParameter);
        }
    
        public virtual ObjectResult<usp_PettyCashTransaction_Delete_Result> usp_PettyCashTransaction_Delete(Nullable<int> pettyCashTransactionId, Nullable<int> deleteByUserId)
        {
            var pettyCashTransactionIdParameter = pettyCashTransactionId.HasValue ?
                new ObjectParameter("PettyCashTransactionId", pettyCashTransactionId) :
                new ObjectParameter("PettyCashTransactionId", typeof(int));
    
            var deleteByUserIdParameter = deleteByUserId.HasValue ?
                new ObjectParameter("DeleteByUserId", deleteByUserId) :
                new ObjectParameter("DeleteByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PettyCashTransaction_Delete_Result>("usp_PettyCashTransaction_Delete", pettyCashTransactionIdParameter, deleteByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_PettyCashTransactionVerify_Update_Result> usp_PettyCashTransactionVerify_Update(Nullable<int> pettyCashTransactionId, Nullable<int> pettyCashTransactionStatusId, Nullable<int> unPassCauseId, string unPassRemark, Nullable<int> updatedByUserId)
        {
            var pettyCashTransactionIdParameter = pettyCashTransactionId.HasValue ?
                new ObjectParameter("PettyCashTransactionId", pettyCashTransactionId) :
                new ObjectParameter("PettyCashTransactionId", typeof(int));
    
            var pettyCashTransactionStatusIdParameter = pettyCashTransactionStatusId.HasValue ?
                new ObjectParameter("PettyCashTransactionStatusId", pettyCashTransactionStatusId) :
                new ObjectParameter("PettyCashTransactionStatusId", typeof(int));
    
            var unPassCauseIdParameter = unPassCauseId.HasValue ?
                new ObjectParameter("UnPassCauseId", unPassCauseId) :
                new ObjectParameter("UnPassCauseId", typeof(int));
    
            var unPassRemarkParameter = unPassRemark != null ?
                new ObjectParameter("UnPassRemark", unPassRemark) :
                new ObjectParameter("UnPassRemark", typeof(string));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PettyCashTransactionVerify_Update_Result>("usp_PettyCashTransactionVerify_Update", pettyCashTransactionIdParameter, pettyCashTransactionStatusIdParameter, unPassCauseIdParameter, unPassRemarkParameter, updatedByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_PettyCashXPettyCashDaily_Update_Result> usp_PettyCashXPettyCashDaily_Update(Nullable<int> pettyCashXPettyCashDailyId, Nullable<int> pettyCashXPettyCashDailyStatusId, Nullable<int> updatedByUserId)
        {
            var pettyCashXPettyCashDailyIdParameter = pettyCashXPettyCashDailyId.HasValue ?
                new ObjectParameter("PettyCashXPettyCashDailyId", pettyCashXPettyCashDailyId) :
                new ObjectParameter("PettyCashXPettyCashDailyId", typeof(int));
    
            var pettyCashXPettyCashDailyStatusIdParameter = pettyCashXPettyCashDailyStatusId.HasValue ?
                new ObjectParameter("PettyCashXPettyCashDailyStatusId", pettyCashXPettyCashDailyStatusId) :
                new ObjectParameter("PettyCashXPettyCashDailyStatusId", typeof(int));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PettyCashXPettyCashDaily_Update_Result>("usp_PettyCashXPettyCashDaily_Update", pettyCashXPettyCashDailyIdParameter, pettyCashXPettyCashDailyStatusIdParameter, updatedByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_PettyCashXPettyCashDailyDetail_Select_Result> usp_PettyCashXPettyCashDailyDetail_Select(Nullable<int> pettyCashXPettyCashDailyId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var pettyCashXPettyCashDailyIdParameter = pettyCashXPettyCashDailyId.HasValue ?
                new ObjectParameter("PettyCashXPettyCashDailyId", pettyCashXPettyCashDailyId) :
                new ObjectParameter("PettyCashXPettyCashDailyId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PettyCashXPettyCashDailyDetail_Select_Result>("usp_PettyCashXPettyCashDailyDetail_Select", pettyCashXPettyCashDailyIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_UnPassCause_Select_Result> usp_UnPassCause_Select(Nullable<int> unPassCauseId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var unPassCauseIdParameter = unPassCauseId.HasValue ?
                new ObjectParameter("UnPassCauseId", unPassCauseId) :
                new ObjectParameter("UnPassCauseId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UnPassCause_Select_Result>("usp_UnPassCause_Select", unPassCauseIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_PettyCashXPettyCashDaily_Select_Result> usp_PettyCashXPettyCashDaily_Select(Nullable<int> pettyCashXPettyCashDailyId, Nullable<int> pettyCashXPettyCashDailyStatusId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var pettyCashXPettyCashDailyIdParameter = pettyCashXPettyCashDailyId.HasValue ?
                new ObjectParameter("PettyCashXPettyCashDailyId", pettyCashXPettyCashDailyId) :
                new ObjectParameter("PettyCashXPettyCashDailyId", typeof(int));
    
            var pettyCashXPettyCashDailyStatusIdParameter = pettyCashXPettyCashDailyStatusId.HasValue ?
                new ObjectParameter("PettyCashXPettyCashDailyStatusId", pettyCashXPettyCashDailyStatusId) :
                new ObjectParameter("PettyCashXPettyCashDailyStatusId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PettyCashXPettyCashDaily_Select_Result>("usp_PettyCashXPettyCashDaily_Select", pettyCashXPettyCashDailyIdParameter, pettyCashXPettyCashDailyStatusIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_BranchXBankAccount_Select_Result> usp_BranchXBankAccount_Select(Nullable<int> branchXBankAccountId, Nullable<int> branchId, Nullable<int> companyId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var branchXBankAccountIdParameter = branchXBankAccountId.HasValue ?
                new ObjectParameter("BranchXBankAccountId", branchXBankAccountId) :
                new ObjectParameter("BranchXBankAccountId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BranchXBankAccount_Select_Result>("usp_BranchXBankAccount_Select", branchXBankAccountIdParameter, branchIdParameter, companyIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_BranchXSubBranch_Select_Result> usp_BranchXSubBranch_Select(Nullable<int> branchId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BranchXSubBranch_Select_Result>("usp_BranchXSubBranch_Select", branchIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_PaymentType_Select_Result> usp_PaymentType_Select(Nullable<int> paymentTypeId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var paymentTypeIdParameter = paymentTypeId.HasValue ?
                new ObjectParameter("PaymentTypeId", paymentTypeId) :
                new ObjectParameter("PaymentTypeId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PaymentType_Select_Result>("usp_PaymentType_Select", paymentTypeIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_Branch_Select_Result> usp_Branch_Select(Nullable<int> branchId, string branchCode, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var branchCodeParameter = branchCode != null ?
                new ObjectParameter("BranchCode", branchCode) :
                new ObjectParameter("BranchCode", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Branch_Select_Result>("usp_Branch_Select", branchIdParameter, branchCodeParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_Payment_Update_Result> usp_Payment_Update(Nullable<int> paymentId, Nullable<int> bankId, string bankAccountNo, string bankAccountName, Nullable<decimal> amount, Nullable<int> updatedByUserId, Nullable<int> paymentType)
        {
            var paymentIdParameter = paymentId.HasValue ?
                new ObjectParameter("PaymentId", paymentId) :
                new ObjectParameter("PaymentId", typeof(int));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var bankAccountNoParameter = bankAccountNo != null ?
                new ObjectParameter("BankAccountNo", bankAccountNo) :
                new ObjectParameter("BankAccountNo", typeof(string));
    
            var bankAccountNameParameter = bankAccountName != null ?
                new ObjectParameter("BankAccountName", bankAccountName) :
                new ObjectParameter("BankAccountName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            var paymentTypeParameter = paymentType.HasValue ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Payment_Update_Result>("usp_Payment_Update", paymentIdParameter, bankIdParameter, bankAccountNoParameter, bankAccountNameParameter, amountParameter, updatedByUserIdParameter, paymentTypeParameter);
        }
    
        public virtual ObjectResult<usp_PettyCashTransaction_ForRequisition_Select_Result> usp_PettyCashTransaction_ForRequisition_Select(Nullable<int> pettyCashId, Nullable<int> organizeCompanyId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var pettyCashIdParameter = pettyCashId.HasValue ?
                new ObjectParameter("PettyCashId", pettyCashId) :
                new ObjectParameter("PettyCashId", typeof(int));
    
            var organizeCompanyIdParameter = organizeCompanyId.HasValue ?
                new ObjectParameter("OrganizeCompanyId", organizeCompanyId) :
                new ObjectParameter("OrganizeCompanyId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PettyCashTransaction_ForRequisition_Select_Result>("usp_PettyCashTransaction_ForRequisition_Select", pettyCashIdParameter, organizeCompanyIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_RequisitionDetail_Insert_Result> usp_RequisitionDetail_Insert(Nullable<int> pettyCashId, string pettyCashTransactionIdList, Nullable<int> createdByUserId)
        {
            var pettyCashIdParameter = pettyCashId.HasValue ?
                new ObjectParameter("PettyCashId", pettyCashId) :
                new ObjectParameter("PettyCashId", typeof(int));
    
            var pettyCashTransactionIdListParameter = pettyCashTransactionIdList != null ?
                new ObjectParameter("PettyCashTransactionIdList", pettyCashTransactionIdList) :
                new ObjectParameter("PettyCashTransactionIdList", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RequisitionDetail_Insert_Result>("usp_RequisitionDetail_Insert", pettyCashIdParameter, pettyCashTransactionIdListParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_PettyCashTransaction_ForOrganize_Select_Result> usp_PettyCashTransaction_ForOrganize_Select(Nullable<int> requisitionHeaderID, Nullable<int> organizeId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var requisitionHeaderIDParameter = requisitionHeaderID.HasValue ?
                new ObjectParameter("RequisitionHeaderID", requisitionHeaderID) :
                new ObjectParameter("RequisitionHeaderID", typeof(int));
    
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PettyCashTransaction_ForOrganize_Select_Result>("usp_PettyCashTransaction_ForOrganize_Select", requisitionHeaderIDParameter, organizeIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_RequisitionHeader_Approve_Update_Result> usp_RequisitionHeader_Approve_Update(Nullable<int> requisitionHeaderId, Nullable<int> createdByUserId)
        {
            var requisitionHeaderIdParameter = requisitionHeaderId.HasValue ?
                new ObjectParameter("RequisitionHeaderId", requisitionHeaderId) :
                new ObjectParameter("RequisitionHeaderId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RequisitionHeader_Approve_Update_Result>("usp_RequisitionHeader_Approve_Update", requisitionHeaderIdParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_RequisitionHeader_Select_Result> usp_RequisitionHeader_Select(Nullable<int> requisitionHeaderId, Nullable<int> branchId, Nullable<int> requisitionHeaderStatusId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var requisitionHeaderIdParameter = requisitionHeaderId.HasValue ?
                new ObjectParameter("RequisitionHeaderId", requisitionHeaderId) :
                new ObjectParameter("RequisitionHeaderId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var requisitionHeaderStatusIdParameter = requisitionHeaderStatusId.HasValue ?
                new ObjectParameter("RequisitionHeaderStatusId", requisitionHeaderStatusId) :
                new ObjectParameter("RequisitionHeaderStatusId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RequisitionHeader_Select_Result>("usp_RequisitionHeader_Select", requisitionHeaderIdParameter, branchIdParameter, requisitionHeaderStatusIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_RejectRequisition_Select_Result> usp_RejectRequisition_Select(Nullable<int> pettyCashId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var pettyCashIdParameter = pettyCashId.HasValue ?
                new ObjectParameter("PettyCashId", pettyCashId) :
                new ObjectParameter("PettyCashId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RejectRequisition_Select_Result>("usp_RejectRequisition_Select", pettyCashIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_RejectRequisition_Update_Result> usp_RejectRequisition_Update(Nullable<int> pettyCashTransactionId, Nullable<int> updateUserById)
        {
            var pettyCashTransactionIdParameter = pettyCashTransactionId.HasValue ?
                new ObjectParameter("PettyCashTransactionId", pettyCashTransactionId) :
                new ObjectParameter("PettyCashTransactionId", typeof(int));
    
            var updateUserByIdParameter = updateUserById.HasValue ?
                new ObjectParameter("UpdateUserById", updateUserById) :
                new ObjectParameter("UpdateUserById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RejectRequisition_Update_Result>("usp_RejectRequisition_Update", pettyCashTransactionIdParameter, updateUserByIdParameter);
        }
    
        public virtual ObjectResult<usp_Payment_Select_Result> usp_Payment_Select(Nullable<int> transferId, Nullable<int> paymentId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var transferIdParameter = transferId.HasValue ?
                new ObjectParameter("TransferId", transferId) :
                new ObjectParameter("TransferId", typeof(int));
    
            var paymentIdParameter = paymentId.HasValue ?
                new ObjectParameter("PaymentId", paymentId) :
                new ObjectParameter("PaymentId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Payment_Select_Result>("usp_Payment_Select", transferIdParameter, paymentIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_Transfer_Select_Result> usp_Transfer_Select(Nullable<int> branchId, Nullable<bool> isScanDoc, Nullable<bool> isTransfer, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var isScanDocParameter = isScanDoc.HasValue ?
                new ObjectParameter("IsScanDoc", isScanDoc) :
                new ObjectParameter("IsScanDoc", typeof(bool));
    
            var isTransferParameter = isTransfer.HasValue ?
                new ObjectParameter("IsTransfer", isTransfer) :
                new ObjectParameter("IsTransfer", typeof(bool));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Transfer_Select_Result>("usp_Transfer_Select", branchIdParameter, isScanDocParameter, isTransferParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_Transfer_Update_Result> usp_Transfer_Update(Nullable<int> transferId, Nullable<int> transferByUserId, Nullable<System.DateTime> transferDate, Nullable<int> bankId, string bankAccountNo, string bankAccountName)
        {
            var transferIdParameter = transferId.HasValue ?
                new ObjectParameter("TransferId", transferId) :
                new ObjectParameter("TransferId", typeof(int));
    
            var transferByUserIdParameter = transferByUserId.HasValue ?
                new ObjectParameter("TransferByUserId", transferByUserId) :
                new ObjectParameter("TransferByUserId", typeof(int));
    
            var transferDateParameter = transferDate.HasValue ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(System.DateTime));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var bankAccountNoParameter = bankAccountNo != null ?
                new ObjectParameter("BankAccountNo", bankAccountNo) :
                new ObjectParameter("BankAccountNo", typeof(string));
    
            var bankAccountNameParameter = bankAccountName != null ?
                new ObjectParameter("BankAccountName", bankAccountName) :
                new ObjectParameter("BankAccountName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Transfer_Update_Result>("usp_Transfer_Update", transferIdParameter, transferByUserIdParameter, transferDateParameter, bankIdParameter, bankAccountNoParameter, bankAccountNameParameter);
        }
    
        public virtual ObjectResult<usp_RequisitionDetail_Select_Result> usp_RequisitionDetail_Select(Nullable<int> requisitionHeaderID, Nullable<int> organizeId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var requisitionHeaderIDParameter = requisitionHeaderID.HasValue ?
                new ObjectParameter("RequisitionHeaderID", requisitionHeaderID) :
                new ObjectParameter("RequisitionHeaderID", typeof(int));
    
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RequisitionDetail_Select_Result>("usp_RequisitionDetail_Select", requisitionHeaderIDParameter, organizeIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_RequisitionDetailById_Select_Result> usp_RequisitionDetailById_Select(Nullable<int> requisitionDetailId)
        {
            var requisitionDetailIdParameter = requisitionDetailId.HasValue ?
                new ObjectParameter("RequisitionDetailId", requisitionDetailId) :
                new ObjectParameter("RequisitionDetailId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RequisitionDetailById_Select_Result>("usp_RequisitionDetailById_Select", requisitionDetailIdParameter);
        }
    
        public virtual ObjectResult<usp_RequisitionDetail_Update_Result> usp_RequisitionDetail_Update(Nullable<int> requisitiondetailId, Nullable<int> requisitionDetailStatusId, Nullable<int> rejectRequisitionCauseId, string remark, Nullable<int> updatedByUserId)
        {
            var requisitiondetailIdParameter = requisitiondetailId.HasValue ?
                new ObjectParameter("RequisitiondetailId", requisitiondetailId) :
                new ObjectParameter("RequisitiondetailId", typeof(int));
    
            var requisitionDetailStatusIdParameter = requisitionDetailStatusId.HasValue ?
                new ObjectParameter("RequisitionDetailStatusId", requisitionDetailStatusId) :
                new ObjectParameter("RequisitionDetailStatusId", typeof(int));
    
            var rejectRequisitionCauseIdParameter = rejectRequisitionCauseId.HasValue ?
                new ObjectParameter("RejectRequisitionCauseId", rejectRequisitionCauseId) :
                new ObjectParameter("RejectRequisitionCauseId", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RequisitionDetail_Update_Result>("usp_RequisitionDetail_Update", requisitiondetailIdParameter, requisitionDetailStatusIdParameter, rejectRequisitionCauseIdParameter, remarkParameter, updatedByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_Transfer_ById_Select_Result> usp_Transfer_ById_Select(Nullable<int> transferId)
        {
            var transferIdParameter = transferId.HasValue ?
                new ObjectParameter("TransferId", transferId) :
                new ObjectParameter("TransferId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Transfer_ById_Select_Result>("usp_Transfer_ById_Select", transferIdParameter);
        }
    
        public virtual ObjectResult<usp_TransferForPrintHeader_ById_Select_Result> usp_TransferForPrintHeader_ById_Select(Nullable<int> transferId)
        {
            var transferIdParameter = transferId.HasValue ?
                new ObjectParameter("TransferId", transferId) :
                new ObjectParameter("TransferId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TransferForPrintHeader_ById_Select_Result>("usp_TransferForPrintHeader_ById_Select", transferIdParameter);
        }
    
        public virtual ObjectResult<usp_Transfer_ScanDoc_Update_Result> usp_Transfer_ScanDoc_Update(Nullable<int> transferId, Nullable<int> updatedByUserId)
        {
            var transferIdParameter = transferId.HasValue ?
                new ObjectParameter("TransferId", transferId) :
                new ObjectParameter("TransferId", typeof(int));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Transfer_ScanDoc_Update_Result>("usp_Transfer_ScanDoc_Update", transferIdParameter, updatedByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_Report_PettyCashXPettyCashDaily_Select_Result> usp_Report_PettyCashXPettyCashDaily_Select(Nullable<int> branchId, Nullable<int> statusId, Nullable<System.DateTime> createdDateFrom, Nullable<System.DateTime> createdDateTo, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var createdDateFromParameter = createdDateFrom.HasValue ?
                new ObjectParameter("CreatedDateFrom", createdDateFrom) :
                new ObjectParameter("CreatedDateFrom", typeof(System.DateTime));
    
            var createdDateToParameter = createdDateTo.HasValue ?
                new ObjectParameter("CreatedDateTo", createdDateTo) :
                new ObjectParameter("CreatedDateTo", typeof(System.DateTime));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Report_PettyCashXPettyCashDaily_Select_Result>("usp_Report_PettyCashXPettyCashDaily_Select", branchIdParameter, statusIdParameter, createdDateFromParameter, createdDateToParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_Report_PettyCashXPettyCashDailyDetail_Select_Result> usp_Report_PettyCashXPettyCashDailyDetail_Select(Nullable<int> branchId, Nullable<int> statusId, Nullable<System.DateTime> createdDateFrom, Nullable<System.DateTime> createdDateTo)
        {
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var createdDateFromParameter = createdDateFrom.HasValue ?
                new ObjectParameter("CreatedDateFrom", createdDateFrom) :
                new ObjectParameter("CreatedDateFrom", typeof(System.DateTime));
    
            var createdDateToParameter = createdDateTo.HasValue ?
                new ObjectParameter("CreatedDateTo", createdDateTo) :
                new ObjectParameter("CreatedDateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Report_PettyCashXPettyCashDailyDetail_Select_Result>("usp_Report_PettyCashXPettyCashDailyDetail_Select", branchIdParameter, statusIdParameter, createdDateFromParameter, createdDateToParameter);
        }
    
        public virtual ObjectResult<usp_Report_Transfer_Select_Result> usp_Report_Transfer_Select(Nullable<int> branchId, Nullable<System.DateTime> transferDateFrom, Nullable<System.DateTime> transferDateTo, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var transferDateFromParameter = transferDateFrom.HasValue ?
                new ObjectParameter("TransferDateFrom", transferDateFrom) :
                new ObjectParameter("TransferDateFrom", typeof(System.DateTime));
    
            var transferDateToParameter = transferDateTo.HasValue ?
                new ObjectParameter("TransferDateTo", transferDateTo) :
                new ObjectParameter("TransferDateTo", typeof(System.DateTime));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Report_Transfer_Select_Result>("usp_Report_Transfer_Select", branchIdParameter, transferDateFromParameter, transferDateToParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_Report_TransferDetail_Select_Result> usp_Report_TransferDetail_Select(Nullable<int> branchId, Nullable<System.DateTime> transferDateFrom, Nullable<System.DateTime> transferDateTo)
        {
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var transferDateFromParameter = transferDateFrom.HasValue ?
                new ObjectParameter("TransferDateFrom", transferDateFrom) :
                new ObjectParameter("TransferDateFrom", typeof(System.DateTime));
    
            var transferDateToParameter = transferDateTo.HasValue ?
                new ObjectParameter("TransferDateTo", transferDateTo) :
                new ObjectParameter("TransferDateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Report_TransferDetail_Select_Result>("usp_Report_TransferDetail_Select", branchIdParameter, transferDateFromParameter, transferDateToParameter);
        }
    
        public virtual ObjectResult<usp_ProgramConfig_PettyCash_WithdrawAmount_Select_Result> usp_ProgramConfig_PettyCash_WithdrawAmount_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProgramConfig_PettyCash_WithdrawAmount_Select_Result>("usp_ProgramConfig_PettyCash_WithdrawAmount_Select");
        }
    
        public virtual int usp_ProgramConfig_PettyCash_WithdrawAmount_Update(Nullable<double> withdrawAmount, Nullable<int> updatedByUserId)
        {
            var withdrawAmountParameter = withdrawAmount.HasValue ?
                new ObjectParameter("WithdrawAmount", withdrawAmount) :
                new ObjectParameter("WithdrawAmount", typeof(double));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProgramConfig_PettyCash_WithdrawAmount_Update", withdrawAmountParameter, updatedByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_Report_PettyCashTransaction_Select_Result> usp_Report_PettyCashTransaction_Select(Nullable<int> branchId, Nullable<System.DateTime> transactionDateFrom, Nullable<System.DateTime> transactionDateTo, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var transactionDateFromParameter = transactionDateFrom.HasValue ?
                new ObjectParameter("TransactionDateFrom", transactionDateFrom) :
                new ObjectParameter("TransactionDateFrom", typeof(System.DateTime));
    
            var transactionDateToParameter = transactionDateTo.HasValue ?
                new ObjectParameter("TransactionDateTo", transactionDateTo) :
                new ObjectParameter("TransactionDateTo", typeof(System.DateTime));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Report_PettyCashTransaction_Select_Result>("usp_Report_PettyCashTransaction_Select", branchIdParameter, transactionDateFromParameter, transactionDateToParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    }
}
