//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmileUnderwriteBranchV2.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class UnderwriteBranchV2MotorModelContainer : DbContext
    {
        public UnderwriteBranchV2MotorModelContainer()
            : base("name=UnderwriteBranchV2MotorModelContainer")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<usp_DistrictByProvinceId_Select_Result> usp_DistrictByProvinceId_Select(Nullable<int> provinceId)
        {
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DistrictByProvinceId_Select_Result>("usp_DistrictByProvinceId_Select", provinceIdParameter);
        }
    
        public virtual ObjectResult<usp_Province_Select_Result> usp_Province_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Province_Select_Result>("usp_Province_Select");
        }
    
        public virtual ObjectResult<usp_CallStatusMotor_Select_Result> usp_CallStatusMotor_Select(Nullable<int> callStatusId)
        {
            var callStatusIdParameter = callStatusId.HasValue ?
                new ObjectParameter("CallStatusId", callStatusId) :
                new ObjectParameter("CallStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CallStatusMotor_Select_Result>("usp_CallStatusMotor_Select", callStatusIdParameter);
        }
    
        public virtual ObjectResult<usp_GiveTypeMotor_Select_Result> usp_GiveTypeMotor_Select(Nullable<int> giveTypeId)
        {
            var giveTypeIdParameter = giveTypeId.HasValue ?
                new ObjectParameter("GiveTypeId", giveTypeId) :
                new ObjectParameter("GiveTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GiveTypeMotor_Select_Result>("usp_GiveTypeMotor_Select", giveTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorPolicies_Insert_Result> usp_QueueMotorPolicies_Insert(Nullable<int> queueId, Nullable<int> giverUserId, Nullable<System.DateTime> giveDate, Nullable<int> giveTypeId, string uRLPath, string physicalPath, string fileName, Nullable<int> createdByUserId, string giveTypeRemark, string giveRemark)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var giverUserIdParameter = giverUserId.HasValue ?
                new ObjectParameter("GiverUserId", giverUserId) :
                new ObjectParameter("GiverUserId", typeof(int));
    
            var giveDateParameter = giveDate.HasValue ?
                new ObjectParameter("GiveDate", giveDate) :
                new ObjectParameter("GiveDate", typeof(System.DateTime));
    
            var giveTypeIdParameter = giveTypeId.HasValue ?
                new ObjectParameter("GiveTypeId", giveTypeId) :
                new ObjectParameter("GiveTypeId", typeof(int));
    
            var uRLPathParameter = uRLPath != null ?
                new ObjectParameter("URLPath", uRLPath) :
                new ObjectParameter("URLPath", typeof(string));
    
            var physicalPathParameter = physicalPath != null ?
                new ObjectParameter("PhysicalPath", physicalPath) :
                new ObjectParameter("PhysicalPath", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            var giveTypeRemarkParameter = giveTypeRemark != null ?
                new ObjectParameter("GiveTypeRemark", giveTypeRemark) :
                new ObjectParameter("GiveTypeRemark", typeof(string));
    
            var giveRemarkParameter = giveRemark != null ?
                new ObjectParameter("GiveRemark", giveRemark) :
                new ObjectParameter("GiveRemark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorPolicies_Insert_Result>("usp_QueueMotorPolicies_Insert", queueIdParameter, giverUserIdParameter, giveDateParameter, giveTypeIdParameter, uRLPathParameter, physicalPathParameter, fileNameParameter, createdByUserIdParameter, giveTypeRemarkParameter, giveRemarkParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorPoliciesComplete_Select_Result> usp_QueueMotorPoliciesComplete_Select(Nullable<System.DateTime> startCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId, Nullable<int> provinceId, Nullable<int> districtId, string applicationCode, string insuredName, string payerName, string payerOfficeName, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var startCoverDateParameter = startCoverDate.HasValue ?
                new ObjectParameter("StartCoverDate", startCoverDate) :
                new ObjectParameter("StartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var insuredNameParameter = insuredName != null ?
                new ObjectParameter("InsuredName", insuredName) :
                new ObjectParameter("InsuredName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var payerOfficeNameParameter = payerOfficeName != null ?
                new ObjectParameter("PayerOfficeName", payerOfficeName) :
                new ObjectParameter("PayerOfficeName", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorPoliciesComplete_Select_Result>("usp_QueueMotorPoliciesComplete_Select", startCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter, provinceIdParameter, districtIdParameter, applicationCodeParameter, insuredNameParameter, payerNameParameter, payerOfficeNameParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorPoliciesPending_Select_Result> usp_QueueMotorPoliciesPending_Select(Nullable<System.DateTime> startCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId, Nullable<int> provinceId, Nullable<int> districtId, string applicationCode, string insuredName, string payerName, string payerOfficeName, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var startCoverDateParameter = startCoverDate.HasValue ?
                new ObjectParameter("StartCoverDate", startCoverDate) :
                new ObjectParameter("StartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var insuredNameParameter = insuredName != null ?
                new ObjectParameter("InsuredName", insuredName) :
                new ObjectParameter("InsuredName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var payerOfficeNameParameter = payerOfficeName != null ?
                new ObjectParameter("PayerOfficeName", payerOfficeName) :
                new ObjectParameter("PayerOfficeName", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorPoliciesPending_Select_Result>("usp_QueueMotorPoliciesPending_Select", startCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter, provinceIdParameter, districtIdParameter, applicationCodeParameter, insuredNameParameter, payerNameParameter, payerOfficeNameParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueuePoliciesGiver_Select_Result> usp_QueuePoliciesGiver_Select(string giverName)
        {
            var giverNameParameter = giverName != null ?
                new ObjectParameter("GiverName", giverName) :
                new ObjectParameter("GiverName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueuePoliciesGiver_Select_Result>("usp_QueuePoliciesGiver_Select", giverNameParameter);
        }
    
        public virtual ObjectResult<usp_QueueStatusMotor_Select_Result> usp_QueueStatusMotor_Select(Nullable<int> queueStatusId)
        {
            var queueStatusIdParameter = queueStatusId.HasValue ?
                new ObjectParameter("QueueStatusId", queueStatusId) :
                new ObjectParameter("QueueStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueStatusMotor_Select_Result>("usp_QueueStatusMotor_Select", queueStatusIdParameter);
        }
    
        public virtual ObjectResult<usp_UnderwritePaymentTypeMotor_Select_Result> usp_UnderwritePaymentTypeMotor_Select(Nullable<int> underwritePaymentTypeId)
        {
            var underwritePaymentTypeIdParameter = underwritePaymentTypeId.HasValue ?
                new ObjectParameter("UnderwritePaymentTypeId", underwritePaymentTypeId) :
                new ObjectParameter("UnderwritePaymentTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UnderwritePaymentTypeMotor_Select_Result>("usp_UnderwritePaymentTypeMotor_Select", underwritePaymentTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_UnderwriteTypeMotor_Select_Result> usp_UnderwriteTypeMotor_Select(Nullable<int> underwriteTypeId)
        {
            var underwriteTypeIdParameter = underwriteTypeId.HasValue ?
                new ObjectParameter("UnderwriteTypeId", underwriteTypeId) :
                new ObjectParameter("UnderwriteTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UnderwriteTypeMotor_Select_Result>("usp_UnderwriteTypeMotor_Select", underwriteTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorResultByQueueId_Insert_Result> usp_QueueMotorResultByQueueId_Insert(Nullable<int> queueId, Nullable<int> queueStatusId, Nullable<bool> isUnderwrite, Nullable<bool> isNotFoundCustomer, Nullable<int> underwriteTypeId, Nullable<int> callStatusId, string callCauseRemark, Nullable<bool> isUnderwriteInsured, Nullable<bool> isUnderwritePayer, Nullable<int> underwritePaymentTypeId, Nullable<bool> isUnderwritePass, Nullable<bool> isUnderwritePassStandard, Nullable<bool> isUnderwritePassCondition, Nullable<bool> isUnderwritePassIsSpecify, Nullable<bool> isUnderwritePassIsSpecifyNotComplete, string underwritePassSpecifyRemark, Nullable<bool> isUnderwriteUnPassVehicleSpec, Nullable<bool> isUnderwriteUnPassVehicleUseType, Nullable<bool> isUnderwriteUnPassCantPay, Nullable<bool> isUnderwriteUnPassCantContact, Nullable<bool> isUnderwriteUnPassOther, string underwriteUnPassOtherRemark, string remark, Nullable<int> createdByUserId)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var queueStatusIdParameter = queueStatusId.HasValue ?
                new ObjectParameter("QueueStatusId", queueStatusId) :
                new ObjectParameter("QueueStatusId", typeof(int));
    
            var isUnderwriteParameter = isUnderwrite.HasValue ?
                new ObjectParameter("IsUnderwrite", isUnderwrite) :
                new ObjectParameter("IsUnderwrite", typeof(bool));
    
            var isNotFoundCustomerParameter = isNotFoundCustomer.HasValue ?
                new ObjectParameter("IsNotFoundCustomer", isNotFoundCustomer) :
                new ObjectParameter("IsNotFoundCustomer", typeof(bool));
    
            var underwriteTypeIdParameter = underwriteTypeId.HasValue ?
                new ObjectParameter("UnderwriteTypeId", underwriteTypeId) :
                new ObjectParameter("UnderwriteTypeId", typeof(int));
    
            var callStatusIdParameter = callStatusId.HasValue ?
                new ObjectParameter("CallStatusId", callStatusId) :
                new ObjectParameter("CallStatusId", typeof(int));
    
            var callCauseRemarkParameter = callCauseRemark != null ?
                new ObjectParameter("CallCauseRemark", callCauseRemark) :
                new ObjectParameter("CallCauseRemark", typeof(string));
    
            var isUnderwriteInsuredParameter = isUnderwriteInsured.HasValue ?
                new ObjectParameter("IsUnderwriteInsured", isUnderwriteInsured) :
                new ObjectParameter("IsUnderwriteInsured", typeof(bool));
    
            var isUnderwritePayerParameter = isUnderwritePayer.HasValue ?
                new ObjectParameter("IsUnderwritePayer", isUnderwritePayer) :
                new ObjectParameter("IsUnderwritePayer", typeof(bool));
    
            var underwritePaymentTypeIdParameter = underwritePaymentTypeId.HasValue ?
                new ObjectParameter("UnderwritePaymentTypeId", underwritePaymentTypeId) :
                new ObjectParameter("UnderwritePaymentTypeId", typeof(int));
    
            var isUnderwritePassParameter = isUnderwritePass.HasValue ?
                new ObjectParameter("IsUnderwritePass", isUnderwritePass) :
                new ObjectParameter("IsUnderwritePass", typeof(bool));
    
            var isUnderwritePassStandardParameter = isUnderwritePassStandard.HasValue ?
                new ObjectParameter("IsUnderwritePassStandard", isUnderwritePassStandard) :
                new ObjectParameter("IsUnderwritePassStandard", typeof(bool));
    
            var isUnderwritePassConditionParameter = isUnderwritePassCondition.HasValue ?
                new ObjectParameter("IsUnderwritePassCondition", isUnderwritePassCondition) :
                new ObjectParameter("IsUnderwritePassCondition", typeof(bool));
    
            var isUnderwritePassIsSpecifyParameter = isUnderwritePassIsSpecify.HasValue ?
                new ObjectParameter("IsUnderwritePassIsSpecify", isUnderwritePassIsSpecify) :
                new ObjectParameter("IsUnderwritePassIsSpecify", typeof(bool));
    
            var isUnderwritePassIsSpecifyNotCompleteParameter = isUnderwritePassIsSpecifyNotComplete.HasValue ?
                new ObjectParameter("IsUnderwritePassIsSpecifyNotComplete", isUnderwritePassIsSpecifyNotComplete) :
                new ObjectParameter("IsUnderwritePassIsSpecifyNotComplete", typeof(bool));
    
            var underwritePassSpecifyRemarkParameter = underwritePassSpecifyRemark != null ?
                new ObjectParameter("UnderwritePassSpecifyRemark", underwritePassSpecifyRemark) :
                new ObjectParameter("UnderwritePassSpecifyRemark", typeof(string));
    
            var isUnderwriteUnPassVehicleSpecParameter = isUnderwriteUnPassVehicleSpec.HasValue ?
                new ObjectParameter("IsUnderwriteUnPassVehicleSpec", isUnderwriteUnPassVehicleSpec) :
                new ObjectParameter("IsUnderwriteUnPassVehicleSpec", typeof(bool));
    
            var isUnderwriteUnPassVehicleUseTypeParameter = isUnderwriteUnPassVehicleUseType.HasValue ?
                new ObjectParameter("IsUnderwriteUnPassVehicleUseType", isUnderwriteUnPassVehicleUseType) :
                new ObjectParameter("IsUnderwriteUnPassVehicleUseType", typeof(bool));
    
            var isUnderwriteUnPassCantPayParameter = isUnderwriteUnPassCantPay.HasValue ?
                new ObjectParameter("IsUnderwriteUnPassCantPay", isUnderwriteUnPassCantPay) :
                new ObjectParameter("IsUnderwriteUnPassCantPay", typeof(bool));
    
            var isUnderwriteUnPassCantContactParameter = isUnderwriteUnPassCantContact.HasValue ?
                new ObjectParameter("IsUnderwriteUnPassCantContact", isUnderwriteUnPassCantContact) :
                new ObjectParameter("IsUnderwriteUnPassCantContact", typeof(bool));
    
            var isUnderwriteUnPassOtherParameter = isUnderwriteUnPassOther.HasValue ?
                new ObjectParameter("IsUnderwriteUnPassOther", isUnderwriteUnPassOther) :
                new ObjectParameter("IsUnderwriteUnPassOther", typeof(bool));
    
            var underwriteUnPassOtherRemarkParameter = underwriteUnPassOtherRemark != null ?
                new ObjectParameter("UnderwriteUnPassOtherRemark", underwriteUnPassOtherRemark) :
                new ObjectParameter("UnderwriteUnPassOtherRemark", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorResultByQueueId_Insert_Result>("usp_QueueMotorResultByQueueId_Insert", queueIdParameter, queueStatusIdParameter, isUnderwriteParameter, isNotFoundCustomerParameter, underwriteTypeIdParameter, callStatusIdParameter, callCauseRemarkParameter, isUnderwriteInsuredParameter, isUnderwritePayerParameter, underwritePaymentTypeIdParameter, isUnderwritePassParameter, isUnderwritePassStandardParameter, isUnderwritePassConditionParameter, isUnderwritePassIsSpecifyParameter, isUnderwritePassIsSpecifyNotCompleteParameter, underwritePassSpecifyRemarkParameter, isUnderwriteUnPassVehicleSpecParameter, isUnderwriteUnPassVehicleUseTypeParameter, isUnderwriteUnPassCantPayParameter, isUnderwriteUnPassCantContactParameter, isUnderwriteUnPassOtherParameter, underwriteUnPassOtherRemarkParameter, remarkParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueuePoliciesByQueuePoliciesId_Select_Result> usp_QueuePoliciesByQueuePoliciesId_Select(Nullable<int> queuePoliciesId)
        {
            var queuePoliciesIdParameter = queuePoliciesId.HasValue ?
                new ObjectParameter("QueuePoliciesId", queuePoliciesId) :
                new ObjectParameter("QueuePoliciesId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueuePoliciesByQueuePoliciesId_Select_Result>("usp_QueuePoliciesByQueuePoliciesId_Select", queuePoliciesIdParameter);
        }
    
        public virtual ObjectResult<usp_pivotQueueMotorStatusByAssignToUserId_Select_Result> usp_pivotQueueMotorStatusByAssignToUserId_Select(Nullable<System.DateTime> startCoverDate, Nullable<int> assignToUserId)
        {
            var startCoverDateParameter = startCoverDate.HasValue ?
                new ObjectParameter("StartCoverDate", startCoverDate) :
                new ObjectParameter("StartCoverDate", typeof(System.DateTime));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pivotQueueMotorStatusByAssignToUserId_Select_Result>("usp_pivotQueueMotorStatusByAssignToUserId_Select", startCoverDateParameter, assignToUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAssign_Select_Result> usp_QueueMotorAssign_Select(Nullable<System.DateTime> startCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId, Nullable<int> provinceId, Nullable<int> districtId, string applicationCode, string insuredName, string payerName, string directorName, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var startCoverDateParameter = startCoverDate.HasValue ?
                new ObjectParameter("StartCoverDate", startCoverDate) :
                new ObjectParameter("StartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var insuredNameParameter = insuredName != null ?
                new ObjectParameter("InsuredName", insuredName) :
                new ObjectParameter("InsuredName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var directorNameParameter = directorName != null ?
                new ObjectParameter("DirectorName", directorName) :
                new ObjectParameter("DirectorName", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAssign_Select_Result>("usp_QueueMotorAssign_Select", startCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter, provinceIdParameter, districtIdParameter, applicationCodeParameter, insuredNameParameter, payerNameParameter, directorNameParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorListAssign_Update_Result> usp_QueueMotorListAssign_Update(string queueIdList, Nullable<int> assignToUserId, Nullable<int> updateByUserId)
        {
            var queueIdListParameter = queueIdList != null ?
                new ObjectParameter("QueueIdList", queueIdList) :
                new ObjectParameter("QueueIdList", typeof(string));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var updateByUserIdParameter = updateByUserId.HasValue ?
                new ObjectParameter("UpdateByUserId", updateByUserId) :
                new ObjectParameter("UpdateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorListAssign_Update_Result>("usp_QueueMotorListAssign_Update", queueIdListParameter, assignToUserIdParameter, updateByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorLogByQueueId_Select_Result> usp_QueueMotorLogByQueueId_Select(Nullable<int> queueId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorLogByQueueId_Select_Result>("usp_QueueMotorLogByQueueId_Select", queueIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorPaymentHistory_Select_Result> usp_QueueMotorPaymentHistory_Select(Nullable<int> queueId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorPaymentHistory_Select_Result>("usp_QueueMotorPaymentHistory_Select", queueIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorUnderwriteHistory_Select_Result> usp_QueueMotorUnderwriteHistory_Select(Nullable<int> queueId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorUnderwriteHistory_Select_Result>("usp_QueueMotorUnderwriteHistory_Select", queueIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_pivotQueueMotorStatusByBranchId_Select_Result> usp_pivotQueueMotorStatusByBranchId_Select(Nullable<System.DateTime> startCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId)
        {
            var startCoverDateParameter = startCoverDate.HasValue ?
                new ObjectParameter("StartCoverDate", startCoverDate) :
                new ObjectParameter("StartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pivotQueueMotorStatusByBranchId_Select_Result>("usp_pivotQueueMotorStatusByBranchId_Select", startCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorApprovePending_Select_Result> usp_QueueMotorApprovePending_Select(Nullable<System.DateTime> startCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId, string searchDetail, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var startCoverDateParameter = startCoverDate.HasValue ?
                new ObjectParameter("StartCoverDate", startCoverDate) :
                new ObjectParameter("StartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorApprovePending_Select_Result>("usp_QueueMotorApprovePending_Select", startCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter, searchDetailParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_pivotQueueMotorApproveByBranchId_Select_Result> usp_pivotQueueMotorApproveByBranchId_Select(Nullable<System.DateTime> startCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId)
        {
            var startCoverDateParameter = startCoverDate.HasValue ?
                new ObjectParameter("StartCoverDate", startCoverDate) :
                new ObjectParameter("StartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pivotQueueMotorApproveByBranchId_Select_Result>("usp_pivotQueueMotorApproveByBranchId_Select", startCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter);
        }
    
        public virtual ObjectResult<usp_pivotQueueMotorStatusOutsiderByBranchId_Select_Result> usp_pivotQueueMotorStatusOutsiderByBranchId_Select(Nullable<System.DateTime> startCoverDate, Nullable<int> payerBranchId, string userIdList)
        {
            var startCoverDateParameter = startCoverDate.HasValue ?
                new ObjectParameter("StartCoverDate", startCoverDate) :
                new ObjectParameter("StartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var userIdListParameter = userIdList != null ?
                new ObjectParameter("UserIdList", userIdList) :
                new ObjectParameter("UserIdList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pivotQueueMotorStatusOutsiderByBranchId_Select_Result>("usp_pivotQueueMotorStatusOutsiderByBranchId_Select", startCoverDateParameter, payerBranchIdParameter, userIdListParameter);
        }
    
        public virtual ObjectResult<usp_pivotQueueMotorUnderwritePendingByBranchId_Select_Result> usp_pivotQueueMotorUnderwritePendingByBranchId_Select(Nullable<System.DateTime> startCoverDate, Nullable<int> payerBranchId)
        {
            var startCoverDateParameter = startCoverDate.HasValue ?
                new ObjectParameter("StartCoverDate", startCoverDate) :
                new ObjectParameter("StartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pivotQueueMotorUnderwritePendingByBranchId_Select_Result>("usp_pivotQueueMotorUnderwritePendingByBranchId_Select", startCoverDateParameter, payerBranchIdParameter);
        }
    
        public virtual ObjectResult<usp_pivotQueueMotorUnderwritePendingOutsiderByBranchId_Select_Result> usp_pivotQueueMotorUnderwritePendingOutsiderByBranchId_Select(Nullable<System.DateTime> startCoverDate, Nullable<int> payerBranchId, string userIdList)
        {
            var startCoverDateParameter = startCoverDate.HasValue ?
                new ObjectParameter("StartCoverDate", startCoverDate) :
                new ObjectParameter("StartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var userIdListParameter = userIdList != null ?
                new ObjectParameter("UserIdList", userIdList) :
                new ObjectParameter("UserIdList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pivotQueueMotorUnderwritePendingOutsiderByBranchId_Select_Result>("usp_pivotQueueMotorUnderwritePendingOutsiderByBranchId_Select", startCoverDateParameter, payerBranchIdParameter, userIdListParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorApproveByQueueId_Update_Result> usp_QueueMotorApproveByQueueId_Update(Nullable<int> queueId, Nullable<int> approveStatusId, Nullable<int> approveByUserId, string approveRemark, Nullable<bool> approveIsUnderwritePassCondition, Nullable<bool> approveIsUnderwritePassIsSpecify, string approveUnderwritePassSpecifyRemark, Nullable<bool> approveIsUnderwriteUnPassVehicleSpec, Nullable<bool> approveIsUnderwriteUnPassVehicleUseType, Nullable<bool> approveIsUnderwriteUnPassCantPay, Nullable<bool> approveIsUnderwriteUnPassCantContact, Nullable<bool> approveIsUnderwriteUnPassOther, string approveUnderwriteUnPassOtherRemark)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var approveStatusIdParameter = approveStatusId.HasValue ?
                new ObjectParameter("ApproveStatusId", approveStatusId) :
                new ObjectParameter("ApproveStatusId", typeof(int));
    
            var approveByUserIdParameter = approveByUserId.HasValue ?
                new ObjectParameter("ApproveByUserId", approveByUserId) :
                new ObjectParameter("ApproveByUserId", typeof(int));
    
            var approveRemarkParameter = approveRemark != null ?
                new ObjectParameter("ApproveRemark", approveRemark) :
                new ObjectParameter("ApproveRemark", typeof(string));
    
            var approveIsUnderwritePassConditionParameter = approveIsUnderwritePassCondition.HasValue ?
                new ObjectParameter("ApproveIsUnderwritePassCondition", approveIsUnderwritePassCondition) :
                new ObjectParameter("ApproveIsUnderwritePassCondition", typeof(bool));
    
            var approveIsUnderwritePassIsSpecifyParameter = approveIsUnderwritePassIsSpecify.HasValue ?
                new ObjectParameter("ApproveIsUnderwritePassIsSpecify", approveIsUnderwritePassIsSpecify) :
                new ObjectParameter("ApproveIsUnderwritePassIsSpecify", typeof(bool));
    
            var approveUnderwritePassSpecifyRemarkParameter = approveUnderwritePassSpecifyRemark != null ?
                new ObjectParameter("ApproveUnderwritePassSpecifyRemark", approveUnderwritePassSpecifyRemark) :
                new ObjectParameter("ApproveUnderwritePassSpecifyRemark", typeof(string));
    
            var approveIsUnderwriteUnPassVehicleSpecParameter = approveIsUnderwriteUnPassVehicleSpec.HasValue ?
                new ObjectParameter("ApproveIsUnderwriteUnPassVehicleSpec", approveIsUnderwriteUnPassVehicleSpec) :
                new ObjectParameter("ApproveIsUnderwriteUnPassVehicleSpec", typeof(bool));
    
            var approveIsUnderwriteUnPassVehicleUseTypeParameter = approveIsUnderwriteUnPassVehicleUseType.HasValue ?
                new ObjectParameter("ApproveIsUnderwriteUnPassVehicleUseType", approveIsUnderwriteUnPassVehicleUseType) :
                new ObjectParameter("ApproveIsUnderwriteUnPassVehicleUseType", typeof(bool));
    
            var approveIsUnderwriteUnPassCantPayParameter = approveIsUnderwriteUnPassCantPay.HasValue ?
                new ObjectParameter("ApproveIsUnderwriteUnPassCantPay", approveIsUnderwriteUnPassCantPay) :
                new ObjectParameter("ApproveIsUnderwriteUnPassCantPay", typeof(bool));
    
            var approveIsUnderwriteUnPassCantContactParameter = approveIsUnderwriteUnPassCantContact.HasValue ?
                new ObjectParameter("ApproveIsUnderwriteUnPassCantContact", approveIsUnderwriteUnPassCantContact) :
                new ObjectParameter("ApproveIsUnderwriteUnPassCantContact", typeof(bool));
    
            var approveIsUnderwriteUnPassOtherParameter = approveIsUnderwriteUnPassOther.HasValue ?
                new ObjectParameter("ApproveIsUnderwriteUnPassOther", approveIsUnderwriteUnPassOther) :
                new ObjectParameter("ApproveIsUnderwriteUnPassOther", typeof(bool));
    
            var approveUnderwriteUnPassOtherRemarkParameter = approveUnderwriteUnPassOtherRemark != null ?
                new ObjectParameter("ApproveUnderwriteUnPassOtherRemark", approveUnderwriteUnPassOtherRemark) :
                new ObjectParameter("ApproveUnderwriteUnPassOtherRemark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorApproveByQueueId_Update_Result>("usp_QueueMotorApproveByQueueId_Update", queueIdParameter, approveStatusIdParameter, approveByUserIdParameter, approveRemarkParameter, approveIsUnderwritePassConditionParameter, approveIsUnderwritePassIsSpecifyParameter, approveUnderwritePassSpecifyRemarkParameter, approveIsUnderwriteUnPassVehicleSpecParameter, approveIsUnderwriteUnPassVehicleUseTypeParameter, approveIsUnderwriteUnPassCantPayParameter, approveIsUnderwriteUnPassCantContactParameter, approveIsUnderwriteUnPassOtherParameter, approveUnderwriteUnPassOtherRemarkParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorApproveComplete_Select_Result> usp_QueueMotorApproveComplete_Select(Nullable<System.DateTime> startCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId, string searchDetail, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var startCoverDateParameter = startCoverDate.HasValue ?
                new ObjectParameter("StartCoverDate", startCoverDate) :
                new ObjectParameter("StartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorApproveComplete_Select_Result>("usp_QueueMotorApproveComplete_Select", startCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter, searchDetailParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorApprovePendingByBusinessPromoteTeamUserId_Select_Result> usp_QueueMotorApprovePendingByBusinessPromoteTeamUserId_Select(Nullable<int> businessPromoteTeamUserId, Nullable<System.DateTime> startCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId, string insuredName, string payerName, string applicationCode, string directorName, string chairmanName, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var businessPromoteTeamUserIdParameter = businessPromoteTeamUserId.HasValue ?
                new ObjectParameter("BusinessPromoteTeamUserId", businessPromoteTeamUserId) :
                new ObjectParameter("BusinessPromoteTeamUserId", typeof(int));
    
            var startCoverDateParameter = startCoverDate.HasValue ?
                new ObjectParameter("StartCoverDate", startCoverDate) :
                new ObjectParameter("StartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var insuredNameParameter = insuredName != null ?
                new ObjectParameter("InsuredName", insuredName) :
                new ObjectParameter("InsuredName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var directorNameParameter = directorName != null ?
                new ObjectParameter("DirectorName", directorName) :
                new ObjectParameter("DirectorName", typeof(string));
    
            var chairmanNameParameter = chairmanName != null ?
                new ObjectParameter("ChairmanName", chairmanName) :
                new ObjectParameter("ChairmanName", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorApprovePendingByBusinessPromoteTeamUserId_Select_Result>("usp_QueueMotorApprovePendingByBusinessPromoteTeamUserId_Select", businessPromoteTeamUserIdParameter, startCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter, insuredNameParameter, payerNameParameter, applicationCodeParameter, directorNameParameter, chairmanNameParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorCancelBeforeDCR_Select_Result> usp_QueueMotorCancelBeforeDCR_Select(Nullable<System.DateTime> startCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId, string searchDetail, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var startCoverDateParameter = startCoverDate.HasValue ?
                new ObjectParameter("StartCoverDate", startCoverDate) :
                new ObjectParameter("StartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorCancelBeforeDCR_Select_Result>("usp_QueueMotorCancelBeforeDCR_Select", startCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter, searchDetailParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorApprovePendingCountByChairmanUserId_Select_Result> usp_QueueMotorApprovePendingCountByChairmanUserId_Select(Nullable<int> chairmanUserId)
        {
            var chairmanUserIdParameter = chairmanUserId.HasValue ?
                new ObjectParameter("ChairmanUserId", chairmanUserId) :
                new ObjectParameter("ChairmanUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorApprovePendingCountByChairmanUserId_Select_Result>("usp_QueueMotorApprovePendingCountByChairmanUserId_Select", chairmanUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorChairmanReport_Select_Result1> usp_QueueMotorChairmanReport_Select(Nullable<System.DateTime> startCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId)
        {
            var startCoverDateParameter = startCoverDate.HasValue ?
                new ObjectParameter("StartCoverDate", startCoverDate) :
                new ObjectParameter("StartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorChairmanReport_Select_Result1>("usp_QueueMotorChairmanReport_Select", startCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorListAccept_Update_Result> usp_QueueMotorListAccept_Update(string queueIdList, Nullable<int> assignToUserId, Nullable<int> updateByUserId)
        {
            var queueIdListParameter = queueIdList != null ?
                new ObjectParameter("QueueIdList", queueIdList) :
                new ObjectParameter("QueueIdList", typeof(string));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var updateByUserIdParameter = updateByUserId.HasValue ?
                new ObjectParameter("UpdateByUserId", updateByUserId) :
                new ObjectParameter("UpdateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorListAccept_Update_Result>("usp_QueueMotorListAccept_Update", queueIdListParameter, assignToUserIdParameter, updateByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorListAssignV2_Update_Result> usp_QueueMotorListAssignV2_Update(string queueIdList, Nullable<int> assignToUserId, Nullable<int> updateByUserId)
        {
            var queueIdListParameter = queueIdList != null ?
                new ObjectParameter("QueueIdList", queueIdList) :
                new ObjectParameter("QueueIdList", typeof(string));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var updateByUserIdParameter = updateByUserId.HasValue ?
                new ObjectParameter("UpdateByUserId", updateByUserId) :
                new ObjectParameter("UpdateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorListAssignV2_Update_Result>("usp_QueueMotorListAssignV2_Update", queueIdListParameter, assignToUserIdParameter, updateByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorApprovePendingByBusinessPromoteTeamUserIdV2_Select_Result> usp_QueueMotorApprovePendingByBusinessPromoteTeamUserIdV2_Select(Nullable<int> businessPromoteTeamUserId, string searchDetail1, string searchDetail2, string searchDetail3, string searchDetail4, Nullable<int> assignToUserId, Nullable<int> payerBranchId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var businessPromoteTeamUserIdParameter = businessPromoteTeamUserId.HasValue ?
                new ObjectParameter("BusinessPromoteTeamUserId", businessPromoteTeamUserId) :
                new ObjectParameter("BusinessPromoteTeamUserId", typeof(int));
    
            var searchDetail1Parameter = searchDetail1 != null ?
                new ObjectParameter("SearchDetail1", searchDetail1) :
                new ObjectParameter("SearchDetail1", typeof(string));
    
            var searchDetail2Parameter = searchDetail2 != null ?
                new ObjectParameter("SearchDetail2", searchDetail2) :
                new ObjectParameter("SearchDetail2", typeof(string));
    
            var searchDetail3Parameter = searchDetail3 != null ?
                new ObjectParameter("SearchDetail3", searchDetail3) :
                new ObjectParameter("SearchDetail3", typeof(string));
    
            var searchDetail4Parameter = searchDetail4 != null ?
                new ObjectParameter("SearchDetail4", searchDetail4) :
                new ObjectParameter("SearchDetail4", typeof(string));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorApprovePendingByBusinessPromoteTeamUserIdV2_Select_Result>("usp_QueueMotorApprovePendingByBusinessPromoteTeamUserIdV2_Select", businessPromoteTeamUserIdParameter, searchDetail1Parameter, searchDetail2Parameter, searchDetail3Parameter, searchDetail4Parameter, assignToUserIdParameter, payerBranchIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_pivotQueueMotorFollowup_Select_Result> usp_pivotQueueMotorFollowup_Select(Nullable<int> payerBranchId, Nullable<System.DateTime> period, string searchText, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pivotQueueMotorFollowup_Select_Result>("usp_pivotQueueMotorFollowup_Select", payerBranchIdParameter, periodParameter, searchTextParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_pivotQueueMotorStatus_Select_Result> usp_pivotQueueMotorStatus_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerStudyAreaId, Nullable<int> payerBranchId, Nullable<int> areaId)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pivotQueueMotorStatus_Select_Result>("usp_pivotQueueMotorStatus_Select", appStartCoverDateParameter, payerStudyAreaIdParameter, payerBranchIdParameter, areaIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorEdit_Select_Result> usp_QueueMotorEdit_Select(string searchDetail1, string searchDetail2, string searchDetail3, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var searchDetail1Parameter = searchDetail1 != null ?
                new ObjectParameter("SearchDetail1", searchDetail1) :
                new ObjectParameter("SearchDetail1", typeof(string));
    
            var searchDetail2Parameter = searchDetail2 != null ?
                new ObjectParameter("SearchDetail2", searchDetail2) :
                new ObjectParameter("SearchDetail2", typeof(string));
    
            var searchDetail3Parameter = searchDetail3 != null ?
                new ObjectParameter("SearchDetail3", searchDetail3) :
                new ObjectParameter("SearchDetail3", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorEdit_Select_Result>("usp_QueueMotorEdit_Select", searchDetail1Parameter, searchDetail2Parameter, searchDetail3Parameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_DocumentUnderwriteByQueueId_Select_Result> usp_DocumentUnderwriteByQueueId_Select(Nullable<int> queueId, Nullable<int> documentUnderwriteTypeId)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var documentUnderwriteTypeIdParameter = documentUnderwriteTypeId.HasValue ?
                new ObjectParameter("DocumentUnderwriteTypeId", documentUnderwriteTypeId) :
                new ObjectParameter("DocumentUnderwriteTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DocumentUnderwriteByQueueId_Select_Result>("usp_DocumentUnderwriteByQueueId_Select", queueIdParameter, documentUnderwriteTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAccept_Select_Result1> usp_QueueMotorAccept_Select(string applicationCode, string insuredName, string payerName, Nullable<int> assignToUserId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var insuredNameParameter = insuredName != null ?
                new ObjectParameter("InsuredName", insuredName) :
                new ObjectParameter("InsuredName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAccept_Select_Result1>("usp_QueueMotorAccept_Select", applicationCodeParameter, insuredNameParameter, payerNameParameter, assignToUserIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAssignV2_Select_Result1> usp_QueueMotorAssignV2_Select(string applicationCode, string insuredName, string payerName, Nullable<int> assignToUserId, Nullable<bool> isAcceptQueue, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var insuredNameParameter = insuredName != null ?
                new ObjectParameter("InsuredName", insuredName) :
                new ObjectParameter("InsuredName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var isAcceptQueueParameter = isAcceptQueue.HasValue ?
                new ObjectParameter("IsAcceptQueue", isAcceptQueue) :
                new ObjectParameter("IsAcceptQueue", typeof(bool));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAssignV2_Select_Result1>("usp_QueueMotorAssignV2_Select", applicationCodeParameter, insuredNameParameter, payerNameParameter, assignToUserIdParameter, isAcceptQueueParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorPoliciesCompleteReport_Select_Result2> usp_QueueMotorPoliciesCompleteReport_Select(Nullable<System.DateTime> startCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId, Nullable<int> provinceId, Nullable<int> districtId, string applicationCode, string insuredName, string payerName, string payerOfficeName, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var startCoverDateParameter = startCoverDate.HasValue ?
                new ObjectParameter("StartCoverDate", startCoverDate) :
                new ObjectParameter("StartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var insuredNameParameter = insuredName != null ?
                new ObjectParameter("InsuredName", insuredName) :
                new ObjectParameter("InsuredName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var payerOfficeNameParameter = payerOfficeName != null ?
                new ObjectParameter("PayerOfficeName", payerOfficeName) :
                new ObjectParameter("PayerOfficeName", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorPoliciesCompleteReport_Select_Result2>("usp_QueueMotorPoliciesCompleteReport_Select", startCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter, provinceIdParameter, districtIdParameter, applicationCodeParameter, insuredNameParameter, payerNameParameter, payerOfficeNameParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorPoliciesPendingReport_Select_Result2> usp_QueueMotorPoliciesPendingReport_Select(Nullable<System.DateTime> startCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId, Nullable<int> provinceId, Nullable<int> districtId, string applicationCode, string insuredName, string payerName, string payerOfficeName, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var startCoverDateParameter = startCoverDate.HasValue ?
                new ObjectParameter("StartCoverDate", startCoverDate) :
                new ObjectParameter("StartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var insuredNameParameter = insuredName != null ?
                new ObjectParameter("InsuredName", insuredName) :
                new ObjectParameter("InsuredName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var payerOfficeNameParameter = payerOfficeName != null ?
                new ObjectParameter("PayerOfficeName", payerOfficeName) :
                new ObjectParameter("PayerOfficeName", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorPoliciesPendingReport_Select_Result2>("usp_QueueMotorPoliciesPendingReport_Select", startCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter, provinceIdParameter, districtIdParameter, applicationCodeParameter, insuredNameParameter, payerNameParameter, payerOfficeNameParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorDirectorReport_Select_Result4> usp_QueueMotorDirectorReport_Select(Nullable<System.DateTime> startCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId)
        {
            var startCoverDateParameter = startCoverDate.HasValue ?
                new ObjectParameter("StartCoverDate", startCoverDate) :
                new ObjectParameter("StartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorDirectorReport_Select_Result4>("usp_QueueMotorDirectorReport_Select", startCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorBusinessPromoteTeamReport_Select_Result5> usp_QueueMotorBusinessPromoteTeamReport_Select(Nullable<System.DateTime> startCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId)
        {
            var startCoverDateParameter = startCoverDate.HasValue ?
                new ObjectParameter("StartCoverDate", startCoverDate) :
                new ObjectParameter("StartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorBusinessPromoteTeamReport_Select_Result5>("usp_QueueMotorBusinessPromoteTeamReport_Select", startCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorUnderwritePending_Select_Result3> usp_QueueMotorUnderwritePending_Select(Nullable<System.DateTime> startCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId, string applicationCode, string insuredName, string payerName, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var startCoverDateParameter = startCoverDate.HasValue ?
                new ObjectParameter("StartCoverDate", startCoverDate) :
                new ObjectParameter("StartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var insuredNameParameter = insuredName != null ?
                new ObjectParameter("InsuredName", insuredName) :
                new ObjectParameter("InsuredName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorUnderwritePending_Select_Result3>("usp_QueueMotorUnderwritePending_Select", startCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter, applicationCodeParameter, insuredNameParameter, payerNameParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorUnderwriteCancelBeforeDCR_Select_Result> usp_QueueMotorUnderwriteCancelBeforeDCR_Select(string applicationCode, string searchDetail1, string searchDetail2, Nullable<System.DateTime> appStartCoverDate, Nullable<int> assignToUserId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var searchDetail1Parameter = searchDetail1 != null ?
                new ObjectParameter("SearchDetail1", searchDetail1) :
                new ObjectParameter("SearchDetail1", typeof(string));
    
            var searchDetail2Parameter = searchDetail2 != null ?
                new ObjectParameter("SearchDetail2", searchDetail2) :
                new ObjectParameter("SearchDetail2", typeof(string));
    
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorUnderwriteCancelBeforeDCR_Select_Result>("usp_QueueMotorUnderwriteCancelBeforeDCR_Select", applicationCodeParameter, searchDetail1Parameter, searchDetail2Parameter, appStartCoverDateParameter, assignToUserIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorFullDetailByQueueId_Select_Result> usp_QueueMotorFullDetailByQueueId_Select(Nullable<int> queueId, string applicationCode)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorFullDetailByQueueId_Select_Result>("usp_QueueMotorFullDetailByQueueId_Select", queueIdParameter, applicationCodeParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorResultByQueueIdV2_Insert_Result> usp_QueueMotorResultByQueueIdV2_Insert(Nullable<int> queueId, Nullable<bool> isUnderwriteInsured, Nullable<bool> isUnderwritePayer, Nullable<bool> isBeware, string bewareRemark, string remark, string uRLPath, string physicalPath, string fileName, string giveRemark, Nullable<int> createdByUserId)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var isUnderwriteInsuredParameter = isUnderwriteInsured.HasValue ?
                new ObjectParameter("IsUnderwriteInsured", isUnderwriteInsured) :
                new ObjectParameter("IsUnderwriteInsured", typeof(bool));
    
            var isUnderwritePayerParameter = isUnderwritePayer.HasValue ?
                new ObjectParameter("IsUnderwritePayer", isUnderwritePayer) :
                new ObjectParameter("IsUnderwritePayer", typeof(bool));
    
            var isBewareParameter = isBeware.HasValue ?
                new ObjectParameter("IsBeware", isBeware) :
                new ObjectParameter("IsBeware", typeof(bool));
    
            var bewareRemarkParameter = bewareRemark != null ?
                new ObjectParameter("BewareRemark", bewareRemark) :
                new ObjectParameter("BewareRemark", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var uRLPathParameter = uRLPath != null ?
                new ObjectParameter("URLPath", uRLPath) :
                new ObjectParameter("URLPath", typeof(string));
    
            var physicalPathParameter = physicalPath != null ?
                new ObjectParameter("PhysicalPath", physicalPath) :
                new ObjectParameter("PhysicalPath", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var giveRemarkParameter = giveRemark != null ?
                new ObjectParameter("GiveRemark", giveRemark) :
                new ObjectParameter("GiveRemark", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorResultByQueueIdV2_Insert_Result>("usp_QueueMotorResultByQueueIdV2_Insert", queueIdParameter, isUnderwriteInsuredParameter, isUnderwritePayerParameter, isBewareParameter, bewareRemarkParameter, remarkParameter, uRLPathParameter, physicalPathParameter, fileNameParameter, giveRemarkParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorPoliciesPendingV2_Select_Result> usp_QueueMotorPoliciesPendingV2_Select(Nullable<System.DateTime> startCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId, Nullable<int> provinceId, Nullable<int> districtId, string applicationCode, string insuredName, string payerName, string payerOfficeName, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var startCoverDateParameter = startCoverDate.HasValue ?
                new ObjectParameter("StartCoverDate", startCoverDate) :
                new ObjectParameter("StartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var insuredNameParameter = insuredName != null ?
                new ObjectParameter("InsuredName", insuredName) :
                new ObjectParameter("InsuredName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var payerOfficeNameParameter = payerOfficeName != null ?
                new ObjectParameter("PayerOfficeName", payerOfficeName) :
                new ObjectParameter("PayerOfficeName", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorPoliciesPendingV2_Select_Result>("usp_QueueMotorPoliciesPendingV2_Select", startCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter, provinceIdParameter, districtIdParameter, applicationCodeParameter, insuredNameParameter, payerNameParameter, payerOfficeNameParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorUnderwriteComplete_Select_Result> usp_QueueMotorUnderwriteComplete_Select(string applicationCode, string searchDetail1, string searchDetail2, Nullable<System.DateTime> appStartCoverDate, Nullable<int> assignToUserId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var searchDetail1Parameter = searchDetail1 != null ?
                new ObjectParameter("SearchDetail1", searchDetail1) :
                new ObjectParameter("SearchDetail1", typeof(string));
    
            var searchDetail2Parameter = searchDetail2 != null ?
                new ObjectParameter("SearchDetail2", searchDetail2) :
                new ObjectParameter("SearchDetail2", typeof(string));
    
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorUnderwriteComplete_Select_Result>("usp_QueueMotorUnderwriteComplete_Select", applicationCodeParameter, searchDetail1Parameter, searchDetail2Parameter, appStartCoverDateParameter, assignToUserIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorPoliciesPendingBusinessPromoteTeamReport_Select_Result3> usp_QueueMotorPoliciesPendingBusinessPromoteTeamReport_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorPoliciesPendingBusinessPromoteTeamReport_Select_Result3>("usp_QueueMotorPoliciesPendingBusinessPromoteTeamReport_Select");
        }
    
        public virtual ObjectResult<usp_QueueMotorPoliciesPendingBusinessPromoteTeamReportV2_Select_Result> usp_QueueMotorPoliciesPendingBusinessPromoteTeamReportV2_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorPoliciesPendingBusinessPromoteTeamReportV2_Select_Result>("usp_QueueMotorPoliciesPendingBusinessPromoteTeamReportV2_Select");
        }
    
        public virtual ObjectResult<usp_QueueMotorManualAssignReport_Select_Result> usp_QueueMotorManualAssignReport_Select(Nullable<System.DateTime> startCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId)
        {
            var startCoverDateParameter = startCoverDate.HasValue ?
                new ObjectParameter("StartCoverDate", startCoverDate) :
                new ObjectParameter("StartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorManualAssignReport_Select_Result>("usp_QueueMotorManualAssignReport_Select", startCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorDirectorReportV2_Select_Result> usp_QueueMotorDirectorReportV2_Select(Nullable<System.DateTime> dateForm, Nullable<System.DateTime> dateTo, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId)
        {
            var dateFormParameter = dateForm.HasValue ?
                new ObjectParameter("DateForm", dateForm) :
                new ObjectParameter("DateForm", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorDirectorReportV2_Select_Result>("usp_QueueMotorDirectorReportV2_Select", dateFormParameter, dateToParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorBusinessPromoteTeamReportV2_Select_Result> usp_QueueMotorBusinessPromoteTeamReportV2_Select(Nullable<System.DateTime> dateForm, Nullable<System.DateTime> dateTo, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId)
        {
            var dateFormParameter = dateForm.HasValue ?
                new ObjectParameter("DateForm", dateForm) :
                new ObjectParameter("DateForm", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorBusinessPromoteTeamReportV2_Select_Result>("usp_QueueMotorBusinessPromoteTeamReportV2_Select", dateFormParameter, dateToParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorPoliciesPendingBusinessPromoteTeamReportV3_Select_Result> usp_QueueMotorPoliciesPendingBusinessPromoteTeamReportV3_Select(Nullable<System.DateTime> dateForm, Nullable<System.DateTime> dateTo)
        {
            var dateFormParameter = dateForm.HasValue ?
                new ObjectParameter("DateForm", dateForm) :
                new ObjectParameter("DateForm", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorPoliciesPendingBusinessPromoteTeamReportV3_Select_Result>("usp_QueueMotorPoliciesPendingBusinessPromoteTeamReportV3_Select", dateFormParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAdminAssign_Select_Result> usp_QueueMotorAdminAssign_Select(Nullable<System.DateTime> appStartCoverDate, string applicationCode, string cutomerName, string payerName, Nullable<int> payerSubDistrictId, Nullable<int> payerDistrictId, Nullable<int> payerProvinceId, Nullable<int> assignToUserId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var cutomerNameParameter = cutomerName != null ?
                new ObjectParameter("CutomerName", cutomerName) :
                new ObjectParameter("CutomerName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var payerSubDistrictIdParameter = payerSubDistrictId.HasValue ?
                new ObjectParameter("PayerSubDistrictId", payerSubDistrictId) :
                new ObjectParameter("PayerSubDistrictId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerProvinceIdParameter = payerProvinceId.HasValue ?
                new ObjectParameter("PayerProvinceId", payerProvinceId) :
                new ObjectParameter("PayerProvinceId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAdminAssign_Select_Result>("usp_QueueMotorAdminAssign_Select", appStartCoverDateParameter, applicationCodeParameter, cutomerNameParameter, payerNameParameter, payerSubDistrictIdParameter, payerDistrictIdParameter, payerProvinceIdParameter, assignToUserIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    }
}
