//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmileUnderwriteBranchV2.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class UnderwriteBranchV2Entities : DbContext
    {
        public UnderwriteBranchV2Entities()
            : base("name=UnderwriteBranchV2Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<usp_Branch_Select_Result> usp_Branch_Select(Nullable<int> branchId)
        {
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Branch_Select_Result>("usp_Branch_Select", branchIdParameter);
        }
    
        public virtual ObjectResult<usp_BranchByChairmanUserId_Select_Result> usp_BranchByChairmanUserId_Select(Nullable<int> chairmanUserId)
        {
            var chairmanUserIdParameter = chairmanUserId.HasValue ?
                new ObjectParameter("ChairmanUserId", chairmanUserId) :
                new ObjectParameter("ChairmanUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BranchByChairmanUserId_Select_Result>("usp_BranchByChairmanUserId_Select", chairmanUserIdParameter);
        }
    
        public virtual ObjectResult<usp_CallStatus_Select_Result> usp_CallStatus_Select(Nullable<int> callStatusId)
        {
            var callStatusIdParameter = callStatusId.HasValue ?
                new ObjectParameter("CallStatusId", callStatusId) :
                new ObjectParameter("CallStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CallStatus_Select_Result>("usp_CallStatus_Select", callStatusIdParameter);
        }
    
        public virtual ObjectResult<usp_DirectorByBranchId_Select_Result> usp_DirectorByBranchId_Select(Nullable<int> branchId)
        {
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DirectorByBranchId_Select_Result>("usp_DirectorByBranchId_Select", branchIdParameter);
        }
    
        public virtual ObjectResult<usp_DistrictByProvinceId_Select_Result> usp_DistrictByProvinceId_Select(Nullable<int> provinceId)
        {
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DistrictByProvinceId_Select_Result>("usp_DistrictByProvinceId_Select", provinceIdParameter);
        }
    
        public virtual int usp_GenerateCode(string transactionCodeControlTypeDetail, Nullable<int> runningLenght, ObjectParameter result)
        {
            var transactionCodeControlTypeDetailParameter = transactionCodeControlTypeDetail != null ?
                new ObjectParameter("TransactionCodeControlTypeDetail", transactionCodeControlTypeDetail) :
                new ObjectParameter("TransactionCodeControlTypeDetail", typeof(string));
    
            var runningLenghtParameter = runningLenght.HasValue ?
                new ObjectParameter("RunningLenght", runningLenght) :
                new ObjectParameter("RunningLenght", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GenerateCode", transactionCodeControlTypeDetailParameter, runningLenghtParameter, result);
        }
    
        public virtual int usp_GenerateCode_FromTo(string transactionCodeControlTypeDetail, Nullable<int> total, ObjectParameter yY, ObjectParameter mM, ObjectParameter runningFrom, ObjectParameter runningTo)
        {
            var transactionCodeControlTypeDetailParameter = transactionCodeControlTypeDetail != null ?
                new ObjectParameter("TransactionCodeControlTypeDetail", transactionCodeControlTypeDetail) :
                new ObjectParameter("TransactionCodeControlTypeDetail", typeof(string));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GenerateCode_FromTo", transactionCodeControlTypeDetailParameter, totalParameter, yY, mM, runningFrom, runningTo);
        }
    
        public virtual ObjectResult<usp_pivotQueueStatusByAssignToUserId_Select_Result> usp_pivotQueueStatusByAssignToUserId_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> assignToUserId)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pivotQueueStatusByAssignToUserId_Select_Result>("usp_pivotQueueStatusByAssignToUserId_Select", appStartCoverDateParameter, assignToUserIdParameter);
        }
    
        public virtual ObjectResult<usp_Province_Select_Result> usp_Province_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Province_Select_Result>("usp_Province_Select");
        }
    
        public virtual ObjectResult<usp_ProvinceByChairmanUserId_Select_Result> usp_ProvinceByChairmanUserId_Select(Nullable<int> chairmanUserId)
        {
            var chairmanUserIdParameter = chairmanUserId.HasValue ?
                new ObjectParameter("ChairmanUserId", chairmanUserId) :
                new ObjectParameter("ChairmanUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProvinceByChairmanUserId_Select_Result>("usp_ProvinceByChairmanUserId_Select", chairmanUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueApproveComplete_Select_Result> usp_QueueApproveComplete_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueApproveComplete_Select_Result>("usp_QueueApproveComplete_Select", appStartCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_QueueApprovePending_Select_Result> usp_QueueApprovePending_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueApprovePending_Select_Result>("usp_QueueApprovePending_Select", appStartCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_QueueAssign_Select_Result> usp_QueueAssign_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail, Nullable<int> provinceId, Nullable<int> districtId)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueAssign_Select_Result>("usp_QueueAssign_Select", appStartCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter, provinceIdParameter, districtIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueByApplication_Insert_Result> usp_QueueByApplication_Insert(string applicationCode, string createdByCode)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var createdByCodeParameter = createdByCode != null ?
                new ObjectParameter("CreatedByCode", createdByCode) :
                new ObjectParameter("CreatedByCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueByApplication_Insert_Result>("usp_QueueByApplication_Insert", applicationCodeParameter, createdByCodeParameter);
        }
    
        public virtual ObjectResult<usp_QueueCoBrand_Insert_Result> usp_QueueCoBrand_Insert(Nullable<int> queueId, string coBrandNo, Nullable<int> giverUserId, Nullable<System.DateTime> giverDate, Nullable<int> giverTypeId, string uRLPath, string physicalPath, string fileName, Nullable<int> createdByUserId, string trackingNo, string giveTypeRemark, Nullable<bool> isLineOA, string giveRemark)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var coBrandNoParameter = coBrandNo != null ?
                new ObjectParameter("CoBrandNo", coBrandNo) :
                new ObjectParameter("CoBrandNo", typeof(string));
    
            var giverUserIdParameter = giverUserId.HasValue ?
                new ObjectParameter("GiverUserId", giverUserId) :
                new ObjectParameter("GiverUserId", typeof(int));
    
            var giverDateParameter = giverDate.HasValue ?
                new ObjectParameter("GiverDate", giverDate) :
                new ObjectParameter("GiverDate", typeof(System.DateTime));
    
            var giverTypeIdParameter = giverTypeId.HasValue ?
                new ObjectParameter("GiverTypeId", giverTypeId) :
                new ObjectParameter("GiverTypeId", typeof(int));
    
            var uRLPathParameter = uRLPath != null ?
                new ObjectParameter("URLPath", uRLPath) :
                new ObjectParameter("URLPath", typeof(string));
    
            var physicalPathParameter = physicalPath != null ?
                new ObjectParameter("PhysicalPath", physicalPath) :
                new ObjectParameter("PhysicalPath", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            var trackingNoParameter = trackingNo != null ?
                new ObjectParameter("TrackingNo", trackingNo) :
                new ObjectParameter("TrackingNo", typeof(string));
    
            var giveTypeRemarkParameter = giveTypeRemark != null ?
                new ObjectParameter("GiveTypeRemark", giveTypeRemark) :
                new ObjectParameter("GiveTypeRemark", typeof(string));
    
            var isLineOAParameter = isLineOA.HasValue ?
                new ObjectParameter("IsLineOA", isLineOA) :
                new ObjectParameter("IsLineOA", typeof(bool));
    
            var giveRemarkParameter = giveRemark != null ?
                new ObjectParameter("GiveRemark", giveRemark) :
                new ObjectParameter("GiveRemark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCoBrand_Insert_Result>("usp_QueueCoBrand_Insert", queueIdParameter, coBrandNoParameter, giverUserIdParameter, giverDateParameter, giverTypeIdParameter, uRLPathParameter, physicalPathParameter, fileNameParameter, createdByUserIdParameter, trackingNoParameter, giveTypeRemarkParameter, isLineOAParameter, giveRemarkParameter);
        }
    
        public virtual ObjectResult<usp_QueueCoBrandByQueueCoBrandId_Select_Result> usp_QueueCoBrandByQueueCoBrandId_Select(Nullable<int> queueCoBrandId)
        {
            var queueCoBrandIdParameter = queueCoBrandId.HasValue ?
                new ObjectParameter("QueueCoBrandId", queueCoBrandId) :
                new ObjectParameter("QueueCoBrandId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCoBrandByQueueCoBrandId_Select_Result>("usp_QueueCoBrandByQueueCoBrandId_Select", queueCoBrandIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueCoBrandComplete_Select_Result> usp_QueueCoBrandComplete_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail, Nullable<int> provinceId, Nullable<int> districtId, string searchDetail1, string searchDetail2, string applicationCode)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var searchDetail1Parameter = searchDetail1 != null ?
                new ObjectParameter("SearchDetail1", searchDetail1) :
                new ObjectParameter("SearchDetail1", typeof(string));
    
            var searchDetail2Parameter = searchDetail2 != null ?
                new ObjectParameter("SearchDetail2", searchDetail2) :
                new ObjectParameter("SearchDetail2", typeof(string));
    
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCoBrandComplete_Select_Result>("usp_QueueCoBrandComplete_Select", appStartCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter, provinceIdParameter, districtIdParameter, searchDetail1Parameter, searchDetail2Parameter, applicationCodeParameter);
        }
    
        public virtual ObjectResult<usp_QueueCoBrandGiver_Select_Result> usp_QueueCoBrandGiver_Select(string searchDetail)
        {
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCoBrandGiver_Select_Result>("usp_QueueCoBrandGiver_Select", searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_QueueCoBrandPending_Select_Result> usp_QueueCoBrandPending_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail, Nullable<int> provinceId, Nullable<int> districtId, string searchDetail1, string searchDetail2, string applicationCode)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var searchDetail1Parameter = searchDetail1 != null ?
                new ObjectParameter("SearchDetail1", searchDetail1) :
                new ObjectParameter("SearchDetail1", typeof(string));
    
            var searchDetail2Parameter = searchDetail2 != null ?
                new ObjectParameter("SearchDetail2", searchDetail2) :
                new ObjectParameter("SearchDetail2", typeof(string));
    
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCoBrandPending_Select_Result>("usp_QueueCoBrandPending_Select", appStartCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter, provinceIdParameter, districtIdParameter, searchDetail1Parameter, searchDetail2Parameter, applicationCodeParameter);
        }
    
        public virtual ObjectResult<usp_QueueFullDetailByQueueId_Select_Result> usp_QueueFullDetailByQueueId_Select(Nullable<int> queueId, string applicationCode)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueFullDetailByQueueId_Select_Result>("usp_QueueFullDetailByQueueId_Select", queueIdParameter, applicationCodeParameter);
        }
    
        public virtual ObjectResult<usp_QueueListAssign_Update_Result> usp_QueueListAssign_Update(string queueIdList, Nullable<int> assignToUserId, Nullable<int> updateByUserId)
        {
            var queueIdListParameter = queueIdList != null ?
                new ObjectParameter("QueueIdList", queueIdList) :
                new ObjectParameter("QueueIdList", typeof(string));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var updateByUserIdParameter = updateByUserId.HasValue ?
                new ObjectParameter("UpdateByUserId", updateByUserId) :
                new ObjectParameter("UpdateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueListAssign_Update_Result>("usp_QueueListAssign_Update", queueIdListParameter, assignToUserIdParameter, updateByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueLogByQueueId_Select_Result> usp_QueueLogByQueueId_Select(Nullable<int> queueId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueLogByQueueId_Select_Result>("usp_QueueLogByQueueId_Select", queueIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_QueueResultByQueueId_Insert_Result> usp_QueueResultByQueueId_Insert(Nullable<int> queueId, Nullable<int> queueStatusId, Nullable<bool> isUnderwrite, Nullable<bool> isNotFoundCustomer, Nullable<int> underwriteTypeId, Nullable<int> callStatusId, string callCauseRemark, Nullable<bool> isUnderwriteCust, Nullable<bool> isUnderwritePayer, Nullable<int> underwritePaymentTypeId, Nullable<bool> isUnderwritePass, Nullable<bool> isUnderwritePassStandard, Nullable<bool> isUnderwritePassCondition, Nullable<bool> isUnderwritePassIsSpecify, Nullable<bool> isUnderwritePassIsSpecifyNotComplete, string underwritePassSpecifyRemark, Nullable<bool> isUnderwriteUnPassHealth, Nullable<bool> isUnderwriteUnPassOccupation, Nullable<bool> isUnderwriteUnPassCantPay, Nullable<bool> isUnderwriteUnPassCantContact, Nullable<bool> isUnderwriteUnPassOther, string underwriteUnPassOtherRemark, string remark, Nullable<int> createdByUserId)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var queueStatusIdParameter = queueStatusId.HasValue ?
                new ObjectParameter("QueueStatusId", queueStatusId) :
                new ObjectParameter("QueueStatusId", typeof(int));
    
            var isUnderwriteParameter = isUnderwrite.HasValue ?
                new ObjectParameter("IsUnderwrite", isUnderwrite) :
                new ObjectParameter("IsUnderwrite", typeof(bool));
    
            var isNotFoundCustomerParameter = isNotFoundCustomer.HasValue ?
                new ObjectParameter("IsNotFoundCustomer", isNotFoundCustomer) :
                new ObjectParameter("IsNotFoundCustomer", typeof(bool));
    
            var underwriteTypeIdParameter = underwriteTypeId.HasValue ?
                new ObjectParameter("UnderwriteTypeId", underwriteTypeId) :
                new ObjectParameter("UnderwriteTypeId", typeof(int));
    
            var callStatusIdParameter = callStatusId.HasValue ?
                new ObjectParameter("CallStatusId", callStatusId) :
                new ObjectParameter("CallStatusId", typeof(int));
    
            var callCauseRemarkParameter = callCauseRemark != null ?
                new ObjectParameter("CallCauseRemark", callCauseRemark) :
                new ObjectParameter("CallCauseRemark", typeof(string));
    
            var isUnderwriteCustParameter = isUnderwriteCust.HasValue ?
                new ObjectParameter("IsUnderwriteCust", isUnderwriteCust) :
                new ObjectParameter("IsUnderwriteCust", typeof(bool));
    
            var isUnderwritePayerParameter = isUnderwritePayer.HasValue ?
                new ObjectParameter("IsUnderwritePayer", isUnderwritePayer) :
                new ObjectParameter("IsUnderwritePayer", typeof(bool));
    
            var underwritePaymentTypeIdParameter = underwritePaymentTypeId.HasValue ?
                new ObjectParameter("UnderwritePaymentTypeId", underwritePaymentTypeId) :
                new ObjectParameter("UnderwritePaymentTypeId", typeof(int));
    
            var isUnderwritePassParameter = isUnderwritePass.HasValue ?
                new ObjectParameter("IsUnderwritePass", isUnderwritePass) :
                new ObjectParameter("IsUnderwritePass", typeof(bool));
    
            var isUnderwritePassStandardParameter = isUnderwritePassStandard.HasValue ?
                new ObjectParameter("IsUnderwritePassStandard", isUnderwritePassStandard) :
                new ObjectParameter("IsUnderwritePassStandard", typeof(bool));
    
            var isUnderwritePassConditionParameter = isUnderwritePassCondition.HasValue ?
                new ObjectParameter("IsUnderwritePassCondition", isUnderwritePassCondition) :
                new ObjectParameter("IsUnderwritePassCondition", typeof(bool));
    
            var isUnderwritePassIsSpecifyParameter = isUnderwritePassIsSpecify.HasValue ?
                new ObjectParameter("IsUnderwritePassIsSpecify", isUnderwritePassIsSpecify) :
                new ObjectParameter("IsUnderwritePassIsSpecify", typeof(bool));
    
            var isUnderwritePassIsSpecifyNotCompleteParameter = isUnderwritePassIsSpecifyNotComplete.HasValue ?
                new ObjectParameter("IsUnderwritePassIsSpecifyNotComplete", isUnderwritePassIsSpecifyNotComplete) :
                new ObjectParameter("IsUnderwritePassIsSpecifyNotComplete", typeof(bool));
    
            var underwritePassSpecifyRemarkParameter = underwritePassSpecifyRemark != null ?
                new ObjectParameter("UnderwritePassSpecifyRemark", underwritePassSpecifyRemark) :
                new ObjectParameter("UnderwritePassSpecifyRemark", typeof(string));
    
            var isUnderwriteUnPassHealthParameter = isUnderwriteUnPassHealth.HasValue ?
                new ObjectParameter("IsUnderwriteUnPassHealth", isUnderwriteUnPassHealth) :
                new ObjectParameter("IsUnderwriteUnPassHealth", typeof(bool));
    
            var isUnderwriteUnPassOccupationParameter = isUnderwriteUnPassOccupation.HasValue ?
                new ObjectParameter("IsUnderwriteUnPassOccupation", isUnderwriteUnPassOccupation) :
                new ObjectParameter("IsUnderwriteUnPassOccupation", typeof(bool));
    
            var isUnderwriteUnPassCantPayParameter = isUnderwriteUnPassCantPay.HasValue ?
                new ObjectParameter("IsUnderwriteUnPassCantPay", isUnderwriteUnPassCantPay) :
                new ObjectParameter("IsUnderwriteUnPassCantPay", typeof(bool));
    
            var isUnderwriteUnPassCantContactParameter = isUnderwriteUnPassCantContact.HasValue ?
                new ObjectParameter("IsUnderwriteUnPassCantContact", isUnderwriteUnPassCantContact) :
                new ObjectParameter("IsUnderwriteUnPassCantContact", typeof(bool));
    
            var isUnderwriteUnPassOtherParameter = isUnderwriteUnPassOther.HasValue ?
                new ObjectParameter("IsUnderwriteUnPassOther", isUnderwriteUnPassOther) :
                new ObjectParameter("IsUnderwriteUnPassOther", typeof(bool));
    
            var underwriteUnPassOtherRemarkParameter = underwriteUnPassOtherRemark != null ?
                new ObjectParameter("UnderwriteUnPassOtherRemark", underwriteUnPassOtherRemark) :
                new ObjectParameter("UnderwriteUnPassOtherRemark", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueResultByQueueId_Insert_Result>("usp_QueueResultByQueueId_Insert", queueIdParameter, queueStatusIdParameter, isUnderwriteParameter, isNotFoundCustomerParameter, underwriteTypeIdParameter, callStatusIdParameter, callCauseRemarkParameter, isUnderwriteCustParameter, isUnderwritePayerParameter, underwritePaymentTypeIdParameter, isUnderwritePassParameter, isUnderwritePassStandardParameter, isUnderwritePassConditionParameter, isUnderwritePassIsSpecifyParameter, isUnderwritePassIsSpecifyNotCompleteParameter, underwritePassSpecifyRemarkParameter, isUnderwriteUnPassHealthParameter, isUnderwriteUnPassOccupationParameter, isUnderwriteUnPassCantPayParameter, isUnderwriteUnPassCantContactParameter, isUnderwriteUnPassOtherParameter, underwriteUnPassOtherRemarkParameter, remarkParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_UnderwritePaymentType_Select_Result> usp_UnderwritePaymentType_Select(Nullable<int> underwritePaymentTypeId)
        {
            var underwritePaymentTypeIdParameter = underwritePaymentTypeId.HasValue ?
                new ObjectParameter("UnderwritePaymentTypeId", underwritePaymentTypeId) :
                new ObjectParameter("UnderwritePaymentTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UnderwritePaymentType_Select_Result>("usp_UnderwritePaymentType_Select", underwritePaymentTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_UnderwriteType_Select_Result> usp_UnderwriteType_Select(Nullable<int> underwriteTypeId)
        {
            var underwriteTypeIdParameter = underwriteTypeId.HasValue ?
                new ObjectParameter("UnderwriteTypeId", underwriteTypeId) :
                new ObjectParameter("UnderwriteTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UnderwriteType_Select_Result>("usp_UnderwriteType_Select", underwriteTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueApproveByQueueId_Update_Result> usp_QueueApproveByQueueId_Update(Nullable<int> queueId, Nullable<int> approveStatusId, Nullable<int> approveByUserId, string approveRemark, Nullable<bool> approveIsUnderwritePassCondition, Nullable<bool> approveIsUnderwritePassIsSpecify, string approveUnderwritePassSpecifyRemark, Nullable<bool> approveIsUnderwriteUnPassHealth, Nullable<bool> approveIsUnderwriteUnPassOccupation, Nullable<bool> approveIsUnderwriteUnPassCantPay, Nullable<bool> approveIsUnderwriteUnPassCantContact, Nullable<bool> approveIsUnderwriteUnPassOther, string approveUnderwriteUnPassOtherRemark)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var approveStatusIdParameter = approveStatusId.HasValue ?
                new ObjectParameter("ApproveStatusId", approveStatusId) :
                new ObjectParameter("ApproveStatusId", typeof(int));
    
            var approveByUserIdParameter = approveByUserId.HasValue ?
                new ObjectParameter("ApproveByUserId", approveByUserId) :
                new ObjectParameter("ApproveByUserId", typeof(int));
    
            var approveRemarkParameter = approveRemark != null ?
                new ObjectParameter("ApproveRemark", approveRemark) :
                new ObjectParameter("ApproveRemark", typeof(string));
    
            var approveIsUnderwritePassConditionParameter = approveIsUnderwritePassCondition.HasValue ?
                new ObjectParameter("ApproveIsUnderwritePassCondition", approveIsUnderwritePassCondition) :
                new ObjectParameter("ApproveIsUnderwritePassCondition", typeof(bool));
    
            var approveIsUnderwritePassIsSpecifyParameter = approveIsUnderwritePassIsSpecify.HasValue ?
                new ObjectParameter("ApproveIsUnderwritePassIsSpecify", approveIsUnderwritePassIsSpecify) :
                new ObjectParameter("ApproveIsUnderwritePassIsSpecify", typeof(bool));
    
            var approveUnderwritePassSpecifyRemarkParameter = approveUnderwritePassSpecifyRemark != null ?
                new ObjectParameter("ApproveUnderwritePassSpecifyRemark", approveUnderwritePassSpecifyRemark) :
                new ObjectParameter("ApproveUnderwritePassSpecifyRemark", typeof(string));
    
            var approveIsUnderwriteUnPassHealthParameter = approveIsUnderwriteUnPassHealth.HasValue ?
                new ObjectParameter("ApproveIsUnderwriteUnPassHealth", approveIsUnderwriteUnPassHealth) :
                new ObjectParameter("ApproveIsUnderwriteUnPassHealth", typeof(bool));
    
            var approveIsUnderwriteUnPassOccupationParameter = approveIsUnderwriteUnPassOccupation.HasValue ?
                new ObjectParameter("ApproveIsUnderwriteUnPassOccupation", approveIsUnderwriteUnPassOccupation) :
                new ObjectParameter("ApproveIsUnderwriteUnPassOccupation", typeof(bool));
    
            var approveIsUnderwriteUnPassCantPayParameter = approveIsUnderwriteUnPassCantPay.HasValue ?
                new ObjectParameter("ApproveIsUnderwriteUnPassCantPay", approveIsUnderwriteUnPassCantPay) :
                new ObjectParameter("ApproveIsUnderwriteUnPassCantPay", typeof(bool));
    
            var approveIsUnderwriteUnPassCantContactParameter = approveIsUnderwriteUnPassCantContact.HasValue ?
                new ObjectParameter("ApproveIsUnderwriteUnPassCantContact", approveIsUnderwriteUnPassCantContact) :
                new ObjectParameter("ApproveIsUnderwriteUnPassCantContact", typeof(bool));
    
            var approveIsUnderwriteUnPassOtherParameter = approveIsUnderwriteUnPassOther.HasValue ?
                new ObjectParameter("ApproveIsUnderwriteUnPassOther", approveIsUnderwriteUnPassOther) :
                new ObjectParameter("ApproveIsUnderwriteUnPassOther", typeof(bool));
    
            var approveUnderwriteUnPassOtherRemarkParameter = approveUnderwriteUnPassOtherRemark != null ?
                new ObjectParameter("ApproveUnderwriteUnPassOtherRemark", approveUnderwriteUnPassOtherRemark) :
                new ObjectParameter("ApproveUnderwriteUnPassOtherRemark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueApproveByQueueId_Update_Result>("usp_QueueApproveByQueueId_Update", queueIdParameter, approveStatusIdParameter, approveByUserIdParameter, approveRemarkParameter, approveIsUnderwritePassConditionParameter, approveIsUnderwritePassIsSpecifyParameter, approveUnderwritePassSpecifyRemarkParameter, approveIsUnderwriteUnPassHealthParameter, approveIsUnderwriteUnPassOccupationParameter, approveIsUnderwriteUnPassCantPayParameter, approveIsUnderwriteUnPassCantContactParameter, approveIsUnderwriteUnPassOtherParameter, approveUnderwriteUnPassOtherRemarkParameter);
        }
    
        public virtual int usp_QueueCoBrandFileByQueueId_Update(Nullable<int> queueId, string uRLPath, string physicalPath, string fileName)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var uRLPathParameter = uRLPath != null ?
                new ObjectParameter("URLPath", uRLPath) :
                new ObjectParameter("URLPath", typeof(string));
    
            var physicalPathParameter = physicalPath != null ?
                new ObjectParameter("PhysicalPath", physicalPath) :
                new ObjectParameter("PhysicalPath", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_QueueCoBrandFileByQueueId_Update", queueIdParameter, uRLPathParameter, physicalPathParameter, fileNameParameter);
        }
    
        public virtual ObjectResult<usp_pivotQueueApproveByBranchId_Select_Result> usp_pivotQueueApproveByBranchId_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pivotQueueApproveByBranchId_Select_Result>("usp_pivotQueueApproveByBranchId_Select", appStartCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter);
        }
    
        public virtual ObjectResult<usp_pivotQueueStatusByBranchId_Select_Result> usp_pivotQueueStatusByBranchId_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pivotQueueStatusByBranchId_Select_Result>("usp_pivotQueueStatusByBranchId_Select", appStartCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter);
        }
    
        public virtual ObjectResult<usp_pivotQueueStatusOutsiderByBranchId_Select_Result> usp_pivotQueueStatusOutsiderByBranchId_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerBranchId, string userIdList)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var userIdListParameter = userIdList != null ?
                new ObjectParameter("UserIdList", userIdList) :
                new ObjectParameter("UserIdList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pivotQueueStatusOutsiderByBranchId_Select_Result>("usp_pivotQueueStatusOutsiderByBranchId_Select", appStartCoverDateParameter, payerBranchIdParameter, userIdListParameter);
        }
    
        public virtual ObjectResult<usp_pivotQueueUnderwritePendingByBranchId_Select_Result> usp_pivotQueueUnderwritePendingByBranchId_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerBranchId)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pivotQueueUnderwritePendingByBranchId_Select_Result>("usp_pivotQueueUnderwritePendingByBranchId_Select", appStartCoverDateParameter, payerBranchIdParameter);
        }
    
        public virtual ObjectResult<usp_pivotQueueUnderwritePendingOutsiderByBranchId_Select_Result> usp_pivotQueueUnderwritePendingOutsiderByBranchId_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerBranchId, string userIdList)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var userIdListParameter = userIdList != null ?
                new ObjectParameter("UserIdList", userIdList) :
                new ObjectParameter("UserIdList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pivotQueueUnderwritePendingOutsiderByBranchId_Select_Result>("usp_pivotQueueUnderwritePendingOutsiderByBranchId_Select", appStartCoverDateParameter, payerBranchIdParameter, userIdListParameter);
        }
    
        public virtual ObjectResult<usp_BranchByBusinessPromoteTeamUserId_Select_Result> usp_BranchByBusinessPromoteTeamUserId_Select(Nullable<int> businessPromoteTeamUserId)
        {
            var businessPromoteTeamUserIdParameter = businessPromoteTeamUserId.HasValue ?
                new ObjectParameter("BusinessPromoteTeamUserId", businessPromoteTeamUserId) :
                new ObjectParameter("BusinessPromoteTeamUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BranchByBusinessPromoteTeamUserId_Select_Result>("usp_BranchByBusinessPromoteTeamUserId_Select", businessPromoteTeamUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueByQueueStatusId_Select_Result> usp_QueueByQueueStatusId_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId, Nullable<int> queueStatusId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var queueStatusIdParameter = queueStatusId.HasValue ?
                new ObjectParameter("QueueStatusId", queueStatusId) :
                new ObjectParameter("QueueStatusId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueByQueueStatusId_Select_Result>("usp_QueueByQueueStatusId_Select", appStartCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter, queueStatusIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_GiveType_Select_Result> usp_GiveType_Select(Nullable<int> giveTypeId)
        {
            var giveTypeIdParameter = giveTypeId.HasValue ?
                new ObjectParameter("GiveTypeId", giveTypeId) :
                new ObjectParameter("GiveTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GiveType_Select_Result>("usp_GiveType_Select", giveTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueApprovePendingByBusinessPromoteTeamUserId_Select_Result> usp_QueueApprovePendingByBusinessPromoteTeamUserId_Select(Nullable<int> businessPromoteTeamUserId, Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail1, string searchDetail2, string searchDetail3, string searchDetail4, string searchDetail5)
        {
            var businessPromoteTeamUserIdParameter = businessPromoteTeamUserId.HasValue ?
                new ObjectParameter("BusinessPromoteTeamUserId", businessPromoteTeamUserId) :
                new ObjectParameter("BusinessPromoteTeamUserId", typeof(int));
    
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetail1Parameter = searchDetail1 != null ?
                new ObjectParameter("SearchDetail1", searchDetail1) :
                new ObjectParameter("SearchDetail1", typeof(string));
    
            var searchDetail2Parameter = searchDetail2 != null ?
                new ObjectParameter("SearchDetail2", searchDetail2) :
                new ObjectParameter("SearchDetail2", typeof(string));
    
            var searchDetail3Parameter = searchDetail3 != null ?
                new ObjectParameter("SearchDetail3", searchDetail3) :
                new ObjectParameter("SearchDetail3", typeof(string));
    
            var searchDetail4Parameter = searchDetail4 != null ?
                new ObjectParameter("SearchDetail4", searchDetail4) :
                new ObjectParameter("SearchDetail4", typeof(string));
    
            var searchDetail5Parameter = searchDetail5 != null ?
                new ObjectParameter("SearchDetail5", searchDetail5) :
                new ObjectParameter("SearchDetail5", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueApprovePendingByBusinessPromoteTeamUserId_Select_Result>("usp_QueueApprovePendingByBusinessPromoteTeamUserId_Select", businessPromoteTeamUserIdParameter, appStartCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetail1Parameter, searchDetail2Parameter, searchDetail3Parameter, searchDetail4Parameter, searchDetail5Parameter);
        }
    
        public virtual ObjectResult<usp_pivotQueueApproveStatusV1_Select_Result> usp_pivotQueueApproveStatusV1_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerStudyAreaId, Nullable<int> payerBranchId, Nullable<int> areaId)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pivotQueueApproveStatusV1_Select_Result>("usp_pivotQueueApproveStatusV1_Select", appStartCoverDateParameter, payerStudyAreaIdParameter, payerBranchIdParameter, areaIdParameter);
        }
    
        public virtual ObjectResult<usp_pivotQueueApproveStatusV2_Select_Result> usp_pivotQueueApproveStatusV2_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerStudyAreaId, Nullable<int> payerBranchId, Nullable<int> areaId)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pivotQueueApproveStatusV2_Select_Result>("usp_pivotQueueApproveStatusV2_Select", appStartCoverDateParameter, payerStudyAreaIdParameter, payerBranchIdParameter, areaIdParameter);
        }
    
        public virtual ObjectResult<usp_pivotQueueStatus_Select_Result> usp_pivotQueueStatus_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerStudyAreaId, Nullable<int> payerBranchId, Nullable<int> areaId)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pivotQueueStatus_Select_Result>("usp_pivotQueueStatus_Select", appStartCoverDateParameter, payerStudyAreaIdParameter, payerBranchIdParameter, areaIdParameter);
        }
    
        public virtual ObjectResult<usp_pivotQueueUnderwriteStatus_Select_Result> usp_pivotQueueUnderwriteStatus_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerStudyAreaId, Nullable<int> payerBranchId, Nullable<int> areaId)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pivotQueueUnderwriteStatus_Select_Result>("usp_pivotQueueUnderwriteStatus_Select", appStartCoverDateParameter, payerStudyAreaIdParameter, payerBranchIdParameter, areaIdParameter);
        }
    
        public virtual ObjectResult<usp_pivotQueueUnderwriteType_Select_Result> usp_pivotQueueUnderwriteType_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerStudyAreaId, Nullable<int> payerBranchId, Nullable<int> areaId)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pivotQueueUnderwriteType_Select_Result>("usp_pivotQueueUnderwriteType_Select", appStartCoverDateParameter, payerStudyAreaIdParameter, payerBranchIdParameter, areaIdParameter);
        }
    
        public virtual ObjectResult<usp_pivotQueueCobrand_Select_Result> usp_pivotQueueCobrand_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerStudyAreaId, Nullable<int> payerBranchId, Nullable<int> areaId)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pivotQueueCobrand_Select_Result>("usp_pivotQueueCobrand_Select", appStartCoverDateParameter, payerStudyAreaIdParameter, payerBranchIdParameter, areaIdParameter);
        }
    
        public virtual ObjectResult<usp_pivotQueueCobrandDuration_Select_Result> usp_pivotQueueCobrandDuration_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerStudyAreaId, Nullable<int> payerBranchId, Nullable<int> areaId)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pivotQueueCobrandDuration_Select_Result>("usp_pivotQueueCobrandDuration_Select", appStartCoverDateParameter, payerStudyAreaIdParameter, payerBranchIdParameter, areaIdParameter);
        }
    
        public virtual ObjectResult<usp_StudyArea_Select_Result> usp_StudyArea_Select(Nullable<int> studyAreaId)
        {
            var studyAreaIdParameter = studyAreaId.HasValue ?
                new ObjectParameter("StudyAreaId", studyAreaId) :
                new ObjectParameter("StudyAreaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_StudyArea_Select_Result>("usp_StudyArea_Select", studyAreaIdParameter);
        }
    
        public virtual ObjectResult<usp_BranchByStudyAreaId_Select_Result> usp_BranchByStudyAreaId_Select(Nullable<int> studyAreaId)
        {
            var studyAreaIdParameter = studyAreaId.HasValue ?
                new ObjectParameter("StudyAreaId", studyAreaId) :
                new ObjectParameter("StudyAreaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BranchByStudyAreaId_Select_Result>("usp_BranchByStudyAreaId_Select", studyAreaIdParameter);
        }
    
        public virtual ObjectResult<usp_pivotQueueCobrandGiveType_Select_Result> usp_pivotQueueCobrandGiveType_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerStudyAreaId, Nullable<int> payerBranchId, Nullable<int> areaId)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pivotQueueCobrandGiveType_Select_Result>("usp_pivotQueueCobrandGiveType_Select", appStartCoverDateParameter, payerStudyAreaIdParameter, payerBranchIdParameter, areaIdParameter);
        }
    
        public virtual ObjectResult<usp_pivotSupervisorQueueApproveStatus_Select_Result> usp_pivotSupervisorQueueApproveStatus_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerStudyAreaId, Nullable<int> payerBranchId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail, Nullable<int> areaId)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pivotSupervisorQueueApproveStatus_Select_Result>("usp_pivotSupervisorQueueApproveStatus_Select", appStartCoverDateParameter, payerStudyAreaIdParameter, payerBranchIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter, areaIdParameter);
        }
    
        public virtual ObjectResult<usp_pivotSupervisorQueueStatusV1_Select_Result> usp_pivotSupervisorQueueStatusV1_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerStudyAreaId, Nullable<int> payerBranchId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail, Nullable<int> areaId)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pivotSupervisorQueueStatusV1_Select_Result>("usp_pivotSupervisorQueueStatusV1_Select", appStartCoverDateParameter, payerStudyAreaIdParameter, payerBranchIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter, areaIdParameter);
        }
    
        public virtual ObjectResult<usp_pivotSupervisorQueueStatusV2_Select_Result> usp_pivotSupervisorQueueStatusV2_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerBranchId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pivotSupervisorQueueStatusV2_Select_Result>("usp_pivotSupervisorQueueStatusV2_Select", appStartCoverDateParameter, payerBranchIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_SupervisorQueue_Select_Result> usp_SupervisorQueue_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> branchId, Nullable<int> districtId, Nullable<int> queueStatusId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var queueStatusIdParameter = queueStatusId.HasValue ?
                new ObjectParameter("QueueStatusId", queueStatusId) :
                new ObjectParameter("QueueStatusId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SupervisorQueue_Select_Result>("usp_SupervisorQueue_Select", appStartCoverDateParameter, branchIdParameter, districtIdParameter, queueStatusIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_QueueStatus_Select_Result> usp_QueueStatus_Select(Nullable<int> queueStatusId)
        {
            var queueStatusIdParameter = queueStatusId.HasValue ?
                new ObjectParameter("QueueStatusId", queueStatusId) :
                new ObjectParameter("QueueStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueStatus_Select_Result>("usp_QueueStatus_Select", queueStatusIdParameter);
        }
    
        public virtual ObjectResult<usp_Area_Select_Result> usp_Area_Select(Nullable<int> areaId)
        {
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Area_Select_Result>("usp_Area_Select", areaIdParameter);
        }
    
        public virtual ObjectResult<usp_BranchByAreaId_Select_Result> usp_BranchByAreaId_Select(Nullable<int> areaId)
        {
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BranchByAreaId_Select_Result>("usp_BranchByAreaId_Select", areaIdParameter);
        }
    
        public virtual ObjectResult<usp_AddressByDistrictId_Select_Result> usp_AddressByDistrictId_Select(Nullable<int> districtId)
        {
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AddressByDistrictId_Select_Result>("usp_AddressByDistrictId_Select", districtIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorPoliciesComplete_Select_Result> usp_QueueMotorPoliciesComplete_Select(Nullable<System.DateTime> startCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId, Nullable<int> provinceId, Nullable<int> districtId, string applicationCode, string insuredName, string payerName, string payerOfficeName, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var startCoverDateParameter = startCoverDate.HasValue ?
                new ObjectParameter("StartCoverDate", startCoverDate) :
                new ObjectParameter("StartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var insuredNameParameter = insuredName != null ?
                new ObjectParameter("InsuredName", insuredName) :
                new ObjectParameter("InsuredName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var payerOfficeNameParameter = payerOfficeName != null ?
                new ObjectParameter("PayerOfficeName", payerOfficeName) :
                new ObjectParameter("PayerOfficeName", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorPoliciesComplete_Select_Result>("usp_QueueMotorPoliciesComplete_Select", startCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter, provinceIdParameter, districtIdParameter, applicationCodeParameter, insuredNameParameter, payerNameParameter, payerOfficeNameParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueChairmanReport_Select_Result2> usp_QueueChairmanReport_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueChairmanReport_Select_Result2>("usp_QueueChairmanReport_Select", appStartCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter);
        }
    
        public virtual ObjectResult<usp_SupervisorQueue_Select_Result> usp_QueueUnderwriteComplete_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail1, string searchDetail2, string applicationCode)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetail1Parameter = searchDetail1 != null ?
                new ObjectParameter("SearchDetail1", searchDetail1) :
                new ObjectParameter("SearchDetail1", typeof(string));
    
            var searchDetail2Parameter = searchDetail2 != null ?
                new ObjectParameter("SearchDetail2", searchDetail2) :
                new ObjectParameter("SearchDetail2", typeof(string));
    
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SupervisorQueue_Select_Result>("usp_QueueUnderwriteComplete_Select", appStartCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetail1Parameter, searchDetail2Parameter, applicationCodeParameter);
        }
    
        public virtual ObjectResult<usp_QueueAssignV2_Select_Result> usp_QueueAssignV2_Select(string applicationCode, string insuredName, string payerName, Nullable<int> assignToUserId, Nullable<bool> isAcceptQueue, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var insuredNameParameter = insuredName != null ?
                new ObjectParameter("InsuredName", insuredName) :
                new ObjectParameter("InsuredName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var isAcceptQueueParameter = isAcceptQueue.HasValue ?
                new ObjectParameter("IsAcceptQueue", isAcceptQueue) :
                new ObjectParameter("IsAcceptQueue", typeof(bool));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueAssignV2_Select_Result>("usp_QueueAssignV2_Select", applicationCodeParameter, insuredNameParameter, payerNameParameter, assignToUserIdParameter, isAcceptQueueParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueAccept_Select_Result> usp_QueueAccept_Select(string applicationCode, string insuredName, string payerName, Nullable<int> assignToUserId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var insuredNameParameter = insuredName != null ?
                new ObjectParameter("InsuredName", insuredName) :
                new ObjectParameter("InsuredName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueAccept_Select_Result>("usp_QueueAccept_Select", applicationCodeParameter, insuredNameParameter, payerNameParameter, assignToUserIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueAcceptByQueueId_Update_Result> usp_QueueAcceptByQueueId_Update(Nullable<int> queueId, Nullable<int> accepteByUserId)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var accepteByUserIdParameter = accepteByUserId.HasValue ?
                new ObjectParameter("AccepteByUserId", accepteByUserId) :
                new ObjectParameter("AccepteByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueAcceptByQueueId_Update_Result>("usp_QueueAcceptByQueueId_Update", queueIdParameter, accepteByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueListAssignV2_Update_Result> usp_QueueListAssignV2_Update(string queueIdList, Nullable<int> assignToUserId, Nullable<int> updateByUserId)
        {
            var queueIdListParameter = queueIdList != null ?
                new ObjectParameter("QueueIdList", queueIdList) :
                new ObjectParameter("QueueIdList", typeof(string));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var updateByUserIdParameter = updateByUserId.HasValue ?
                new ObjectParameter("UpdateByUserId", updateByUserId) :
                new ObjectParameter("UpdateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueListAssignV2_Update_Result>("usp_QueueListAssignV2_Update", queueIdListParameter, assignToUserIdParameter, updateByUserIdParameter);
        }
    
        public virtual ObjectResult<Xusp_QueueAcceptByQueueId_Update_Result> Xusp_QueueAcceptByQueueId_Update(Nullable<int> queueId, Nullable<int> accepteByUserId)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var accepteByUserIdParameter = accepteByUserId.HasValue ?
                new ObjectParameter("AccepteByUserId", accepteByUserId) :
                new ObjectParameter("AccepteByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Xusp_QueueAcceptByQueueId_Update_Result>("Xusp_QueueAcceptByQueueId_Update", queueIdParameter, accepteByUserIdParameter);
        }
    
        public virtual ObjectResult<Xusp_QueueAssignByQueueId_Update_Result> Xusp_QueueAssignByQueueId_Update(Nullable<int> queueId, string queueIdList, Nullable<int> assignToUserId, Nullable<int> updatedByUserId)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var queueIdListParameter = queueIdList != null ?
                new ObjectParameter("QueueIdList", queueIdList) :
                new ObjectParameter("QueueIdList", typeof(string));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Xusp_QueueAssignByQueueId_Update_Result>("Xusp_QueueAssignByQueueId_Update", queueIdParameter, queueIdListParameter, assignToUserIdParameter, updatedByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueListAccept_Update_Result> usp_QueueListAccept_Update(string queueIdList, Nullable<int> assignToUserId, Nullable<int> updateByUserId)
        {
            var queueIdListParameter = queueIdList != null ?
                new ObjectParameter("QueueIdList", queueIdList) :
                new ObjectParameter("QueueIdList", typeof(string));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var updateByUserIdParameter = updateByUserId.HasValue ?
                new ObjectParameter("UpdateByUserId", updateByUserId) :
                new ObjectParameter("UpdateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueListAccept_Update_Result>("usp_QueueListAccept_Update", queueIdListParameter, assignToUserIdParameter, updateByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueApprovePendingByBusinessPromoteTeamUserIdV2_Select_Result> usp_QueueApprovePendingByBusinessPromoteTeamUserIdV2_Select(Nullable<int> businessPromoteTeamUserId, string searchDetail1, string searchDetail2, string searchDetail3, string searchDetail4, Nullable<int> assignToUserId, Nullable<int> payerBranchId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var businessPromoteTeamUserIdParameter = businessPromoteTeamUserId.HasValue ?
                new ObjectParameter("BusinessPromoteTeamUserId", businessPromoteTeamUserId) :
                new ObjectParameter("BusinessPromoteTeamUserId", typeof(int));
    
            var searchDetail1Parameter = searchDetail1 != null ?
                new ObjectParameter("SearchDetail1", searchDetail1) :
                new ObjectParameter("SearchDetail1", typeof(string));
    
            var searchDetail2Parameter = searchDetail2 != null ?
                new ObjectParameter("SearchDetail2", searchDetail2) :
                new ObjectParameter("SearchDetail2", typeof(string));
    
            var searchDetail3Parameter = searchDetail3 != null ?
                new ObjectParameter("SearchDetail3", searchDetail3) :
                new ObjectParameter("SearchDetail3", typeof(string));
    
            var searchDetail4Parameter = searchDetail4 != null ?
                new ObjectParameter("SearchDetail4", searchDetail4) :
                new ObjectParameter("SearchDetail4", typeof(string));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueApprovePendingByBusinessPromoteTeamUserIdV2_Select_Result>("usp_QueueApprovePendingByBusinessPromoteTeamUserIdV2_Select", businessPromoteTeamUserIdParameter, searchDetail1Parameter, searchDetail2Parameter, searchDetail3Parameter, searchDetail4Parameter, assignToUserIdParameter, payerBranchIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueEdit_Select_Result> usp_QueueEdit_Select(string searchDetail1, string searchDetail2, string searchDetail3, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var searchDetail1Parameter = searchDetail1 != null ?
                new ObjectParameter("SearchDetail1", searchDetail1) :
                new ObjectParameter("SearchDetail1", typeof(string));
    
            var searchDetail2Parameter = searchDetail2 != null ?
                new ObjectParameter("SearchDetail2", searchDetail2) :
                new ObjectParameter("SearchDetail2", typeof(string));
    
            var searchDetail3Parameter = searchDetail3 != null ?
                new ObjectParameter("SearchDetail3", searchDetail3) :
                new ObjectParameter("SearchDetail3", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueEdit_Select_Result>("usp_QueueEdit_Select", searchDetail1Parameter, searchDetail2Parameter, searchDetail3Parameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_pivotQueueFollowup_Select_Result> usp_pivotQueueFollowup_Select(Nullable<int> payerBranchId, Nullable<System.DateTime> appStartCoverDate, string searchText, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pivotQueueFollowup_Select_Result>("usp_pivotQueueFollowup_Select", payerBranchIdParameter, appStartCoverDateParameter, searchTextParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueUnderwriteCancelBeforeDCR_Select_Result> usp_QueueUnderwriteCancelBeforeDCR_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail1, string searchDetail2, string applicationCode)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetail1Parameter = searchDetail1 != null ?
                new ObjectParameter("SearchDetail1", searchDetail1) :
                new ObjectParameter("SearchDetail1", typeof(string));
    
            var searchDetail2Parameter = searchDetail2 != null ?
                new ObjectParameter("SearchDetail2", searchDetail2) :
                new ObjectParameter("SearchDetail2", typeof(string));
    
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueUnderwriteCancelBeforeDCR_Select_Result>("usp_QueueUnderwriteCancelBeforeDCR_Select", appStartCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetail1Parameter, searchDetail2Parameter, applicationCodeParameter);
        }
    
        public virtual ObjectResult<usp_QueueCoBrandCompleteReport_Select_Result2> usp_QueueCoBrandCompleteReport_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId, string searchDetail, Nullable<int> provinceId, Nullable<int> districtId, string searchDetail1, string searchDetail2, string applicationCode)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var searchDetail1Parameter = searchDetail1 != null ?
                new ObjectParameter("SearchDetail1", searchDetail1) :
                new ObjectParameter("SearchDetail1", typeof(string));
    
            var searchDetail2Parameter = searchDetail2 != null ?
                new ObjectParameter("SearchDetail2", searchDetail2) :
                new ObjectParameter("SearchDetail2", typeof(string));
    
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCoBrandCompleteReport_Select_Result2>("usp_QueueCoBrandCompleteReport_Select", appStartCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter, searchDetailParameter, provinceIdParameter, districtIdParameter, searchDetail1Parameter, searchDetail2Parameter, applicationCodeParameter);
        }
    
        public virtual ObjectResult<usp_QueueCoBrandPendingReport_Select_Result2> usp_QueueCoBrandPendingReport_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId, string searchDetail, Nullable<int> provinceId, Nullable<int> districtId, string searchDetail1, string searchDetail2, string applicationCode)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var searchDetail1Parameter = searchDetail1 != null ?
                new ObjectParameter("SearchDetail1", searchDetail1) :
                new ObjectParameter("SearchDetail1", typeof(string));
    
            var searchDetail2Parameter = searchDetail2 != null ?
                new ObjectParameter("SearchDetail2", searchDetail2) :
                new ObjectParameter("SearchDetail2", typeof(string));
    
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCoBrandPendingReport_Select_Result2>("usp_QueueCoBrandPendingReport_Select", appStartCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter, searchDetailParameter, provinceIdParameter, districtIdParameter, searchDetail1Parameter, searchDetail2Parameter, applicationCodeParameter);
        }
    
        public virtual ObjectResult<usp_QueueDirectorReport_Select_Result3> usp_QueueDirectorReport_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueDirectorReport_Select_Result3>("usp_QueueDirectorReport_Select", appStartCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueBusinessPromoteTeamReport_Select_Result6> usp_QueueBusinessPromoteTeamReport_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueBusinessPromoteTeamReport_Select_Result6>("usp_QueueBusinessPromoteTeamReport_Select", appStartCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueUnderwritePending_Select_Result2> usp_QueueUnderwritePending_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail1, string searchDetail2, string applicationCode)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetail1Parameter = searchDetail1 != null ?
                new ObjectParameter("SearchDetail1", searchDetail1) :
                new ObjectParameter("SearchDetail1", typeof(string));
    
            var searchDetail2Parameter = searchDetail2 != null ?
                new ObjectParameter("SearchDetail2", searchDetail2) :
                new ObjectParameter("SearchDetail2", typeof(string));
    
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueUnderwritePending_Select_Result2>("usp_QueueUnderwritePending_Select", appStartCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetail1Parameter, searchDetail2Parameter, applicationCodeParameter);
        }
    
        public virtual ObjectResult<usp_QueueResultByQueueIdV2_Insert_Result> usp_QueueResultByQueueIdV2_Insert(Nullable<int> queueId, Nullable<bool> isUnderwriteCust, Nullable<bool> isUnderwritePayer, Nullable<bool> isBeware, string bewareRemark, string remark, string coBrandNo, string uRLPath, string physicalPath, string fileName, Nullable<bool> isLineOA, string giveRemark, Nullable<int> createdByUserId)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var isUnderwriteCustParameter = isUnderwriteCust.HasValue ?
                new ObjectParameter("IsUnderwriteCust", isUnderwriteCust) :
                new ObjectParameter("IsUnderwriteCust", typeof(bool));
    
            var isUnderwritePayerParameter = isUnderwritePayer.HasValue ?
                new ObjectParameter("IsUnderwritePayer", isUnderwritePayer) :
                new ObjectParameter("IsUnderwritePayer", typeof(bool));
    
            var isBewareParameter = isBeware.HasValue ?
                new ObjectParameter("IsBeware", isBeware) :
                new ObjectParameter("IsBeware", typeof(bool));
    
            var bewareRemarkParameter = bewareRemark != null ?
                new ObjectParameter("BewareRemark", bewareRemark) :
                new ObjectParameter("BewareRemark", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var coBrandNoParameter = coBrandNo != null ?
                new ObjectParameter("CoBrandNo", coBrandNo) :
                new ObjectParameter("CoBrandNo", typeof(string));
    
            var uRLPathParameter = uRLPath != null ?
                new ObjectParameter("URLPath", uRLPath) :
                new ObjectParameter("URLPath", typeof(string));
    
            var physicalPathParameter = physicalPath != null ?
                new ObjectParameter("PhysicalPath", physicalPath) :
                new ObjectParameter("PhysicalPath", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var isLineOAParameter = isLineOA.HasValue ?
                new ObjectParameter("IsLineOA", isLineOA) :
                new ObjectParameter("IsLineOA", typeof(bool));
    
            var giveRemarkParameter = giveRemark != null ?
                new ObjectParameter("GiveRemark", giveRemark) :
                new ObjectParameter("GiveRemark", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueResultByQueueIdV2_Insert_Result>("usp_QueueResultByQueueIdV2_Insert", queueIdParameter, isUnderwriteCustParameter, isUnderwritePayerParameter, isBewareParameter, bewareRemarkParameter, remarkParameter, coBrandNoParameter, uRLPathParameter, physicalPathParameter, fileNameParameter, isLineOAParameter, giveRemarkParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueCoBrandPendingV2_Select_Result> usp_QueueCoBrandPendingV2_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail, Nullable<int> provinceId, Nullable<int> districtId, string searchDetail1, string searchDetail2, string applicationCode)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var searchDetail1Parameter = searchDetail1 != null ?
                new ObjectParameter("SearchDetail1", searchDetail1) :
                new ObjectParameter("SearchDetail1", typeof(string));
    
            var searchDetail2Parameter = searchDetail2 != null ?
                new ObjectParameter("SearchDetail2", searchDetail2) :
                new ObjectParameter("SearchDetail2", typeof(string));
    
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCoBrandPendingV2_Select_Result>("usp_QueueCoBrandPendingV2_Select", appStartCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter, provinceIdParameter, districtIdParameter, searchDetail1Parameter, searchDetail2Parameter, applicationCodeParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIDirectorReportV2_Select_Result> usp_QueueCIDirectorReportV2_Select(Nullable<System.DateTime> startCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId)
        {
            var startCoverDateParameter = startCoverDate.HasValue ?
                new ObjectParameter("StartCoverDate", startCoverDate) :
                new ObjectParameter("StartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIDirectorReportV2_Select_Result>("usp_QueueCIDirectorReportV2_Select", startCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueCoBrandPendingBusinessPromoteTeamReport_Select_Result3> usp_QueueCoBrandPendingBusinessPromoteTeamReport_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCoBrandPendingBusinessPromoteTeamReport_Select_Result3>("usp_QueueCoBrandPendingBusinessPromoteTeamReport_Select");
        }
    
        public virtual ObjectResult<usp_QueueDirectorReportV2_Select_Result> usp_QueueDirectorReportV2_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueDirectorReportV2_Select_Result>("usp_QueueDirectorReportV2_Select", appStartCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueCoBrandPendingBusinessPromoteTeamReportV3_Select_Result> usp_QueueCoBrandPendingBusinessPromoteTeamReportV3_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCoBrandPendingBusinessPromoteTeamReportV3_Select_Result>("usp_QueueCoBrandPendingBusinessPromoteTeamReportV3_Select");
        }
    
        public virtual ObjectResult<usp_QueueManualAssignReport_Select_Result> usp_QueueManualAssignReport_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueManualAssignReport_Select_Result>("usp_QueueManualAssignReport_Select", appStartCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter);
        }
    
        public virtual ObjectResult<usp_CountIndexPagePH_Select_Result> usp_CountIndexPagePH_Select(Nullable<int> assignToUserId, Nullable<System.DateTime> appStartCoverDate)
        {
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CountIndexPagePH_Select_Result>("usp_CountIndexPagePH_Select", assignToUserIdParameter, appStartCoverDateParameter);
        }
    
        public virtual ObjectResult<usp_QueueCoBrandPendingBusinessPromoteTeamReportV4_Select_Result> usp_QueueCoBrandPendingBusinessPromoteTeamReportV4_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCoBrandPendingBusinessPromoteTeamReportV4_Select_Result>("usp_QueueCoBrandPendingBusinessPromoteTeamReportV4_Select");
        }
    
        public virtual ObjectResult<usp_QueueBusinessPromoteTeamReportV2_Select_Result> usp_QueueBusinessPromoteTeamReportV2_Select(Nullable<System.DateTime> appStartCoverDate, Nullable<int> payerBranchId, Nullable<int> payerDistrictId, Nullable<int> payerStudyAreaId, Nullable<int> assignToUserId)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var payerBranchIdParameter = payerBranchId.HasValue ?
                new ObjectParameter("PayerBranchId", payerBranchId) :
                new ObjectParameter("PayerBranchId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerStudyAreaIdParameter = payerStudyAreaId.HasValue ?
                new ObjectParameter("PayerStudyAreaId", payerStudyAreaId) :
                new ObjectParameter("PayerStudyAreaId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueBusinessPromoteTeamReportV2_Select_Result>("usp_QueueBusinessPromoteTeamReportV2_Select", appStartCoverDateParameter, payerBranchIdParameter, payerDistrictIdParameter, payerStudyAreaIdParameter, assignToUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueAdminAssign_Select_Result> usp_QueueAdminAssign_Select(Nullable<System.DateTime> appStartCoverDate, string applicationCode, string cutomerName, string payerName, Nullable<int> payerSubDistrictId, Nullable<int> payerDistrictId, Nullable<int> payerProvinceId, Nullable<int> assignToUserId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var cutomerNameParameter = cutomerName != null ?
                new ObjectParameter("CutomerName", cutomerName) :
                new ObjectParameter("CutomerName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var payerSubDistrictIdParameter = payerSubDistrictId.HasValue ?
                new ObjectParameter("PayerSubDistrictId", payerSubDistrictId) :
                new ObjectParameter("PayerSubDistrictId", typeof(int));
    
            var payerDistrictIdParameter = payerDistrictId.HasValue ?
                new ObjectParameter("PayerDistrictId", payerDistrictId) :
                new ObjectParameter("PayerDistrictId", typeof(int));
    
            var payerProvinceIdParameter = payerProvinceId.HasValue ?
                new ObjectParameter("PayerProvinceId", payerProvinceId) :
                new ObjectParameter("PayerProvinceId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueAdminAssign_Select_Result>("usp_QueueAdminAssign_Select", appStartCoverDateParameter, applicationCodeParameter, cutomerNameParameter, payerNameParameter, payerSubDistrictIdParameter, payerDistrictIdParameter, payerProvinceIdParameter, assignToUserIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_SubDistrictByDistrictId_Select_Result> usp_SubDistrictByDistrictId_Select(Nullable<int> districtId)
        {
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SubDistrictByDistrictId_Select_Result>("usp_SubDistrictByDistrictId_Select", districtIdParameter);
        }
    }
}
