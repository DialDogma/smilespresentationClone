//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmileSUnderwriteAudit.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class UnderwriteMotorAuditEntity : DbContext
    {
        public UnderwriteMotorAuditEntity()
            : base("name=UnderwriteMotorAuditEntity")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<usp_QueueMotorAuditLot_Insert_Result> usp_QueueMotorAuditLot_Insert(Nullable<System.DateTime> period, Nullable<int> createdByUserId)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditLot_Insert_Result>("usp_QueueMotorAuditLot_Insert", periodParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditLot_Select_Result> usp_QueueMotorAuditLot_Select(Nullable<System.DateTime> period, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditLot_Select_Result>("usp_QueueMotorAuditLot_Select", periodParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAudit_Select_Result> usp_QueueMotorAudit_Select(string applicationCode, string insuredName, string payerName, Nullable<System.DateTime> period, Nullable<int> areaManagerAuditUserId, string queueStatusIdList, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var insuredNameParameter = insuredName != null ?
                new ObjectParameter("InsuredName", insuredName) :
                new ObjectParameter("InsuredName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var areaManagerAuditUserIdParameter = areaManagerAuditUserId.HasValue ?
                new ObjectParameter("AreaManagerAuditUserId", areaManagerAuditUserId) :
                new ObjectParameter("AreaManagerAuditUserId", typeof(int));
    
            var queueStatusIdListParameter = queueStatusIdList != null ?
                new ObjectParameter("QueueStatusIdList", queueStatusIdList) :
                new ObjectParameter("QueueStatusIdList", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAudit_Select_Result>("usp_QueueMotorAudit_Select", applicationCodeParameter, insuredNameParameter, payerNameParameter, periodParameter, areaManagerAuditUserIdParameter, queueStatusIdListParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorStatusALL_Update_Result> usp_QueueMotorStatusALL_Update(string applicationCode, string insuredName, string payerName, Nullable<System.DateTime> period, Nullable<int> areaManagerAuditUserId, string queueStatusIdList, Nullable<int> createdByUserId)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var insuredNameParameter = insuredName != null ?
                new ObjectParameter("InsuredName", insuredName) :
                new ObjectParameter("InsuredName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var areaManagerAuditUserIdParameter = areaManagerAuditUserId.HasValue ?
                new ObjectParameter("AreaManagerAuditUserId", areaManagerAuditUserId) :
                new ObjectParameter("AreaManagerAuditUserId", typeof(int));
    
            var queueStatusIdListParameter = queueStatusIdList != null ?
                new ObjectParameter("QueueStatusIdList", queueStatusIdList) :
                new ObjectParameter("QueueStatusIdList", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorStatusALL_Update_Result>("usp_QueueMotorStatusALL_Update", applicationCodeParameter, insuredNameParameter, payerNameParameter, periodParameter, areaManagerAuditUserIdParameter, queueStatusIdListParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorStatusByQueueAuditId_Update_Result> usp_QueueMotorStatusByQueueAuditId_Update(Nullable<int> queueAuditId, Nullable<int> createdByUserId)
        {
            var queueAuditIdParameter = queueAuditId.HasValue ?
                new ObjectParameter("QueueAuditId", queueAuditId) :
                new ObjectParameter("QueueAuditId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorStatusByQueueAuditId_Update_Result>("usp_QueueMotorStatusByQueueAuditId_Update", queueAuditIdParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_AuditMotorPaymentStatus_Select_Result> usp_AuditMotorPaymentStatus_Select(Nullable<int> auditPaymentStatusId)
        {
            var auditPaymentStatusIdParameter = auditPaymentStatusId.HasValue ?
                new ObjectParameter("AuditPaymentStatusId", auditPaymentStatusId) :
                new ObjectParameter("AuditPaymentStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AuditMotorPaymentStatus_Select_Result>("usp_AuditMotorPaymentStatus_Select", auditPaymentStatusIdParameter);
        }
    
        public virtual ObjectResult<usp_AuditMotorPoliciesGivenStatus_Select_Result> usp_AuditMotorPoliciesGivenStatus_Select(Nullable<int> auditPoliciesGivenStatusId)
        {
            var auditPoliciesGivenStatusIdParameter = auditPoliciesGivenStatusId.HasValue ?
                new ObjectParameter("AuditPoliciesGivenStatusId", auditPoliciesGivenStatusId) :
                new ObjectParameter("AuditPoliciesGivenStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AuditMotorPoliciesGivenStatus_Select_Result>("usp_AuditMotorPoliciesGivenStatus_Select", auditPoliciesGivenStatusIdParameter);
        }
    
        public virtual ObjectResult<usp_AuditMotorSpecifyStatus_Select_Result> usp_AuditMotorSpecifyStatus_Select(Nullable<int> auditMotorSpecifyStatusId)
        {
            var auditMotorSpecifyStatusIdParameter = auditMotorSpecifyStatusId.HasValue ?
                new ObjectParameter("AuditMotorSpecifyStatusId", auditMotorSpecifyStatusId) :
                new ObjectParameter("AuditMotorSpecifyStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AuditMotorSpecifyStatus_Select_Result>("usp_AuditMotorSpecifyStatus_Select", auditMotorSpecifyStatusIdParameter);
        }
    
        public virtual ObjectResult<usp_AuditMotorUnderwriteStatus_Select_Result> usp_AuditMotorUnderwriteStatus_Select(Nullable<int> auditUnderwriteStatusId)
        {
            var auditUnderwriteStatusIdParameter = auditUnderwriteStatusId.HasValue ?
                new ObjectParameter("AuditUnderwriteStatusId", auditUnderwriteStatusId) :
                new ObjectParameter("AuditUnderwriteStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AuditMotorUnderwriteStatus_Select_Result>("usp_AuditMotorUnderwriteStatus_Select", auditUnderwriteStatusIdParameter);
        }
    
        public virtual ObjectResult<usp_CallStatusMotor_Select_Result> usp_CallStatusMotor_Select(Nullable<int> callStatusId)
        {
            var callStatusIdParameter = callStatusId.HasValue ?
                new ObjectParameter("CallStatusId", callStatusId) :
                new ObjectParameter("CallStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CallStatusMotor_Select_Result>("usp_CallStatusMotor_Select", callStatusIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAudit1Result_Insert_Result> usp_QueueMotorAudit1Result_Insert(Nullable<int> queueAuditId, Nullable<int> queueAuditStatusId, Nullable<int> callStatusId, Nullable<int> auditUnderwriteStatusId, Nullable<int> auditPoliciesGivenStatusId, string auditRemark, Nullable<int> auditPaymentStatusId, string auditPaymentRemark, Nullable<int> auditMotorStatusId, Nullable<int> auditMotorSpecifyStatusId, string auditMotorRemark, Nullable<int> audit1CreatedByUserId)
        {
            var queueAuditIdParameter = queueAuditId.HasValue ?
                new ObjectParameter("QueueAuditId", queueAuditId) :
                new ObjectParameter("QueueAuditId", typeof(int));
    
            var queueAuditStatusIdParameter = queueAuditStatusId.HasValue ?
                new ObjectParameter("QueueAuditStatusId", queueAuditStatusId) :
                new ObjectParameter("QueueAuditStatusId", typeof(int));
    
            var callStatusIdParameter = callStatusId.HasValue ?
                new ObjectParameter("CallStatusId", callStatusId) :
                new ObjectParameter("CallStatusId", typeof(int));
    
            var auditUnderwriteStatusIdParameter = auditUnderwriteStatusId.HasValue ?
                new ObjectParameter("AuditUnderwriteStatusId", auditUnderwriteStatusId) :
                new ObjectParameter("AuditUnderwriteStatusId", typeof(int));
    
            var auditPoliciesGivenStatusIdParameter = auditPoliciesGivenStatusId.HasValue ?
                new ObjectParameter("AuditPoliciesGivenStatusId", auditPoliciesGivenStatusId) :
                new ObjectParameter("AuditPoliciesGivenStatusId", typeof(int));
    
            var auditRemarkParameter = auditRemark != null ?
                new ObjectParameter("AuditRemark", auditRemark) :
                new ObjectParameter("AuditRemark", typeof(string));
    
            var auditPaymentStatusIdParameter = auditPaymentStatusId.HasValue ?
                new ObjectParameter("AuditPaymentStatusId", auditPaymentStatusId) :
                new ObjectParameter("AuditPaymentStatusId", typeof(int));
    
            var auditPaymentRemarkParameter = auditPaymentRemark != null ?
                new ObjectParameter("AuditPaymentRemark", auditPaymentRemark) :
                new ObjectParameter("AuditPaymentRemark", typeof(string));
    
            var auditMotorStatusIdParameter = auditMotorStatusId.HasValue ?
                new ObjectParameter("AuditMotorStatusId", auditMotorStatusId) :
                new ObjectParameter("AuditMotorStatusId", typeof(int));
    
            var auditMotorSpecifyStatusIdParameter = auditMotorSpecifyStatusId.HasValue ?
                new ObjectParameter("AuditMotorSpecifyStatusId", auditMotorSpecifyStatusId) :
                new ObjectParameter("AuditMotorSpecifyStatusId", typeof(int));
    
            var auditMotorRemarkParameter = auditMotorRemark != null ?
                new ObjectParameter("AuditMotorRemark", auditMotorRemark) :
                new ObjectParameter("AuditMotorRemark", typeof(string));
    
            var audit1CreatedByUserIdParameter = audit1CreatedByUserId.HasValue ?
                new ObjectParameter("Audit1CreatedByUserId", audit1CreatedByUserId) :
                new ObjectParameter("Audit1CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAudit1Result_Insert_Result>("usp_QueueMotorAudit1Result_Insert", queueAuditIdParameter, queueAuditStatusIdParameter, callStatusIdParameter, auditUnderwriteStatusIdParameter, auditPoliciesGivenStatusIdParameter, auditRemarkParameter, auditPaymentStatusIdParameter, auditPaymentRemarkParameter, auditMotorStatusIdParameter, auditMotorSpecifyStatusIdParameter, auditMotorRemarkParameter, audit1CreatedByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditStatus_Select_Result> usp_QueueMotorAuditStatus_Select(Nullable<int> queueAuditStatusId)
        {
            var queueAuditStatusIdParameter = queueAuditStatusId.HasValue ?
                new ObjectParameter("QueueAuditStatusId", queueAuditStatusId) :
                new ObjectParameter("QueueAuditStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditStatus_Select_Result>("usp_QueueMotorAuditStatus_Select", queueAuditStatusIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditFullDetailByQueueAuditId_Select_Result> usp_QueueMotorAuditFullDetailByQueueAuditId_Select(Nullable<int> queueAuditId)
        {
            var queueAuditIdParameter = queueAuditId.HasValue ?
                new ObjectParameter("QueueAuditId", queueAuditId) :
                new ObjectParameter("QueueAuditId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditFullDetailByQueueAuditId_Select_Result>("usp_QueueMotorAuditFullDetailByQueueAuditId_Select", queueAuditIdParameter);
        }
    
        public virtual ObjectResult<usp_AuditMotorInsureConsiderStatus_Select_Result> usp_AuditMotorInsureConsiderStatus_Select(Nullable<int> auditInsureConsiderStatusId)
        {
            var auditInsureConsiderStatusIdParameter = auditInsureConsiderStatusId.HasValue ?
                new ObjectParameter("AuditInsureConsiderStatusId", auditInsureConsiderStatusId) :
                new ObjectParameter("AuditInsureConsiderStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AuditMotorInsureConsiderStatus_Select_Result>("usp_AuditMotorInsureConsiderStatus_Select", auditInsureConsiderStatusIdParameter);
        }
    
        public virtual ObjectResult<usp_AuditMotorInsureStatus_Select_Result> usp_AuditMotorInsureStatus_Select(Nullable<int> auditInsureStatusId)
        {
            var auditInsureStatusIdParameter = auditInsureStatusId.HasValue ?
                new ObjectParameter("AuditInsureStatusId", auditInsureStatusId) :
                new ObjectParameter("AuditInsureStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AuditMotorInsureStatus_Select_Result>("usp_AuditMotorInsureStatus_Select", auditInsureStatusIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditAssign_Select_Result> usp_QueueMotorAuditAssign_Select(Nullable<int> areaId, Nullable<int> branchId, string applicationCode, Nullable<int> queueAuditStatusId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var queueAuditStatusIdParameter = queueAuditStatusId.HasValue ?
                new ObjectParameter("QueueAuditStatusId", queueAuditStatusId) :
                new ObjectParameter("QueueAuditStatusId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditAssign_Select_Result>("usp_QueueMotorAuditAssign_Select", areaIdParameter, branchIdParameter, applicationCodeParameter, queueAuditStatusIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditListAssign_Update_Result> usp_QueueMotorAuditListAssign_Update(string queueAuditIdList, Nullable<int> toAreaManagerUserId, Nullable<int> createdByUserId)
        {
            var queueAuditIdListParameter = queueAuditIdList != null ?
                new ObjectParameter("QueueAuditIdList", queueAuditIdList) :
                new ObjectParameter("QueueAuditIdList", typeof(string));
    
            var toAreaManagerUserIdParameter = toAreaManagerUserId.HasValue ?
                new ObjectParameter("ToAreaManagerUserId", toAreaManagerUserId) :
                new ObjectParameter("ToAreaManagerUserId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditListAssign_Update_Result>("usp_QueueMotorAuditListAssign_Update", queueAuditIdListParameter, toAreaManagerUserIdParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_Area_Select_Result> usp_Area_Select(Nullable<int> areaId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Area_Select_Result>("usp_Area_Select", areaIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_AreaManager_Select_Result> usp_AreaManager_Select(Nullable<int> areaId, Nullable<int> userId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AreaManager_Select_Result>("usp_AreaManager_Select", areaIdParameter, userIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_BranchByAreaId_Select_Result> usp_BranchByAreaId_Select(Nullable<int> areaId)
        {
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BranchByAreaId_Select_Result>("usp_BranchByAreaId_Select", areaIdParameter);
        }
    
        public virtual ObjectResult<usp_AuditMotorStatus_Select_Result> usp_AuditMotorStatus_Select(Nullable<int> auditMotorStatusId)
        {
            var auditMotorStatusIdParameter = auditMotorStatusId.HasValue ?
                new ObjectParameter("AuditMotorStatusId", auditMotorStatusId) :
                new ObjectParameter("AuditMotorStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AuditMotorStatus_Select_Result>("usp_AuditMotorStatus_Select", auditMotorStatusIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAudit2Result_Insert_Result> usp_QueueMotorAudit2Result_Insert(Nullable<int> queueAuditId, Nullable<int> auditInsureStatusId, string auditInsureRemark, Nullable<int> auditInsureConsiderStatusId, string auditInsureConsiderRemark, Nullable<int> audit2CreatedByUserId)
        {
            var queueAuditIdParameter = queueAuditId.HasValue ?
                new ObjectParameter("QueueAuditId", queueAuditId) :
                new ObjectParameter("QueueAuditId", typeof(int));
    
            var auditInsureStatusIdParameter = auditInsureStatusId.HasValue ?
                new ObjectParameter("AuditInsureStatusId", auditInsureStatusId) :
                new ObjectParameter("AuditInsureStatusId", typeof(int));
    
            var auditInsureRemarkParameter = auditInsureRemark != null ?
                new ObjectParameter("AuditInsureRemark", auditInsureRemark) :
                new ObjectParameter("AuditInsureRemark", typeof(string));
    
            var auditInsureConsiderStatusIdParameter = auditInsureConsiderStatusId.HasValue ?
                new ObjectParameter("AuditInsureConsiderStatusId", auditInsureConsiderStatusId) :
                new ObjectParameter("AuditInsureConsiderStatusId", typeof(int));
    
            var auditInsureConsiderRemarkParameter = auditInsureConsiderRemark != null ?
                new ObjectParameter("AuditInsureConsiderRemark", auditInsureConsiderRemark) :
                new ObjectParameter("AuditInsureConsiderRemark", typeof(string));
    
            var audit2CreatedByUserIdParameter = audit2CreatedByUserId.HasValue ?
                new ObjectParameter("Audit2CreatedByUserId", audit2CreatedByUserId) :
                new ObjectParameter("Audit2CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAudit2Result_Insert_Result>("usp_QueueMotorAudit2Result_Insert", queueAuditIdParameter, auditInsureStatusIdParameter, auditInsureRemarkParameter, auditInsureConsiderStatusIdParameter, auditInsureConsiderRemarkParameter, audit2CreatedByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditLogByQueueAuditId_Select_Result> usp_QueueMotorAuditLogByQueueAuditId_Select(Nullable<int> queueAuditId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var queueAuditIdParameter = queueAuditId.HasValue ?
                new ObjectParameter("QueueAuditId", queueAuditId) :
                new ObjectParameter("QueueAuditId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditLogByQueueAuditId_Select_Result>("usp_QueueMotorAuditLogByQueueAuditId_Select", queueAuditIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditInsure_Select_Result2> usp_QueueMotorAuditInsure_Select(string applicationCode, string insuredName, string payerName, Nullable<System.DateTime> period, Nullable<int> auditMotorStatusId, Nullable<int> auditInsureStatusId, string auditInsureConsiderStatusIdList, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var insuredNameParameter = insuredName != null ?
                new ObjectParameter("InsuredName", insuredName) :
                new ObjectParameter("InsuredName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var auditMotorStatusIdParameter = auditMotorStatusId.HasValue ?
                new ObjectParameter("AuditMotorStatusId", auditMotorStatusId) :
                new ObjectParameter("AuditMotorStatusId", typeof(int));
    
            var auditInsureStatusIdParameter = auditInsureStatusId.HasValue ?
                new ObjectParameter("AuditInsureStatusId", auditInsureStatusId) :
                new ObjectParameter("AuditInsureStatusId", typeof(int));
    
            var auditInsureConsiderStatusIdListParameter = auditInsureConsiderStatusIdList != null ?
                new ObjectParameter("AuditInsureConsiderStatusIdList", auditInsureConsiderStatusIdList) :
                new ObjectParameter("AuditInsureConsiderStatusIdList", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditInsure_Select_Result2>("usp_QueueMotorAuditInsure_Select", applicationCodeParameter, insuredNameParameter, payerNameParameter, periodParameter, auditMotorStatusIdParameter, auditInsureStatusIdParameter, auditInsureConsiderStatusIdListParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditInsureClose_Select_Result> usp_QueueMotorAuditInsureClose_Select(string applicationCode, string insuredName, string payerName, Nullable<System.DateTime> period, Nullable<int> branchId, Nullable<int> auditMotorStatusId, Nullable<int> auditInsureStatusId, string auditInsureConsiderStatusIdList, Nullable<bool> insureClose, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var insuredNameParameter = insuredName != null ?
                new ObjectParameter("InsuredName", insuredName) :
                new ObjectParameter("InsuredName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var auditMotorStatusIdParameter = auditMotorStatusId.HasValue ?
                new ObjectParameter("AuditMotorStatusId", auditMotorStatusId) :
                new ObjectParameter("AuditMotorStatusId", typeof(int));
    
            var auditInsureStatusIdParameter = auditInsureStatusId.HasValue ?
                new ObjectParameter("AuditInsureStatusId", auditInsureStatusId) :
                new ObjectParameter("AuditInsureStatusId", typeof(int));
    
            var auditInsureConsiderStatusIdListParameter = auditInsureConsiderStatusIdList != null ?
                new ObjectParameter("AuditInsureConsiderStatusIdList", auditInsureConsiderStatusIdList) :
                new ObjectParameter("AuditInsureConsiderStatusIdList", typeof(string));
    
            var insureCloseParameter = insureClose.HasValue ?
                new ObjectParameter("InsureClose", insureClose) :
                new ObjectParameter("InsureClose", typeof(bool));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditInsureClose_Select_Result>("usp_QueueMotorAuditInsureClose_Select", applicationCodeParameter, insuredNameParameter, payerNameParameter, periodParameter, branchIdParameter, auditMotorStatusIdParameter, auditInsureStatusIdParameter, auditInsureConsiderStatusIdListParameter, insureCloseParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditInsureCloseALL_Update_Result> usp_QueueMotorAuditInsureCloseALL_Update(string queueAuditIdList, Nullable<int> createdByUserId)
        {
            var queueAuditIdListParameter = queueAuditIdList != null ?
                new ObjectParameter("QueueAuditIdList", queueAuditIdList) :
                new ObjectParameter("QueueAuditIdList", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditInsureCloseALL_Update_Result>("usp_QueueMotorAuditInsureCloseALL_Update", queueAuditIdListParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditInsureCloseByQueueAuditId_Update_Result> usp_QueueMotorAuditInsureCloseByQueueAuditId_Update(Nullable<int> queueAuditId, Nullable<int> createdByUserId)
        {
            var queueAuditIdParameter = queueAuditId.HasValue ?
                new ObjectParameter("QueueAuditId", queueAuditId) :
                new ObjectParameter("QueueAuditId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditInsureCloseByQueueAuditId_Update_Result>("usp_QueueMotorAuditInsureCloseByQueueAuditId_Update", queueAuditIdParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditChairmanClose_Select_Result> usp_QueueMotorAuditChairmanClose_Select(string applicationCode, string insuredName, string payerName, Nullable<System.DateTime> period, Nullable<int> branchId, Nullable<int> queueStatusId, Nullable<bool> chairmanClose, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var insuredNameParameter = insuredName != null ?
                new ObjectParameter("InsuredName", insuredName) :
                new ObjectParameter("InsuredName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var queueStatusIdParameter = queueStatusId.HasValue ?
                new ObjectParameter("QueueStatusId", queueStatusId) :
                new ObjectParameter("QueueStatusId", typeof(int));
    
            var chairmanCloseParameter = chairmanClose.HasValue ?
                new ObjectParameter("ChairmanClose", chairmanClose) :
                new ObjectParameter("ChairmanClose", typeof(bool));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditChairmanClose_Select_Result>("usp_QueueMotorAuditChairmanClose_Select", applicationCodeParameter, insuredNameParameter, payerNameParameter, periodParameter, branchIdParameter, queueStatusIdParameter, chairmanCloseParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditChairmanCloseALL_Update_Result> usp_QueueMotorAuditChairmanCloseALL_Update(string queueAuditIdList, Nullable<int> createdByUserId)
        {
            var queueAuditIdListParameter = queueAuditIdList != null ?
                new ObjectParameter("QueueAuditIdList", queueAuditIdList) :
                new ObjectParameter("QueueAuditIdList", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditChairmanCloseALL_Update_Result>("usp_QueueMotorAuditChairmanCloseALL_Update", queueAuditIdListParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditChairmanCloseByQueueAuditId_Update_Result> usp_QueueMotorAuditChairmanCloseByQueueAuditId_Update(Nullable<int> queueAuditId, Nullable<int> createdByUserId)
        {
            var queueAuditIdParameter = queueAuditId.HasValue ?
                new ObjectParameter("QueueAuditId", queueAuditId) :
                new ObjectParameter("QueueAuditId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditChairmanCloseByQueueAuditId_Update_Result>("usp_QueueMotorAuditChairmanCloseByQueueAuditId_Update", queueAuditIdParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditInsureCloseReport_Select_Result> usp_QueueMotorAuditInsureCloseReport_Select(Nullable<System.DateTime> dateForm, Nullable<System.DateTime> dateTo)
        {
            var dateFormParameter = dateForm.HasValue ?
                new ObjectParameter("DateForm", dateForm) :
                new ObjectParameter("DateForm", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditInsureCloseReport_Select_Result>("usp_QueueMotorAuditInsureCloseReport_Select", dateFormParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditInsureReport_Select_Result1> usp_QueueMotorAuditInsureReport_Select(Nullable<System.DateTime> period)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditInsureReport_Select_Result1>("usp_QueueMotorAuditInsureReport_Select", periodParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditChairmanCloseReport_Select_Result> usp_QueueMotorAuditChairmanCloseReport_Select(Nullable<System.DateTime> period)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditChairmanCloseReport_Select_Result>("usp_QueueMotorAuditChairmanCloseReport_Select", periodParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditLotReport_Select_Result> usp_QueueMotorAuditLotReport_Select(Nullable<int> queueAuditLotId)
        {
            var queueAuditLotIdParameter = queueAuditLotId.HasValue ?
                new ObjectParameter("QueueAuditLotId", queueAuditLotId) :
                new ObjectParameter("QueueAuditLotId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditLotReport_Select_Result>("usp_QueueMotorAuditLotReport_Select", queueAuditLotIdParameter);
        }
    
        public virtual ObjectResult<usp_QCTeam_Select_Result> usp_QCTeam_Select(string searchDetail)
        {
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QCTeam_Select_Result>("usp_QCTeam_Select", searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_QCUser_Insert_Result> usp_QCUser_Insert(Nullable<int> productGroupId, Nullable<int> userId, Nullable<int> createdById)
        {
            var productGroupIdParameter = productGroupId.HasValue ?
                new ObjectParameter("ProductGroupId", productGroupId) :
                new ObjectParameter("ProductGroupId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var createdByIdParameter = createdById.HasValue ?
                new ObjectParameter("CreatedById", createdById) :
                new ObjectParameter("CreatedById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QCUser_Insert_Result>("usp_QCUser_Insert", productGroupIdParameter, userIdParameter, createdByIdParameter);
        }
    
        public virtual ObjectResult<usp_QCUser_Select_Result> usp_QCUser_Select(Nullable<int> productGroupId, string searchDetail, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var productGroupIdParameter = productGroupId.HasValue ?
                new ObjectParameter("ProductGroupId", productGroupId) :
                new ObjectParameter("ProductGroupId", typeof(int));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QCUser_Select_Result>("usp_QCUser_Select", productGroupIdParameter, searchDetailParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QCUserById_Select_Result> usp_QCUserById_Select(Nullable<int> qCUserId)
        {
            var qCUserIdParameter = qCUserId.HasValue ?
                new ObjectParameter("QCUserId", qCUserId) :
                new ObjectParameter("QCUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QCUserById_Select_Result>("usp_QCUserById_Select", qCUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QCUserSetIsActiveById_Update_Result> usp_QCUserSetIsActiveById_Update(Nullable<int> qCUserId, Nullable<bool> setIsActive, Nullable<int> updatedById)
        {
            var qCUserIdParameter = qCUserId.HasValue ?
                new ObjectParameter("QCUserId", qCUserId) :
                new ObjectParameter("QCUserId", typeof(int));
    
            var setIsActiveParameter = setIsActive.HasValue ?
                new ObjectParameter("SetIsActive", setIsActive) :
                new ObjectParameter("SetIsActive", typeof(bool));
    
            var updatedByIdParameter = updatedById.HasValue ?
                new ObjectParameter("UpdatedById", updatedById) :
                new ObjectParameter("UpdatedById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QCUserSetIsActiveById_Update_Result>("usp_QCUserSetIsActiveById_Update", qCUserIdParameter, setIsActiveParameter, updatedByIdParameter);
        }
    
        public virtual ObjectResult<usp_pvQueueQCUser_Select_Result> usp_pvQueueQCUser_Select(Nullable<System.DateTime> period, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pvQueueQCUser_Select_Result>("usp_pvQueueQCUser_Select", periodParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QCUserList_Select_Result> usp_QCUserList_Select(Nullable<int> productGroupId, string searchDetail)
        {
            var productGroupIdParameter = productGroupId.HasValue ?
                new ObjectParameter("ProductGroupId", productGroupId) :
                new ObjectParameter("ProductGroupId", typeof(int));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QCUserList_Select_Result>("usp_QCUserList_Select", productGroupIdParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_QueueAuditAssign_Select_Result> usp_QueueAuditAssign_Select(string applicationCode, Nullable<int> branchId, Nullable<int> assignToUserId, string customerName, string payerName, string payerPhone, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var payerPhoneParameter = payerPhone != null ?
                new ObjectParameter("PayerPhone", payerPhone) :
                new ObjectParameter("PayerPhone", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueAuditAssign_Select_Result>("usp_QueueAuditAssign_Select", applicationCodeParameter, branchIdParameter, assignToUserIdParameter, customerNameParameter, payerNameParameter, payerPhoneParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueAuditListAssign_Update_Result> usp_QueueAuditListAssign_Update(string queueAuditId, Nullable<int> assignToUserId, Nullable<int> createdByUserId)
        {
            var queueAuditIdParameter = queueAuditId != null ?
                new ObjectParameter("QueueAuditId", queueAuditId) :
                new ObjectParameter("QueueAuditId", typeof(string));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueAuditListAssign_Update_Result>("usp_QueueAuditListAssign_Update", queueAuditIdParameter, assignToUserIdParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditAssignV2_Select_Result> usp_QueueMotorAuditAssignV2_Select(string applicationCode, Nullable<int> branchId, Nullable<int> assignToUserId, string customerName, string payerName, string payerPhone, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var payerPhoneParameter = payerPhone != null ?
                new ObjectParameter("PayerPhone", payerPhone) :
                new ObjectParameter("PayerPhone", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditAssignV2_Select_Result>("usp_QueueMotorAuditAssignV2_Select", applicationCodeParameter, branchIdParameter, assignToUserIdParameter, customerNameParameter, payerNameParameter, payerPhoneParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_pvQueueMotorQCUser_Select_Result> usp_pvQueueMotorQCUser_Select(Nullable<System.DateTime> period, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pvQueueMotorQCUser_Select_Result>("usp_pvQueueMotorQCUser_Select", periodParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditListAssignV2_Update_Result> usp_QueueMotorAuditListAssignV2_Update(string queueAuditId, Nullable<int> assignToUserId, Nullable<int> createdByUserId)
        {
            var queueAuditIdParameter = queueAuditId != null ?
                new ObjectParameter("QueueAuditId", queueAuditId) :
                new ObjectParameter("QueueAuditId", typeof(string));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditListAssignV2_Update_Result>("usp_QueueMotorAuditListAssignV2_Update", queueAuditIdParameter, assignToUserIdParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditPoliciesReport_Select_Result1> usp_QueueMotorAuditPoliciesReport_Select(Nullable<System.DateTime> period)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditPoliciesReport_Select_Result1>("usp_QueueMotorAuditPoliciesReport_Select", periodParameter);
        }
    
        public virtual ObjectResult<usp_NotAuditedCause_Select_Result> usp_NotAuditedCause_Select(Nullable<int> notAuditedCauseId, string notAuditedCauseDetail)
        {
            var notAuditedCauseIdParameter = notAuditedCauseId.HasValue ?
                new ObjectParameter("NotAuditedCauseId", notAuditedCauseId) :
                new ObjectParameter("NotAuditedCauseId", typeof(int));
    
            var notAuditedCauseDetailParameter = notAuditedCauseDetail != null ?
                new ObjectParameter("NotAuditedCauseDetail", notAuditedCauseDetail) :
                new ObjectParameter("NotAuditedCauseDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_NotAuditedCause_Select_Result>("usp_NotAuditedCause_Select", notAuditedCauseIdParameter, notAuditedCauseDetailParameter);
        }
    
        public virtual ObjectResult<usp_SaleMethodType_Select_Result> usp_SaleMethodType_Select(Nullable<int> saleMethodTypeId, string saleMethodTypeDetail)
        {
            var saleMethodTypeIdParameter = saleMethodTypeId.HasValue ?
                new ObjectParameter("SaleMethodTypeId", saleMethodTypeId) :
                new ObjectParameter("SaleMethodTypeId", typeof(int));
    
            var saleMethodTypeDetailParameter = saleMethodTypeDetail != null ?
                new ObjectParameter("SaleMethodTypeDetail", saleMethodTypeDetail) :
                new ObjectParameter("SaleMethodTypeDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SaleMethodType_Select_Result>("usp_SaleMethodType_Select", saleMethodTypeIdParameter, saleMethodTypeDetailParameter);
        }
    
        public virtual ObjectResult<usp_SaleServiceType_Select_Result> usp_SaleServiceType_Select(Nullable<int> saleServiceTypeId, string saleServiceTypeDetail)
        {
            var saleServiceTypeIdParameter = saleServiceTypeId.HasValue ?
                new ObjectParameter("SaleServiceTypeId", saleServiceTypeId) :
                new ObjectParameter("SaleServiceTypeId", typeof(int));
    
            var saleServiceTypeDetailParameter = saleServiceTypeDetail != null ?
                new ObjectParameter("SaleServiceTypeDetail", saleServiceTypeDetail) :
                new ObjectParameter("SaleServiceTypeDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SaleServiceType_Select_Result>("usp_SaleServiceType_Select", saleServiceTypeIdParameter, saleServiceTypeDetailParameter);
        }
    
        public virtual ObjectResult<usp_UnderwritingBehaviorType_Select_Result> usp_UnderwritingBehaviorType_Select(Nullable<int> underwritingBehaviorTypeId, string underwritingBehaviorTypeDetail)
        {
            var underwritingBehaviorTypeIdParameter = underwritingBehaviorTypeId.HasValue ?
                new ObjectParameter("UnderwritingBehaviorTypeId", underwritingBehaviorTypeId) :
                new ObjectParameter("UnderwritingBehaviorTypeId", typeof(int));
    
            var underwritingBehaviorTypeDetailParameter = underwritingBehaviorTypeDetail != null ?
                new ObjectParameter("UnderwritingBehaviorTypeDetail", underwritingBehaviorTypeDetail) :
                new ObjectParameter("UnderwritingBehaviorTypeDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UnderwritingBehaviorType_Select_Result>("usp_UnderwritingBehaviorType_Select", underwritingBehaviorTypeIdParameter, underwritingBehaviorTypeDetailParameter);
        }
    
        public virtual ObjectResult<usp_PositionDamaged_Select_Result> usp_PositionDamaged_Select(Nullable<int> positionDamagedId, string positionDamagedDetail)
        {
            var positionDamagedIdParameter = positionDamagedId.HasValue ?
                new ObjectParameter("PositionDamagedId", positionDamagedId) :
                new ObjectParameter("PositionDamagedId", typeof(int));
    
            var positionDamagedDetailParameter = positionDamagedDetail != null ?
                new ObjectParameter("PositionDamagedDetail", positionDamagedDetail) :
                new ObjectParameter("PositionDamagedDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PositionDamaged_Select_Result>("usp_PositionDamaged_Select", positionDamagedIdParameter, positionDamagedDetailParameter);
        }
    
        public virtual ObjectResult<usp_ReceivingManualType_Select_Result> usp_ReceivingManualType_Select(Nullable<int> receivingManualTypeId, string receivingManualTypeDetail)
        {
            var receivingManualTypeIdParameter = receivingManualTypeId.HasValue ?
                new ObjectParameter("ReceivingManualTypeId", receivingManualTypeId) :
                new ObjectParameter("ReceivingManualTypeId", typeof(int));
    
            var receivingManualTypeDetailParameter = receivingManualTypeDetail != null ?
                new ObjectParameter("ReceivingManualTypeDetail", receivingManualTypeDetail) :
                new ObjectParameter("ReceivingManualTypeDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ReceivingManualType_Select_Result>("usp_ReceivingManualType_Select", receivingManualTypeIdParameter, receivingManualTypeDetailParameter);
        }
    
        public virtual ObjectResult<usp_VehicleUseType_Select_Result> usp_VehicleUseType_Select(Nullable<int> vehicleUseTypeId, string vehicleUseTypeDetail)
        {
            var vehicleUseTypeIdParameter = vehicleUseTypeId.HasValue ?
                new ObjectParameter("VehicleUseTypeId", vehicleUseTypeId) :
                new ObjectParameter("VehicleUseTypeId", typeof(int));
    
            var vehicleUseTypeDetailParameter = vehicleUseTypeDetail != null ?
                new ObjectParameter("VehicleUseTypeDetail", vehicleUseTypeDetail) :
                new ObjectParameter("VehicleUseTypeDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_VehicleUseType_Select_Result>("usp_VehicleUseType_Select", vehicleUseTypeIdParameter, vehicleUseTypeDetailParameter);
        }
    
        public virtual ObjectResult<usp_ReceivingInsuranceType_Select_Result> usp_ReceivingInsuranceType_Select(Nullable<int> receivingInsuranceTypeId, string receivingInsuranceTypeDetail)
        {
            var receivingInsuranceTypeIdParameter = receivingInsuranceTypeId.HasValue ?
                new ObjectParameter("ReceivingInsuranceTypeId", receivingInsuranceTypeId) :
                new ObjectParameter("ReceivingInsuranceTypeId", typeof(int));
    
            var receivingInsuranceTypeDetailParameter = receivingInsuranceTypeDetail != null ?
                new ObjectParameter("ReceivingInsuranceTypeDetail", receivingInsuranceTypeDetail) :
                new ObjectParameter("ReceivingInsuranceTypeDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ReceivingInsuranceType_Select_Result>("usp_ReceivingInsuranceType_Select", receivingInsuranceTypeIdParameter, receivingInsuranceTypeDetailParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAudit2ResultV2_Insert_Result> usp_QueueMotorAudit2ResultV2_Insert(Nullable<int> queueAuditId, Nullable<int> auditInsureStatusId, Nullable<int> auditInsureConsiderStatusId, string auditInsureConsiderRemark, Nullable<bool> auditInsureClose, string auditInsureCloseRemark, Nullable<int> auditInsureUserId)
        {
            var queueAuditIdParameter = queueAuditId.HasValue ?
                new ObjectParameter("QueueAuditId", queueAuditId) :
                new ObjectParameter("QueueAuditId", typeof(int));
    
            var auditInsureStatusIdParameter = auditInsureStatusId.HasValue ?
                new ObjectParameter("AuditInsureStatusId", auditInsureStatusId) :
                new ObjectParameter("AuditInsureStatusId", typeof(int));
    
            var auditInsureConsiderStatusIdParameter = auditInsureConsiderStatusId.HasValue ?
                new ObjectParameter("AuditInsureConsiderStatusId", auditInsureConsiderStatusId) :
                new ObjectParameter("AuditInsureConsiderStatusId", typeof(int));
    
            var auditInsureConsiderRemarkParameter = auditInsureConsiderRemark != null ?
                new ObjectParameter("AuditInsureConsiderRemark", auditInsureConsiderRemark) :
                new ObjectParameter("AuditInsureConsiderRemark", typeof(string));
    
            var auditInsureCloseParameter = auditInsureClose.HasValue ?
                new ObjectParameter("AuditInsureClose", auditInsureClose) :
                new ObjectParameter("AuditInsureClose", typeof(bool));
    
            var auditInsureCloseRemarkParameter = auditInsureCloseRemark != null ?
                new ObjectParameter("AuditInsureCloseRemark", auditInsureCloseRemark) :
                new ObjectParameter("AuditInsureCloseRemark", typeof(string));
    
            var auditInsureUserIdParameter = auditInsureUserId.HasValue ?
                new ObjectParameter("AuditInsureUserId", auditInsureUserId) :
                new ObjectParameter("AuditInsureUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAudit2ResultV2_Insert_Result>("usp_QueueMotorAudit2ResultV2_Insert", queueAuditIdParameter, auditInsureStatusIdParameter, auditInsureConsiderStatusIdParameter, auditInsureConsiderRemarkParameter, auditInsureCloseParameter, auditInsureCloseRemarkParameter, auditInsureUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAudit1ResultV2_Insert_Result> usp_QueueMotorAudit1ResultV2_Insert(Nullable<int> queueAuditId, Nullable<int> queueAuditStatusId, Nullable<int> callStatusId, Nullable<int> notAuditedCauseId, string auditRemark, Nullable<bool> isUnderwriteInsured, Nullable<bool> isUnderwritePayer, Nullable<bool> isSamePersonPayer, string isSamePersonPayerRemark, Nullable<int> saleMethodTypeId, string saleMethodTypeRemark, Nullable<int> saleServiceTypeId, string saleServiceTypeRemark, Nullable<bool> isReceivedInsurance, Nullable<int> receivingInsuranceTypeId, Nullable<bool> insuranceInsuredIsValid, string insuranceInsuredRemark, Nullable<int> underwriteByUserId, string underwriteByUserRemark, Nullable<int> feedbackRate, string feedbackRemark, Nullable<bool> serviceResultIsIssue, string serviceResultRemark, Nullable<int> underwritingBehaviorTypeId, string underwritingBehaviorRemark, Nullable<bool> insuredNameIsValid, string insuredNameRemark, Nullable<bool> payerNameIsValid, string payerNameRemark, Nullable<bool> birthDateIsValid, string birthDateRemark, Nullable<bool> vehicleRegistrationNumberIsValid, string vehicleRegistrationNumberRemark, Nullable<bool> vehicleBrandModelDetailIsValid, string vehicleBrandModelDetailRemark, Nullable<bool> vehicleUseTypeDetailIsValid, string vehicleUseTypeDetailRemark, Nullable<int> vehicleUseTypeId, string vehicleUseTypeRemark, Nullable<bool> isDamaged, Nullable<bool> damageType1, Nullable<bool> damageType2, Nullable<bool> damageType3, Nullable<bool> damageType4, string damageTypeRemark, Nullable<bool> damage1, Nullable<bool> damage2, Nullable<bool> damage3, Nullable<bool> damage4, Nullable<bool> damage5, Nullable<bool> damage6, Nullable<bool> damage7, Nullable<bool> damage8, Nullable<bool> damage9, Nullable<bool> damage10, Nullable<bool> damage11, Nullable<bool> damage12, Nullable<bool> damage13, Nullable<bool> damage14, Nullable<bool> damage15, Nullable<bool> damage16, Nullable<bool> damage17, Nullable<bool> damage18, string damageRemark, Nullable<int> positionDamagedId, string positionDamagedRemark, Nullable<bool> isAccessories, string accessoriesRemark, Nullable<bool> payerOccupationIsValid, string payerOccupationRemark, Nullable<bool> payerBuildingNameIsValid, string payerBuildingNameRemark, Nullable<bool> productIsValid, string productRemark, Nullable<bool> premiumIsValid, string premiumRemark, Nullable<bool> periodTypeIsValid, string periodTypeRemark, Nullable<int> auditMotorStatusId, Nullable<int> auditMotorSpecifyStatusId, string auditMotorRemark, string auditOtherMotorRemark, Nullable<int> auditQCUserId)
        {
            var queueAuditIdParameter = queueAuditId.HasValue ?
                new ObjectParameter("QueueAuditId", queueAuditId) :
                new ObjectParameter("QueueAuditId", typeof(int));
    
            var queueAuditStatusIdParameter = queueAuditStatusId.HasValue ?
                new ObjectParameter("QueueAuditStatusId", queueAuditStatusId) :
                new ObjectParameter("QueueAuditStatusId", typeof(int));
    
            var callStatusIdParameter = callStatusId.HasValue ?
                new ObjectParameter("CallStatusId", callStatusId) :
                new ObjectParameter("CallStatusId", typeof(int));
    
            var notAuditedCauseIdParameter = notAuditedCauseId.HasValue ?
                new ObjectParameter("NotAuditedCauseId", notAuditedCauseId) :
                new ObjectParameter("NotAuditedCauseId", typeof(int));
    
            var auditRemarkParameter = auditRemark != null ?
                new ObjectParameter("AuditRemark", auditRemark) :
                new ObjectParameter("AuditRemark", typeof(string));
    
            var isUnderwriteInsuredParameter = isUnderwriteInsured.HasValue ?
                new ObjectParameter("IsUnderwriteInsured", isUnderwriteInsured) :
                new ObjectParameter("IsUnderwriteInsured", typeof(bool));
    
            var isUnderwritePayerParameter = isUnderwritePayer.HasValue ?
                new ObjectParameter("IsUnderwritePayer", isUnderwritePayer) :
                new ObjectParameter("IsUnderwritePayer", typeof(bool));
    
            var isSamePersonPayerParameter = isSamePersonPayer.HasValue ?
                new ObjectParameter("IsSamePersonPayer", isSamePersonPayer) :
                new ObjectParameter("IsSamePersonPayer", typeof(bool));
    
            var isSamePersonPayerRemarkParameter = isSamePersonPayerRemark != null ?
                new ObjectParameter("IsSamePersonPayerRemark", isSamePersonPayerRemark) :
                new ObjectParameter("IsSamePersonPayerRemark", typeof(string));
    
            var saleMethodTypeIdParameter = saleMethodTypeId.HasValue ?
                new ObjectParameter("SaleMethodTypeId", saleMethodTypeId) :
                new ObjectParameter("SaleMethodTypeId", typeof(int));
    
            var saleMethodTypeRemarkParameter = saleMethodTypeRemark != null ?
                new ObjectParameter("SaleMethodTypeRemark", saleMethodTypeRemark) :
                new ObjectParameter("SaleMethodTypeRemark", typeof(string));
    
            var saleServiceTypeIdParameter = saleServiceTypeId.HasValue ?
                new ObjectParameter("SaleServiceTypeId", saleServiceTypeId) :
                new ObjectParameter("SaleServiceTypeId", typeof(int));
    
            var saleServiceTypeRemarkParameter = saleServiceTypeRemark != null ?
                new ObjectParameter("SaleServiceTypeRemark", saleServiceTypeRemark) :
                new ObjectParameter("SaleServiceTypeRemark", typeof(string));
    
            var isReceivedInsuranceParameter = isReceivedInsurance.HasValue ?
                new ObjectParameter("IsReceivedInsurance", isReceivedInsurance) :
                new ObjectParameter("IsReceivedInsurance", typeof(bool));
    
            var receivingInsuranceTypeIdParameter = receivingInsuranceTypeId.HasValue ?
                new ObjectParameter("ReceivingInsuranceTypeId", receivingInsuranceTypeId) :
                new ObjectParameter("ReceivingInsuranceTypeId", typeof(int));
    
            var insuranceInsuredIsValidParameter = insuranceInsuredIsValid.HasValue ?
                new ObjectParameter("InsuranceInsuredIsValid", insuranceInsuredIsValid) :
                new ObjectParameter("InsuranceInsuredIsValid", typeof(bool));
    
            var insuranceInsuredRemarkParameter = insuranceInsuredRemark != null ?
                new ObjectParameter("InsuranceInsuredRemark", insuranceInsuredRemark) :
                new ObjectParameter("InsuranceInsuredRemark", typeof(string));
    
            var underwriteByUserIdParameter = underwriteByUserId.HasValue ?
                new ObjectParameter("UnderwriteByUserId", underwriteByUserId) :
                new ObjectParameter("UnderwriteByUserId", typeof(int));
    
            var underwriteByUserRemarkParameter = underwriteByUserRemark != null ?
                new ObjectParameter("UnderwriteByUserRemark", underwriteByUserRemark) :
                new ObjectParameter("UnderwriteByUserRemark", typeof(string));
    
            var feedbackRateParameter = feedbackRate.HasValue ?
                new ObjectParameter("FeedbackRate", feedbackRate) :
                new ObjectParameter("FeedbackRate", typeof(int));
    
            var feedbackRemarkParameter = feedbackRemark != null ?
                new ObjectParameter("FeedbackRemark", feedbackRemark) :
                new ObjectParameter("FeedbackRemark", typeof(string));
    
            var serviceResultIsIssueParameter = serviceResultIsIssue.HasValue ?
                new ObjectParameter("ServiceResultIsIssue", serviceResultIsIssue) :
                new ObjectParameter("ServiceResultIsIssue", typeof(bool));
    
            var serviceResultRemarkParameter = serviceResultRemark != null ?
                new ObjectParameter("ServiceResultRemark", serviceResultRemark) :
                new ObjectParameter("ServiceResultRemark", typeof(string));
    
            var underwritingBehaviorTypeIdParameter = underwritingBehaviorTypeId.HasValue ?
                new ObjectParameter("UnderwritingBehaviorTypeId", underwritingBehaviorTypeId) :
                new ObjectParameter("UnderwritingBehaviorTypeId", typeof(int));
    
            var underwritingBehaviorRemarkParameter = underwritingBehaviorRemark != null ?
                new ObjectParameter("UnderwritingBehaviorRemark", underwritingBehaviorRemark) :
                new ObjectParameter("UnderwritingBehaviorRemark", typeof(string));
    
            var insuredNameIsValidParameter = insuredNameIsValid.HasValue ?
                new ObjectParameter("InsuredNameIsValid", insuredNameIsValid) :
                new ObjectParameter("InsuredNameIsValid", typeof(bool));
    
            var insuredNameRemarkParameter = insuredNameRemark != null ?
                new ObjectParameter("InsuredNameRemark", insuredNameRemark) :
                new ObjectParameter("InsuredNameRemark", typeof(string));
    
            var payerNameIsValidParameter = payerNameIsValid.HasValue ?
                new ObjectParameter("PayerNameIsValid", payerNameIsValid) :
                new ObjectParameter("PayerNameIsValid", typeof(bool));
    
            var payerNameRemarkParameter = payerNameRemark != null ?
                new ObjectParameter("PayerNameRemark", payerNameRemark) :
                new ObjectParameter("PayerNameRemark", typeof(string));
    
            var birthDateIsValidParameter = birthDateIsValid.HasValue ?
                new ObjectParameter("BirthDateIsValid", birthDateIsValid) :
                new ObjectParameter("BirthDateIsValid", typeof(bool));
    
            var birthDateRemarkParameter = birthDateRemark != null ?
                new ObjectParameter("BirthDateRemark", birthDateRemark) :
                new ObjectParameter("BirthDateRemark", typeof(string));
    
            var vehicleRegistrationNumberIsValidParameter = vehicleRegistrationNumberIsValid.HasValue ?
                new ObjectParameter("VehicleRegistrationNumberIsValid", vehicleRegistrationNumberIsValid) :
                new ObjectParameter("VehicleRegistrationNumberIsValid", typeof(bool));
    
            var vehicleRegistrationNumberRemarkParameter = vehicleRegistrationNumberRemark != null ?
                new ObjectParameter("VehicleRegistrationNumberRemark", vehicleRegistrationNumberRemark) :
                new ObjectParameter("VehicleRegistrationNumberRemark", typeof(string));
    
            var vehicleBrandModelDetailIsValidParameter = vehicleBrandModelDetailIsValid.HasValue ?
                new ObjectParameter("VehicleBrandModelDetailIsValid", vehicleBrandModelDetailIsValid) :
                new ObjectParameter("VehicleBrandModelDetailIsValid", typeof(bool));
    
            var vehicleBrandModelDetailRemarkParameter = vehicleBrandModelDetailRemark != null ?
                new ObjectParameter("VehicleBrandModelDetailRemark", vehicleBrandModelDetailRemark) :
                new ObjectParameter("VehicleBrandModelDetailRemark", typeof(string));
    
            var vehicleUseTypeDetailIsValidParameter = vehicleUseTypeDetailIsValid.HasValue ?
                new ObjectParameter("VehicleUseTypeDetailIsValid", vehicleUseTypeDetailIsValid) :
                new ObjectParameter("VehicleUseTypeDetailIsValid", typeof(bool));
    
            var vehicleUseTypeDetailRemarkParameter = vehicleUseTypeDetailRemark != null ?
                new ObjectParameter("VehicleUseTypeDetailRemark", vehicleUseTypeDetailRemark) :
                new ObjectParameter("VehicleUseTypeDetailRemark", typeof(string));
    
            var vehicleUseTypeIdParameter = vehicleUseTypeId.HasValue ?
                new ObjectParameter("VehicleUseTypeId", vehicleUseTypeId) :
                new ObjectParameter("VehicleUseTypeId", typeof(int));
    
            var vehicleUseTypeRemarkParameter = vehicleUseTypeRemark != null ?
                new ObjectParameter("VehicleUseTypeRemark", vehicleUseTypeRemark) :
                new ObjectParameter("VehicleUseTypeRemark", typeof(string));
    
            var isDamagedParameter = isDamaged.HasValue ?
                new ObjectParameter("IsDamaged", isDamaged) :
                new ObjectParameter("IsDamaged", typeof(bool));
    
            var damageType1Parameter = damageType1.HasValue ?
                new ObjectParameter("DamageType1", damageType1) :
                new ObjectParameter("DamageType1", typeof(bool));
    
            var damageType2Parameter = damageType2.HasValue ?
                new ObjectParameter("DamageType2", damageType2) :
                new ObjectParameter("DamageType2", typeof(bool));
    
            var damageType3Parameter = damageType3.HasValue ?
                new ObjectParameter("DamageType3", damageType3) :
                new ObjectParameter("DamageType3", typeof(bool));
    
            var damageType4Parameter = damageType4.HasValue ?
                new ObjectParameter("DamageType4", damageType4) :
                new ObjectParameter("DamageType4", typeof(bool));
    
            var damageTypeRemarkParameter = damageTypeRemark != null ?
                new ObjectParameter("DamageTypeRemark", damageTypeRemark) :
                new ObjectParameter("DamageTypeRemark", typeof(string));
    
            var damage1Parameter = damage1.HasValue ?
                new ObjectParameter("Damage1", damage1) :
                new ObjectParameter("Damage1", typeof(bool));
    
            var damage2Parameter = damage2.HasValue ?
                new ObjectParameter("Damage2", damage2) :
                new ObjectParameter("Damage2", typeof(bool));
    
            var damage3Parameter = damage3.HasValue ?
                new ObjectParameter("Damage3", damage3) :
                new ObjectParameter("Damage3", typeof(bool));
    
            var damage4Parameter = damage4.HasValue ?
                new ObjectParameter("Damage4", damage4) :
                new ObjectParameter("Damage4", typeof(bool));
    
            var damage5Parameter = damage5.HasValue ?
                new ObjectParameter("Damage5", damage5) :
                new ObjectParameter("Damage5", typeof(bool));
    
            var damage6Parameter = damage6.HasValue ?
                new ObjectParameter("Damage6", damage6) :
                new ObjectParameter("Damage6", typeof(bool));
    
            var damage7Parameter = damage7.HasValue ?
                new ObjectParameter("Damage7", damage7) :
                new ObjectParameter("Damage7", typeof(bool));
    
            var damage8Parameter = damage8.HasValue ?
                new ObjectParameter("Damage8", damage8) :
                new ObjectParameter("Damage8", typeof(bool));
    
            var damage9Parameter = damage9.HasValue ?
                new ObjectParameter("Damage9", damage9) :
                new ObjectParameter("Damage9", typeof(bool));
    
            var damage10Parameter = damage10.HasValue ?
                new ObjectParameter("Damage10", damage10) :
                new ObjectParameter("Damage10", typeof(bool));
    
            var damage11Parameter = damage11.HasValue ?
                new ObjectParameter("Damage11", damage11) :
                new ObjectParameter("Damage11", typeof(bool));
    
            var damage12Parameter = damage12.HasValue ?
                new ObjectParameter("Damage12", damage12) :
                new ObjectParameter("Damage12", typeof(bool));
    
            var damage13Parameter = damage13.HasValue ?
                new ObjectParameter("Damage13", damage13) :
                new ObjectParameter("Damage13", typeof(bool));
    
            var damage14Parameter = damage14.HasValue ?
                new ObjectParameter("Damage14", damage14) :
                new ObjectParameter("Damage14", typeof(bool));
    
            var damage15Parameter = damage15.HasValue ?
                new ObjectParameter("Damage15", damage15) :
                new ObjectParameter("Damage15", typeof(bool));
    
            var damage16Parameter = damage16.HasValue ?
                new ObjectParameter("Damage16", damage16) :
                new ObjectParameter("Damage16", typeof(bool));
    
            var damage17Parameter = damage17.HasValue ?
                new ObjectParameter("Damage17", damage17) :
                new ObjectParameter("Damage17", typeof(bool));
    
            var damage18Parameter = damage18.HasValue ?
                new ObjectParameter("Damage18", damage18) :
                new ObjectParameter("Damage18", typeof(bool));
    
            var damageRemarkParameter = damageRemark != null ?
                new ObjectParameter("DamageRemark", damageRemark) :
                new ObjectParameter("DamageRemark", typeof(string));
    
            var positionDamagedIdParameter = positionDamagedId.HasValue ?
                new ObjectParameter("PositionDamagedId", positionDamagedId) :
                new ObjectParameter("PositionDamagedId", typeof(int));
    
            var positionDamagedRemarkParameter = positionDamagedRemark != null ?
                new ObjectParameter("PositionDamagedRemark", positionDamagedRemark) :
                new ObjectParameter("PositionDamagedRemark", typeof(string));
    
            var isAccessoriesParameter = isAccessories.HasValue ?
                new ObjectParameter("IsAccessories", isAccessories) :
                new ObjectParameter("IsAccessories", typeof(bool));
    
            var accessoriesRemarkParameter = accessoriesRemark != null ?
                new ObjectParameter("AccessoriesRemark", accessoriesRemark) :
                new ObjectParameter("AccessoriesRemark", typeof(string));
    
            var payerOccupationIsValidParameter = payerOccupationIsValid.HasValue ?
                new ObjectParameter("PayerOccupationIsValid", payerOccupationIsValid) :
                new ObjectParameter("PayerOccupationIsValid", typeof(bool));
    
            var payerOccupationRemarkParameter = payerOccupationRemark != null ?
                new ObjectParameter("PayerOccupationRemark", payerOccupationRemark) :
                new ObjectParameter("PayerOccupationRemark", typeof(string));
    
            var payerBuildingNameIsValidParameter = payerBuildingNameIsValid.HasValue ?
                new ObjectParameter("PayerBuildingNameIsValid", payerBuildingNameIsValid) :
                new ObjectParameter("PayerBuildingNameIsValid", typeof(bool));
    
            var payerBuildingNameRemarkParameter = payerBuildingNameRemark != null ?
                new ObjectParameter("PayerBuildingNameRemark", payerBuildingNameRemark) :
                new ObjectParameter("PayerBuildingNameRemark", typeof(string));
    
            var productIsValidParameter = productIsValid.HasValue ?
                new ObjectParameter("ProductIsValid", productIsValid) :
                new ObjectParameter("ProductIsValid", typeof(bool));
    
            var productRemarkParameter = productRemark != null ?
                new ObjectParameter("ProductRemark", productRemark) :
                new ObjectParameter("ProductRemark", typeof(string));
    
            var premiumIsValidParameter = premiumIsValid.HasValue ?
                new ObjectParameter("PremiumIsValid", premiumIsValid) :
                new ObjectParameter("PremiumIsValid", typeof(bool));
    
            var premiumRemarkParameter = premiumRemark != null ?
                new ObjectParameter("PremiumRemark", premiumRemark) :
                new ObjectParameter("PremiumRemark", typeof(string));
    
            var periodTypeIsValidParameter = periodTypeIsValid.HasValue ?
                new ObjectParameter("PeriodTypeIsValid", periodTypeIsValid) :
                new ObjectParameter("PeriodTypeIsValid", typeof(bool));
    
            var periodTypeRemarkParameter = periodTypeRemark != null ?
                new ObjectParameter("PeriodTypeRemark", periodTypeRemark) :
                new ObjectParameter("PeriodTypeRemark", typeof(string));
    
            var auditMotorStatusIdParameter = auditMotorStatusId.HasValue ?
                new ObjectParameter("AuditMotorStatusId", auditMotorStatusId) :
                new ObjectParameter("AuditMotorStatusId", typeof(int));
    
            var auditMotorSpecifyStatusIdParameter = auditMotorSpecifyStatusId.HasValue ?
                new ObjectParameter("AuditMotorSpecifyStatusId", auditMotorSpecifyStatusId) :
                new ObjectParameter("AuditMotorSpecifyStatusId", typeof(int));
    
            var auditMotorRemarkParameter = auditMotorRemark != null ?
                new ObjectParameter("AuditMotorRemark", auditMotorRemark) :
                new ObjectParameter("AuditMotorRemark", typeof(string));
    
            var auditOtherMotorRemarkParameter = auditOtherMotorRemark != null ?
                new ObjectParameter("AuditOtherMotorRemark", auditOtherMotorRemark) :
                new ObjectParameter("AuditOtherMotorRemark", typeof(string));
    
            var auditQCUserIdParameter = auditQCUserId.HasValue ?
                new ObjectParameter("AuditQCUserId", auditQCUserId) :
                new ObjectParameter("AuditQCUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAudit1ResultV2_Insert_Result>("usp_QueueMotorAudit1ResultV2_Insert", queueAuditIdParameter, queueAuditStatusIdParameter, callStatusIdParameter, notAuditedCauseIdParameter, auditRemarkParameter, isUnderwriteInsuredParameter, isUnderwritePayerParameter, isSamePersonPayerParameter, isSamePersonPayerRemarkParameter, saleMethodTypeIdParameter, saleMethodTypeRemarkParameter, saleServiceTypeIdParameter, saleServiceTypeRemarkParameter, isReceivedInsuranceParameter, receivingInsuranceTypeIdParameter, insuranceInsuredIsValidParameter, insuranceInsuredRemarkParameter, underwriteByUserIdParameter, underwriteByUserRemarkParameter, feedbackRateParameter, feedbackRemarkParameter, serviceResultIsIssueParameter, serviceResultRemarkParameter, underwritingBehaviorTypeIdParameter, underwritingBehaviorRemarkParameter, insuredNameIsValidParameter, insuredNameRemarkParameter, payerNameIsValidParameter, payerNameRemarkParameter, birthDateIsValidParameter, birthDateRemarkParameter, vehicleRegistrationNumberIsValidParameter, vehicleRegistrationNumberRemarkParameter, vehicleBrandModelDetailIsValidParameter, vehicleBrandModelDetailRemarkParameter, vehicleUseTypeDetailIsValidParameter, vehicleUseTypeDetailRemarkParameter, vehicleUseTypeIdParameter, vehicleUseTypeRemarkParameter, isDamagedParameter, damageType1Parameter, damageType2Parameter, damageType3Parameter, damageType4Parameter, damageTypeRemarkParameter, damage1Parameter, damage2Parameter, damage3Parameter, damage4Parameter, damage5Parameter, damage6Parameter, damage7Parameter, damage8Parameter, damage9Parameter, damage10Parameter, damage11Parameter, damage12Parameter, damage13Parameter, damage14Parameter, damage15Parameter, damage16Parameter, damage17Parameter, damage18Parameter, damageRemarkParameter, positionDamagedIdParameter, positionDamagedRemarkParameter, isAccessoriesParameter, accessoriesRemarkParameter, payerOccupationIsValidParameter, payerOccupationRemarkParameter, payerBuildingNameIsValidParameter, payerBuildingNameRemarkParameter, productIsValidParameter, productRemarkParameter, premiumIsValidParameter, premiumRemarkParameter, periodTypeIsValidParameter, periodTypeRemarkParameter, auditMotorStatusIdParameter, auditMotorSpecifyStatusIdParameter, auditMotorRemarkParameter, auditOtherMotorRemarkParameter, auditQCUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditFullDetailByQueueAuditIdV2_Select_Result> usp_QueueMotorAuditFullDetailByQueueAuditIdV2_Select(Nullable<int> queueAuditId)
        {
            var queueAuditIdParameter = queueAuditId.HasValue ?
                new ObjectParameter("QueueAuditId", queueAuditId) :
                new ObjectParameter("QueueAuditId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditFullDetailByQueueAuditIdV2_Select_Result>("usp_QueueMotorAuditFullDetailByQueueAuditIdV2_Select", queueAuditIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditLot_Insert_v3_Result> usp_QueueMotorAuditLot_Insert_v3(Nullable<System.DateTime> period, Nullable<int> createdByUserId)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditLot_Insert_v3_Result>("usp_QueueMotorAuditLot_Insert_v3", periodParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditQCCloseALL_Update_Result> usp_QueueMotorAuditQCCloseALL_Update(string applicationCode, string insuredName, string payerName, Nullable<System.DateTime> period, Nullable<int> areaManagerAuditUserId, string queueStatusIdList, Nullable<int> createdByUserId)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var insuredNameParameter = insuredName != null ?
                new ObjectParameter("InsuredName", insuredName) :
                new ObjectParameter("InsuredName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var areaManagerAuditUserIdParameter = areaManagerAuditUserId.HasValue ?
                new ObjectParameter("AreaManagerAuditUserId", areaManagerAuditUserId) :
                new ObjectParameter("AreaManagerAuditUserId", typeof(int));
    
            var queueStatusIdListParameter = queueStatusIdList != null ?
                new ObjectParameter("QueueStatusIdList", queueStatusIdList) :
                new ObjectParameter("QueueStatusIdList", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditQCCloseALL_Update_Result>("usp_QueueMotorAuditQCCloseALL_Update", applicationCodeParameter, insuredNameParameter, payerNameParameter, periodParameter, areaManagerAuditUserIdParameter, queueStatusIdListParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditQCCloseByQueueAuditId_Update_Result> usp_QueueMotorAuditQCCloseByQueueAuditId_Update(Nullable<int> queueAuditId, Nullable<int> createdByUserId)
        {
            var queueAuditIdParameter = queueAuditId.HasValue ?
                new ObjectParameter("QueueAuditId", queueAuditId) :
                new ObjectParameter("QueueAuditId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditQCCloseByQueueAuditId_Update_Result>("usp_QueueMotorAuditQCCloseByQueueAuditId_Update", queueAuditIdParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditV2_Select_Result> usp_QueueMotorAuditV2_Select(string applicationCode, string insuredName, string payerName, Nullable<System.DateTime> period, Nullable<int> assignToUserId, string queueStatusIdList, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var insuredNameParameter = insuredName != null ?
                new ObjectParameter("InsuredName", insuredName) :
                new ObjectParameter("InsuredName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var queueStatusIdListParameter = queueStatusIdList != null ?
                new ObjectParameter("QueueStatusIdList", queueStatusIdList) :
                new ObjectParameter("QueueStatusIdList", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditV2_Select_Result>("usp_QueueMotorAuditV2_Select", applicationCodeParameter, insuredNameParameter, payerNameParameter, periodParameter, assignToUserIdParameter, queueStatusIdListParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditInsureV2_Select_Result> usp_QueueMotorAuditInsureV2_Select(string applicationCode, string insuredName, string payerName, Nullable<System.DateTime> period, Nullable<int> auditMotorStatusId, Nullable<int> auditInsureStatusId, string auditInsureConsiderStatusIdList, Nullable<bool> auditInsureClose, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var insuredNameParameter = insuredName != null ?
                new ObjectParameter("InsuredName", insuredName) :
                new ObjectParameter("InsuredName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var auditMotorStatusIdParameter = auditMotorStatusId.HasValue ?
                new ObjectParameter("AuditMotorStatusId", auditMotorStatusId) :
                new ObjectParameter("AuditMotorStatusId", typeof(int));
    
            var auditInsureStatusIdParameter = auditInsureStatusId.HasValue ?
                new ObjectParameter("AuditInsureStatusId", auditInsureStatusId) :
                new ObjectParameter("AuditInsureStatusId", typeof(int));
    
            var auditInsureConsiderStatusIdListParameter = auditInsureConsiderStatusIdList != null ?
                new ObjectParameter("AuditInsureConsiderStatusIdList", auditInsureConsiderStatusIdList) :
                new ObjectParameter("AuditInsureConsiderStatusIdList", typeof(string));
    
            var auditInsureCloseParameter = auditInsureClose.HasValue ?
                new ObjectParameter("AuditInsureClose", auditInsureClose) :
                new ObjectParameter("AuditInsureClose", typeof(bool));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditInsureV2_Select_Result>("usp_QueueMotorAuditInsureV2_Select", applicationCodeParameter, insuredNameParameter, payerNameParameter, periodParameter, auditMotorStatusIdParameter, auditInsureStatusIdParameter, auditInsureConsiderStatusIdListParameter, auditInsureCloseParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditInsureReportV2_Select_Result> usp_QueueMotorAuditInsureReportV2_Select(Nullable<System.DateTime> dateForm, Nullable<System.DateTime> dateTo)
        {
            var dateFormParameter = dateForm.HasValue ?
                new ObjectParameter("DateForm", dateForm) :
                new ObjectParameter("DateForm", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditInsureReportV2_Select_Result>("usp_QueueMotorAuditInsureReportV2_Select", dateFormParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditPendingCount_Select_Result> usp_QueueMotorAuditPendingCount_Select(Nullable<System.DateTime> period, Nullable<int> createdByUserId)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditPendingCount_Select_Result>("usp_QueueMotorAuditPendingCount_Select", periodParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditLot_Insert_v4_Result> usp_QueueMotorAuditLot_Insert_v4(Nullable<System.DateTime> period, Nullable<int> createdByUserId)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditLot_Insert_v4_Result>("usp_QueueMotorAuditLot_Insert_v4", periodParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_pvQueueMotorQCUserV2_Select_Result> usp_pvQueueMotorQCUserV2_Select(Nullable<int> queueAuditLotId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var queueAuditLotIdParameter = queueAuditLotId.HasValue ?
                new ObjectParameter("QueueAuditLotId", queueAuditLotId) :
                new ObjectParameter("QueueAuditLotId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pvQueueMotorQCUserV2_Select_Result>("usp_pvQueueMotorQCUserV2_Select", queueAuditLotIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueMotorAuditLot_Insert_v5_Result> usp_QueueMotorAuditLot_Insert_v5(Nullable<System.DateTime> period, Nullable<int> createdByUserId)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMotorAuditLot_Insert_v5_Result>("usp_QueueMotorAuditLot_Insert_v5", periodParameter, createdByUserIdParameter);
        }
    }
}
