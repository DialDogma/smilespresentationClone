//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmileSUnderwriteAudit.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class UnderwriteCancerAuditEntities : DbContext
    {
        public UnderwriteCancerAuditEntities()
            : base("name=UnderwriteCancerAuditEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<usp_AuditCIInsureConsiderStatus_Select_Result> usp_AuditCIInsureConsiderStatus_Select(Nullable<int> auditInsureConsiderStatusId)
        {
            var auditInsureConsiderStatusIdParameter = auditInsureConsiderStatusId.HasValue ?
                new ObjectParameter("AuditInsureConsiderStatusId", auditInsureConsiderStatusId) :
                new ObjectParameter("AuditInsureConsiderStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AuditCIInsureConsiderStatus_Select_Result>("usp_AuditCIInsureConsiderStatus_Select", auditInsureConsiderStatusIdParameter);
        }
    
        public virtual ObjectResult<usp_AuditCIInsureStatus_Select_Result> usp_AuditCIInsureStatus_Select(Nullable<int> auditInsureStatusId)
        {
            var auditInsureStatusIdParameter = auditInsureStatusId.HasValue ?
                new ObjectParameter("AuditInsureStatusId", auditInsureStatusId) :
                new ObjectParameter("AuditInsureStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AuditCIInsureStatus_Select_Result>("usp_AuditCIInsureStatus_Select", auditInsureStatusIdParameter);
        }
    
        public virtual ObjectResult<usp_AuditCIPaymentStatus_Select_Result> usp_AuditCIPaymentStatus_Select(Nullable<int> auditPaymentStatusId)
        {
            var auditPaymentStatusIdParameter = auditPaymentStatusId.HasValue ?
                new ObjectParameter("AuditPaymentStatusId", auditPaymentStatusId) :
                new ObjectParameter("AuditPaymentStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AuditCIPaymentStatus_Select_Result>("usp_AuditCIPaymentStatus_Select", auditPaymentStatusIdParameter);
        }
    
        public virtual ObjectResult<usp_AuditCIPoliciesGivenStatus_Select_Result> usp_AuditCIPoliciesGivenStatus_Select(Nullable<int> auditPoliciesGivenStatusId)
        {
            var auditPoliciesGivenStatusIdParameter = auditPoliciesGivenStatusId.HasValue ?
                new ObjectParameter("AuditPoliciesGivenStatusId", auditPoliciesGivenStatusId) :
                new ObjectParameter("AuditPoliciesGivenStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AuditCIPoliciesGivenStatus_Select_Result>("usp_AuditCIPoliciesGivenStatus_Select", auditPoliciesGivenStatusIdParameter);
        }
    
        public virtual ObjectResult<usp_AuditCISpecifyStatus_Select_Result> usp_AuditCISpecifyStatus_Select(Nullable<int> auditCISpecifyStatusId)
        {
            var auditCISpecifyStatusIdParameter = auditCISpecifyStatusId.HasValue ?
                new ObjectParameter("AuditCISpecifyStatusId", auditCISpecifyStatusId) :
                new ObjectParameter("AuditCISpecifyStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AuditCISpecifyStatus_Select_Result>("usp_AuditCISpecifyStatus_Select", auditCISpecifyStatusIdParameter);
        }
    
        public virtual ObjectResult<usp_AuditCIUnderwriteStatus_Select_Result> usp_AuditCIUnderwriteStatus_Select(Nullable<int> auditUnderwriteStatusId)
        {
            var auditUnderwriteStatusIdParameter = auditUnderwriteStatusId.HasValue ?
                new ObjectParameter("AuditUnderwriteStatusId", auditUnderwriteStatusId) :
                new ObjectParameter("AuditUnderwriteStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AuditCIUnderwriteStatus_Select_Result>("usp_AuditCIUnderwriteStatus_Select", auditUnderwriteStatusIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAudit_Select_Result> usp_QueueCIAudit_Select(string applicationCode, string insuredName, string payerName, Nullable<System.DateTime> period, Nullable<int> areaManagerAuditUserId, string queueStatusIdList, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var insuredNameParameter = insuredName != null ?
                new ObjectParameter("InsuredName", insuredName) :
                new ObjectParameter("InsuredName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var areaManagerAuditUserIdParameter = areaManagerAuditUserId.HasValue ?
                new ObjectParameter("AreaManagerAuditUserId", areaManagerAuditUserId) :
                new ObjectParameter("AreaManagerAuditUserId", typeof(int));
    
            var queueStatusIdListParameter = queueStatusIdList != null ?
                new ObjectParameter("QueueStatusIdList", queueStatusIdList) :
                new ObjectParameter("QueueStatusIdList", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAudit_Select_Result>("usp_QueueCIAudit_Select", applicationCodeParameter, insuredNameParameter, payerNameParameter, periodParameter, areaManagerAuditUserIdParameter, queueStatusIdListParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAudit1Result_Insert_Result> usp_QueueCIAudit1Result_Insert(Nullable<int> queueAuditId, Nullable<int> queueAuditStatusId, Nullable<int> callStatusId, Nullable<int> auditUnderwriteStatusId, Nullable<int> auditPoliciesGivenStatusId, string auditRemark, Nullable<int> auditPaymentStatusId, string auditPaymentRemark, Nullable<int> auditCIStatusId, Nullable<int> auditCISpecifyStatusId, string auditCIRemark, Nullable<int> audit1CreatedByUserId)
        {
            var queueAuditIdParameter = queueAuditId.HasValue ?
                new ObjectParameter("QueueAuditId", queueAuditId) :
                new ObjectParameter("QueueAuditId", typeof(int));
    
            var queueAuditStatusIdParameter = queueAuditStatusId.HasValue ?
                new ObjectParameter("QueueAuditStatusId", queueAuditStatusId) :
                new ObjectParameter("QueueAuditStatusId", typeof(int));
    
            var callStatusIdParameter = callStatusId.HasValue ?
                new ObjectParameter("CallStatusId", callStatusId) :
                new ObjectParameter("CallStatusId", typeof(int));
    
            var auditUnderwriteStatusIdParameter = auditUnderwriteStatusId.HasValue ?
                new ObjectParameter("AuditUnderwriteStatusId", auditUnderwriteStatusId) :
                new ObjectParameter("AuditUnderwriteStatusId", typeof(int));
    
            var auditPoliciesGivenStatusIdParameter = auditPoliciesGivenStatusId.HasValue ?
                new ObjectParameter("AuditPoliciesGivenStatusId", auditPoliciesGivenStatusId) :
                new ObjectParameter("AuditPoliciesGivenStatusId", typeof(int));
    
            var auditRemarkParameter = auditRemark != null ?
                new ObjectParameter("AuditRemark", auditRemark) :
                new ObjectParameter("AuditRemark", typeof(string));
    
            var auditPaymentStatusIdParameter = auditPaymentStatusId.HasValue ?
                new ObjectParameter("AuditPaymentStatusId", auditPaymentStatusId) :
                new ObjectParameter("AuditPaymentStatusId", typeof(int));
    
            var auditPaymentRemarkParameter = auditPaymentRemark != null ?
                new ObjectParameter("AuditPaymentRemark", auditPaymentRemark) :
                new ObjectParameter("AuditPaymentRemark", typeof(string));
    
            var auditCIStatusIdParameter = auditCIStatusId.HasValue ?
                new ObjectParameter("AuditCIStatusId", auditCIStatusId) :
                new ObjectParameter("AuditCIStatusId", typeof(int));
    
            var auditCISpecifyStatusIdParameter = auditCISpecifyStatusId.HasValue ?
                new ObjectParameter("AuditCISpecifyStatusId", auditCISpecifyStatusId) :
                new ObjectParameter("AuditCISpecifyStatusId", typeof(int));
    
            var auditCIRemarkParameter = auditCIRemark != null ?
                new ObjectParameter("AuditCIRemark", auditCIRemark) :
                new ObjectParameter("AuditCIRemark", typeof(string));
    
            var audit1CreatedByUserIdParameter = audit1CreatedByUserId.HasValue ?
                new ObjectParameter("Audit1CreatedByUserId", audit1CreatedByUserId) :
                new ObjectParameter("Audit1CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAudit1Result_Insert_Result>("usp_QueueCIAudit1Result_Insert", queueAuditIdParameter, queueAuditStatusIdParameter, callStatusIdParameter, auditUnderwriteStatusIdParameter, auditPoliciesGivenStatusIdParameter, auditRemarkParameter, auditPaymentStatusIdParameter, auditPaymentRemarkParameter, auditCIStatusIdParameter, auditCISpecifyStatusIdParameter, auditCIRemarkParameter, audit1CreatedByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAudit2Result_Insert_Result> usp_QueueCIAudit2Result_Insert(Nullable<int> queueAuditId, Nullable<int> auditInsureStatusId, string auditInsureRemark, Nullable<int> auditInsureConsiderStatusId, string auditInsureConsiderRemark, Nullable<int> audit2CreatedByUserId)
        {
            var queueAuditIdParameter = queueAuditId.HasValue ?
                new ObjectParameter("QueueAuditId", queueAuditId) :
                new ObjectParameter("QueueAuditId", typeof(int));
    
            var auditInsureStatusIdParameter = auditInsureStatusId.HasValue ?
                new ObjectParameter("AuditInsureStatusId", auditInsureStatusId) :
                new ObjectParameter("AuditInsureStatusId", typeof(int));
    
            var auditInsureRemarkParameter = auditInsureRemark != null ?
                new ObjectParameter("AuditInsureRemark", auditInsureRemark) :
                new ObjectParameter("AuditInsureRemark", typeof(string));
    
            var auditInsureConsiderStatusIdParameter = auditInsureConsiderStatusId.HasValue ?
                new ObjectParameter("AuditInsureConsiderStatusId", auditInsureConsiderStatusId) :
                new ObjectParameter("AuditInsureConsiderStatusId", typeof(int));
    
            var auditInsureConsiderRemarkParameter = auditInsureConsiderRemark != null ?
                new ObjectParameter("AuditInsureConsiderRemark", auditInsureConsiderRemark) :
                new ObjectParameter("AuditInsureConsiderRemark", typeof(string));
    
            var audit2CreatedByUserIdParameter = audit2CreatedByUserId.HasValue ?
                new ObjectParameter("Audit2CreatedByUserId", audit2CreatedByUserId) :
                new ObjectParameter("Audit2CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAudit2Result_Insert_Result>("usp_QueueCIAudit2Result_Insert", queueAuditIdParameter, auditInsureStatusIdParameter, auditInsureRemarkParameter, auditInsureConsiderStatusIdParameter, auditInsureConsiderRemarkParameter, audit2CreatedByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAuditFullDetailByQueueAuditId_Select_Result> usp_QueueCIAuditFullDetailByQueueAuditId_Select(Nullable<int> queueAuditId)
        {
            var queueAuditIdParameter = queueAuditId.HasValue ?
                new ObjectParameter("QueueAuditId", queueAuditId) :
                new ObjectParameter("QueueAuditId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAuditFullDetailByQueueAuditId_Select_Result>("usp_QueueCIAuditFullDetailByQueueAuditId_Select", queueAuditIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAuditLogByQueueAuditId_Select_Result> usp_QueueCIAuditLogByQueueAuditId_Select(Nullable<int> queueAuditId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var queueAuditIdParameter = queueAuditId.HasValue ?
                new ObjectParameter("QueueAuditId", queueAuditId) :
                new ObjectParameter("QueueAuditId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAuditLogByQueueAuditId_Select_Result>("usp_QueueCIAuditLogByQueueAuditId_Select", queueAuditIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAuditLot_Select_Result> usp_QueueCIAuditLot_Select(Nullable<System.DateTime> period, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAuditLot_Select_Result>("usp_QueueCIAuditLot_Select", periodParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAuditLotReport_Select_Result> usp_QueueCIAuditLotReport_Select(Nullable<int> queueAuditLotId)
        {
            var queueAuditLotIdParameter = queueAuditLotId.HasValue ?
                new ObjectParameter("QueueAuditLotId", queueAuditLotId) :
                new ObjectParameter("QueueAuditLotId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAuditLotReport_Select_Result>("usp_QueueCIAuditLotReport_Select", queueAuditLotIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAuditStatus_Select_Result> usp_QueueCIAuditStatus_Select(Nullable<int> queueAuditStatusId)
        {
            var queueAuditStatusIdParameter = queueAuditStatusId.HasValue ?
                new ObjectParameter("QueueAuditStatusId", queueAuditStatusId) :
                new ObjectParameter("QueueAuditStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAuditStatus_Select_Result>("usp_QueueCIAuditStatus_Select", queueAuditStatusIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIStatusALL_Update_Result> usp_QueueCIStatusALL_Update(string applicationCode, string insuredName, string payerName, Nullable<System.DateTime> period, Nullable<int> areaManagerAuditUserId, string queueStatusIdList, Nullable<int> createdByUserId)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var insuredNameParameter = insuredName != null ?
                new ObjectParameter("InsuredName", insuredName) :
                new ObjectParameter("InsuredName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var areaManagerAuditUserIdParameter = areaManagerAuditUserId.HasValue ?
                new ObjectParameter("AreaManagerAuditUserId", areaManagerAuditUserId) :
                new ObjectParameter("AreaManagerAuditUserId", typeof(int));
    
            var queueStatusIdListParameter = queueStatusIdList != null ?
                new ObjectParameter("QueueStatusIdList", queueStatusIdList) :
                new ObjectParameter("QueueStatusIdList", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIStatusALL_Update_Result>("usp_QueueCIStatusALL_Update", applicationCodeParameter, insuredNameParameter, payerNameParameter, periodParameter, areaManagerAuditUserIdParameter, queueStatusIdListParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIStatusByQueueAuditId_Update_Result> usp_QueueCIStatusByQueueAuditId_Update(Nullable<int> queueAuditId, Nullable<int> createdByUserId)
        {
            var queueAuditIdParameter = queueAuditId.HasValue ?
                new ObjectParameter("QueueAuditId", queueAuditId) :
                new ObjectParameter("QueueAuditId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIStatusByQueueAuditId_Update_Result>("usp_QueueCIStatusByQueueAuditId_Update", queueAuditIdParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAuditAssign_Select_Result> usp_QueueCIAuditAssign_Select(Nullable<int> areaId, Nullable<int> branchId, string applicationCode, Nullable<int> queueAuditStatusId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var queueAuditStatusIdParameter = queueAuditStatusId.HasValue ?
                new ObjectParameter("QueueAuditStatusId", queueAuditStatusId) :
                new ObjectParameter("QueueAuditStatusId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAuditAssign_Select_Result>("usp_QueueCIAuditAssign_Select", areaIdParameter, branchIdParameter, applicationCodeParameter, queueAuditStatusIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAuditInsure_Select_Result> usp_QueueCIAuditInsure_Select(string applicationCode, string insuredName, string payerName, Nullable<System.DateTime> period, Nullable<int> auditCIStatusId, Nullable<int> auditInsureStatusId, string auditInsureConsiderStatusIdList, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var insuredNameParameter = insuredName != null ?
                new ObjectParameter("InsuredName", insuredName) :
                new ObjectParameter("InsuredName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var auditCIStatusIdParameter = auditCIStatusId.HasValue ?
                new ObjectParameter("AuditCIStatusId", auditCIStatusId) :
                new ObjectParameter("AuditCIStatusId", typeof(int));
    
            var auditInsureStatusIdParameter = auditInsureStatusId.HasValue ?
                new ObjectParameter("AuditInsureStatusId", auditInsureStatusId) :
                new ObjectParameter("AuditInsureStatusId", typeof(int));
    
            var auditInsureConsiderStatusIdListParameter = auditInsureConsiderStatusIdList != null ?
                new ObjectParameter("AuditInsureConsiderStatusIdList", auditInsureConsiderStatusIdList) :
                new ObjectParameter("AuditInsureConsiderStatusIdList", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAuditInsure_Select_Result>("usp_QueueCIAuditInsure_Select", applicationCodeParameter, insuredNameParameter, payerNameParameter, periodParameter, auditCIStatusIdParameter, auditInsureStatusIdParameter, auditInsureConsiderStatusIdListParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAuditListAssign_Update_Result> usp_QueueCIAuditListAssign_Update(string queueAuditIdList, Nullable<int> toAreaManagerUserId, Nullable<int> createdByUserId)
        {
            var queueAuditIdListParameter = queueAuditIdList != null ?
                new ObjectParameter("QueueAuditIdList", queueAuditIdList) :
                new ObjectParameter("QueueAuditIdList", typeof(string));
    
            var toAreaManagerUserIdParameter = toAreaManagerUserId.HasValue ?
                new ObjectParameter("ToAreaManagerUserId", toAreaManagerUserId) :
                new ObjectParameter("ToAreaManagerUserId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAuditListAssign_Update_Result>("usp_QueueCIAuditListAssign_Update", queueAuditIdListParameter, toAreaManagerUserIdParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAuditLot_Insert_Result> usp_QueueCIAuditLot_Insert(Nullable<System.DateTime> period, Nullable<int> createdByUserId)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAuditLot_Insert_Result>("usp_QueueCIAuditLot_Insert", periodParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_AuditCIStatus_Select_Result> usp_AuditCIStatus_Select(Nullable<int> auditCIStatusId)
        {
            var auditCIStatusIdParameter = auditCIStatusId.HasValue ?
                new ObjectParameter("AuditCIStatusId", auditCIStatusId) :
                new ObjectParameter("AuditCIStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AuditCIStatus_Select_Result>("usp_AuditCIStatus_Select", auditCIStatusIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAuditInsureCloseReport_Select_Result> usp_QueueCIAuditInsureCloseReport_Select(Nullable<System.DateTime> period)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAuditInsureCloseReport_Select_Result>("usp_QueueCIAuditInsureCloseReport_Select", periodParameter);
        }
    
        public virtual ObjectResult<usp_CallStatusCI_Select_Result1> usp_CallStatusCI_Select(Nullable<int> callStatusId)
        {
            var callStatusIdParameter = callStatusId.HasValue ?
                new ObjectParameter("CallStatusId", callStatusId) :
                new ObjectParameter("CallStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CallStatusCI_Select_Result1>("usp_CallStatusCI_Select", callStatusIdParameter);
        }
    
        public virtual ObjectResult<usp_pvQueueCIQCUser_Select_Result> usp_pvQueueCIQCUser_Select(Nullable<System.DateTime> period, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pvQueueCIQCUser_Select_Result>("usp_pvQueueCIQCUser_Select", periodParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QCTeam_Select_Result> usp_QCTeam_Select(string searchDetail)
        {
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QCTeam_Select_Result>("usp_QCTeam_Select", searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_QCUser_Insert_Result> usp_QCUser_Insert(Nullable<int> productGroupId, Nullable<int> userId, Nullable<int> createdById)
        {
            var productGroupIdParameter = productGroupId.HasValue ?
                new ObjectParameter("ProductGroupId", productGroupId) :
                new ObjectParameter("ProductGroupId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var createdByIdParameter = createdById.HasValue ?
                new ObjectParameter("CreatedById", createdById) :
                new ObjectParameter("CreatedById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QCUser_Insert_Result>("usp_QCUser_Insert", productGroupIdParameter, userIdParameter, createdByIdParameter);
        }
    
        public virtual ObjectResult<usp_QCUser_Select_Result> usp_QCUser_Select(Nullable<int> productGroupId, string searchDetail, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var productGroupIdParameter = productGroupId.HasValue ?
                new ObjectParameter("ProductGroupId", productGroupId) :
                new ObjectParameter("ProductGroupId", typeof(int));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QCUser_Select_Result>("usp_QCUser_Select", productGroupIdParameter, searchDetailParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QCUserById_Select_Result> usp_QCUserById_Select(Nullable<int> qCUserId)
        {
            var qCUserIdParameter = qCUserId.HasValue ?
                new ObjectParameter("QCUserId", qCUserId) :
                new ObjectParameter("QCUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QCUserById_Select_Result>("usp_QCUserById_Select", qCUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QCUserSetIsActiveById_Update_Result> usp_QCUserSetIsActiveById_Update(Nullable<int> qCUserId, Nullable<bool> setIsActive, Nullable<int> updatedById)
        {
            var qCUserIdParameter = qCUserId.HasValue ?
                new ObjectParameter("QCUserId", qCUserId) :
                new ObjectParameter("QCUserId", typeof(int));
    
            var setIsActiveParameter = setIsActive.HasValue ?
                new ObjectParameter("SetIsActive", setIsActive) :
                new ObjectParameter("SetIsActive", typeof(bool));
    
            var updatedByIdParameter = updatedById.HasValue ?
                new ObjectParameter("UpdatedById", updatedById) :
                new ObjectParameter("UpdatedById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QCUserSetIsActiveById_Update_Result>("usp_QCUserSetIsActiveById_Update", qCUserIdParameter, setIsActiveParameter, updatedByIdParameter);
        }
    
        public virtual ObjectResult<usp_BranchByAreaId_Select_Result> usp_BranchByAreaId_Select(Nullable<int> areaId)
        {
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BranchByAreaId_Select_Result>("usp_BranchByAreaId_Select", areaIdParameter);
        }
    
        public virtual ObjectResult<usp_QCUserList_Select_Result> usp_QCUserList_Select(Nullable<int> productGroupId, string searchDetail)
        {
            var productGroupIdParameter = productGroupId.HasValue ?
                new ObjectParameter("ProductGroupId", productGroupId) :
                new ObjectParameter("ProductGroupId", typeof(int));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QCUserList_Select_Result>("usp_QCUserList_Select", productGroupIdParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAuditAssignV2_Select_Result> usp_QueueCIAuditAssignV2_Select(string applicationCode, Nullable<int> branchId, Nullable<int> assignToUserId, string customerName, string payerName, string payerPhone, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var payerPhoneParameter = payerPhone != null ?
                new ObjectParameter("PayerPhone", payerPhone) :
                new ObjectParameter("PayerPhone", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAuditAssignV2_Select_Result>("usp_QueueCIAuditAssignV2_Select", applicationCodeParameter, branchIdParameter, assignToUserIdParameter, customerNameParameter, payerNameParameter, payerPhoneParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAuditListAssignV2_Update_Result> usp_QueueCIAuditListAssignV2_Update(string queueAuditId, Nullable<int> assignToUserId, Nullable<int> createdByUserId)
        {
            var queueAuditIdParameter = queueAuditId != null ?
                new ObjectParameter("QueueAuditId", queueAuditId) :
                new ObjectParameter("QueueAuditId", typeof(string));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAuditListAssignV2_Update_Result>("usp_QueueCIAuditListAssignV2_Update", queueAuditIdParameter, assignToUserIdParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_ApplicationCIInsuredRelateByApplicationCode_Select_Result> usp_ApplicationCIInsuredRelateByApplicationCode_Select(string applicationCode, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ApplicationCIInsuredRelateByApplicationCode_Select_Result>("usp_ApplicationCIInsuredRelateByApplicationCode_Select", applicationCodeParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_NotAuditedCause_Select_Result> usp_NotAuditedCause_Select(Nullable<int> notAuditedCauseId, string notAuditedCauseDetail)
        {
            var notAuditedCauseIdParameter = notAuditedCauseId.HasValue ?
                new ObjectParameter("NotAuditedCauseId", notAuditedCauseId) :
                new ObjectParameter("NotAuditedCauseId", typeof(int));
    
            var notAuditedCauseDetailParameter = notAuditedCauseDetail != null ?
                new ObjectParameter("NotAuditedCauseDetail", notAuditedCauseDetail) :
                new ObjectParameter("NotAuditedCauseDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_NotAuditedCause_Select_Result>("usp_NotAuditedCause_Select", notAuditedCauseIdParameter, notAuditedCauseDetailParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAudit1ResultV2_Insert_Result> usp_QueueCIAudit1ResultV2_Insert(Nullable<int> queueAuditId, Nullable<int> queueAuditStatusId, Nullable<int> notAuditedCauseId, Nullable<int> callStatusId, string auditRemark, Nullable<int> saleMethodTypeId, string saleMethodTypeRemark, Nullable<int> saleServiceTypeId, string saleServiceTypeRemark, Nullable<bool> isReceivedInsurance, Nullable<int> receivingInsuranceTypeId, Nullable<bool> insuranceInsuredIsValid, string insuranceInsuredRemark, Nullable<int> underwriteByUserId, string underwriteByUserRemark, Nullable<bool> addLINEIsSuccess, Nullable<int> feedbackRate, string feedbackRemark, Nullable<bool> serviceResultIsIssue, string serviceResultRemark, Nullable<int> underwritingBehaviorTypeId, string underwritingBehaviorRemark, Nullable<bool> insuredNameIsValid, string insuredNameRemark, Nullable<bool> payerNameIsValid, string payerNameRemark, Nullable<bool> birthDateIsValid, string birthDateRemark, Nullable<bool> weightHeightIsValid, string weightHeightRemark, Nullable<bool> isAllergyHistory, string allergyHistoryRemark, Nullable<bool> isCriticalIllnessHistory, string criticalIllnessHistoryRemark, Nullable<bool> isAccidentHistory, string accidentHistoryRemark, Nullable<bool> isSurgeryHistory, string surgeryHistoryRemark, Nullable<bool> isHealthCheckHistory, string healthCheckHistoryRemark, Nullable<bool> isChronicDiseaseHistory, string chronicDiseaseHistoryRemark, Nullable<bool> isMedicalLatestHistory, string medicalLatestHistoryRemark, Nullable<bool> isSmokingHistory, string smokingHistoryRemark, Nullable<bool> isDrinkingHistory, string drinkingHistoryRemark, Nullable<bool> isVisionValue, string visionValueRemark, Nullable<bool> isHearingValue, string hearingValueRemark, Nullable<bool> isPregnantHistory, string pregnantHistoryRemark, Nullable<bool> isOtherHealthHistory, string otherHealthHistoryRemark, Nullable<bool> payerOccupationIsValid, string payerOccupationRemark, Nullable<bool> payerBuildingNameIsValid, string payerBuildingNameRemark, Nullable<bool> productIsValid, string productRemark, Nullable<bool> premiumIsValid, string premiumRemark, Nullable<bool> periodTypeIsValid, string periodTypeRemark, Nullable<bool> payMethodTypeIsValid, string payMethodTypeRemark, Nullable<int> auditCIStatusId, Nullable<int> auditCISpecifyStatusId, string auditCIRemark, string auditOtherCIRemark, Nullable<int> auditQCUserId)
        {
            var queueAuditIdParameter = queueAuditId.HasValue ?
                new ObjectParameter("QueueAuditId", queueAuditId) :
                new ObjectParameter("QueueAuditId", typeof(int));
    
            var queueAuditStatusIdParameter = queueAuditStatusId.HasValue ?
                new ObjectParameter("QueueAuditStatusId", queueAuditStatusId) :
                new ObjectParameter("QueueAuditStatusId", typeof(int));
    
            var notAuditedCauseIdParameter = notAuditedCauseId.HasValue ?
                new ObjectParameter("NotAuditedCauseId", notAuditedCauseId) :
                new ObjectParameter("NotAuditedCauseId", typeof(int));
    
            var callStatusIdParameter = callStatusId.HasValue ?
                new ObjectParameter("CallStatusId", callStatusId) :
                new ObjectParameter("CallStatusId", typeof(int));
    
            var auditRemarkParameter = auditRemark != null ?
                new ObjectParameter("AuditRemark", auditRemark) :
                new ObjectParameter("AuditRemark", typeof(string));
    
            var saleMethodTypeIdParameter = saleMethodTypeId.HasValue ?
                new ObjectParameter("SaleMethodTypeId", saleMethodTypeId) :
                new ObjectParameter("SaleMethodTypeId", typeof(int));
    
            var saleMethodTypeRemarkParameter = saleMethodTypeRemark != null ?
                new ObjectParameter("SaleMethodTypeRemark", saleMethodTypeRemark) :
                new ObjectParameter("SaleMethodTypeRemark", typeof(string));
    
            var saleServiceTypeIdParameter = saleServiceTypeId.HasValue ?
                new ObjectParameter("SaleServiceTypeId", saleServiceTypeId) :
                new ObjectParameter("SaleServiceTypeId", typeof(int));
    
            var saleServiceTypeRemarkParameter = saleServiceTypeRemark != null ?
                new ObjectParameter("SaleServiceTypeRemark", saleServiceTypeRemark) :
                new ObjectParameter("SaleServiceTypeRemark", typeof(string));
    
            var isReceivedInsuranceParameter = isReceivedInsurance.HasValue ?
                new ObjectParameter("IsReceivedInsurance", isReceivedInsurance) :
                new ObjectParameter("IsReceivedInsurance", typeof(bool));
    
            var receivingInsuranceTypeIdParameter = receivingInsuranceTypeId.HasValue ?
                new ObjectParameter("ReceivingInsuranceTypeId", receivingInsuranceTypeId) :
                new ObjectParameter("ReceivingInsuranceTypeId", typeof(int));
    
            var insuranceInsuredIsValidParameter = insuranceInsuredIsValid.HasValue ?
                new ObjectParameter("InsuranceInsuredIsValid", insuranceInsuredIsValid) :
                new ObjectParameter("InsuranceInsuredIsValid", typeof(bool));
    
            var insuranceInsuredRemarkParameter = insuranceInsuredRemark != null ?
                new ObjectParameter("InsuranceInsuredRemark", insuranceInsuredRemark) :
                new ObjectParameter("InsuranceInsuredRemark", typeof(string));
    
            var underwriteByUserIdParameter = underwriteByUserId.HasValue ?
                new ObjectParameter("UnderwriteByUserId", underwriteByUserId) :
                new ObjectParameter("UnderwriteByUserId", typeof(int));
    
            var underwriteByUserRemarkParameter = underwriteByUserRemark != null ?
                new ObjectParameter("UnderwriteByUserRemark", underwriteByUserRemark) :
                new ObjectParameter("UnderwriteByUserRemark", typeof(string));
    
            var addLINEIsSuccessParameter = addLINEIsSuccess.HasValue ?
                new ObjectParameter("AddLINEIsSuccess", addLINEIsSuccess) :
                new ObjectParameter("AddLINEIsSuccess", typeof(bool));
    
            var feedbackRateParameter = feedbackRate.HasValue ?
                new ObjectParameter("FeedbackRate", feedbackRate) :
                new ObjectParameter("FeedbackRate", typeof(int));
    
            var feedbackRemarkParameter = feedbackRemark != null ?
                new ObjectParameter("FeedbackRemark", feedbackRemark) :
                new ObjectParameter("FeedbackRemark", typeof(string));
    
            var serviceResultIsIssueParameter = serviceResultIsIssue.HasValue ?
                new ObjectParameter("ServiceResultIsIssue", serviceResultIsIssue) :
                new ObjectParameter("ServiceResultIsIssue", typeof(bool));
    
            var serviceResultRemarkParameter = serviceResultRemark != null ?
                new ObjectParameter("ServiceResultRemark", serviceResultRemark) :
                new ObjectParameter("ServiceResultRemark", typeof(string));
    
            var underwritingBehaviorTypeIdParameter = underwritingBehaviorTypeId.HasValue ?
                new ObjectParameter("UnderwritingBehaviorTypeId", underwritingBehaviorTypeId) :
                new ObjectParameter("UnderwritingBehaviorTypeId", typeof(int));
    
            var underwritingBehaviorRemarkParameter = underwritingBehaviorRemark != null ?
                new ObjectParameter("UnderwritingBehaviorRemark", underwritingBehaviorRemark) :
                new ObjectParameter("UnderwritingBehaviorRemark", typeof(string));
    
            var insuredNameIsValidParameter = insuredNameIsValid.HasValue ?
                new ObjectParameter("InsuredNameIsValid", insuredNameIsValid) :
                new ObjectParameter("InsuredNameIsValid", typeof(bool));
    
            var insuredNameRemarkParameter = insuredNameRemark != null ?
                new ObjectParameter("InsuredNameRemark", insuredNameRemark) :
                new ObjectParameter("InsuredNameRemark", typeof(string));
    
            var payerNameIsValidParameter = payerNameIsValid.HasValue ?
                new ObjectParameter("PayerNameIsValid", payerNameIsValid) :
                new ObjectParameter("PayerNameIsValid", typeof(bool));
    
            var payerNameRemarkParameter = payerNameRemark != null ?
                new ObjectParameter("PayerNameRemark", payerNameRemark) :
                new ObjectParameter("PayerNameRemark", typeof(string));
    
            var birthDateIsValidParameter = birthDateIsValid.HasValue ?
                new ObjectParameter("BirthDateIsValid", birthDateIsValid) :
                new ObjectParameter("BirthDateIsValid", typeof(bool));
    
            var birthDateRemarkParameter = birthDateRemark != null ?
                new ObjectParameter("BirthDateRemark", birthDateRemark) :
                new ObjectParameter("BirthDateRemark", typeof(string));
    
            var weightHeightIsValidParameter = weightHeightIsValid.HasValue ?
                new ObjectParameter("WeightHeightIsValid", weightHeightIsValid) :
                new ObjectParameter("WeightHeightIsValid", typeof(bool));
    
            var weightHeightRemarkParameter = weightHeightRemark != null ?
                new ObjectParameter("WeightHeightRemark", weightHeightRemark) :
                new ObjectParameter("WeightHeightRemark", typeof(string));
    
            var isAllergyHistoryParameter = isAllergyHistory.HasValue ?
                new ObjectParameter("IsAllergyHistory", isAllergyHistory) :
                new ObjectParameter("IsAllergyHistory", typeof(bool));
    
            var allergyHistoryRemarkParameter = allergyHistoryRemark != null ?
                new ObjectParameter("AllergyHistoryRemark", allergyHistoryRemark) :
                new ObjectParameter("AllergyHistoryRemark", typeof(string));
    
            var isCriticalIllnessHistoryParameter = isCriticalIllnessHistory.HasValue ?
                new ObjectParameter("IsCriticalIllnessHistory", isCriticalIllnessHistory) :
                new ObjectParameter("IsCriticalIllnessHistory", typeof(bool));
    
            var criticalIllnessHistoryRemarkParameter = criticalIllnessHistoryRemark != null ?
                new ObjectParameter("CriticalIllnessHistoryRemark", criticalIllnessHistoryRemark) :
                new ObjectParameter("CriticalIllnessHistoryRemark", typeof(string));
    
            var isAccidentHistoryParameter = isAccidentHistory.HasValue ?
                new ObjectParameter("IsAccidentHistory", isAccidentHistory) :
                new ObjectParameter("IsAccidentHistory", typeof(bool));
    
            var accidentHistoryRemarkParameter = accidentHistoryRemark != null ?
                new ObjectParameter("AccidentHistoryRemark", accidentHistoryRemark) :
                new ObjectParameter("AccidentHistoryRemark", typeof(string));
    
            var isSurgeryHistoryParameter = isSurgeryHistory.HasValue ?
                new ObjectParameter("IsSurgeryHistory", isSurgeryHistory) :
                new ObjectParameter("IsSurgeryHistory", typeof(bool));
    
            var surgeryHistoryRemarkParameter = surgeryHistoryRemark != null ?
                new ObjectParameter("SurgeryHistoryRemark", surgeryHistoryRemark) :
                new ObjectParameter("SurgeryHistoryRemark", typeof(string));
    
            var isHealthCheckHistoryParameter = isHealthCheckHistory.HasValue ?
                new ObjectParameter("IsHealthCheckHistory", isHealthCheckHistory) :
                new ObjectParameter("IsHealthCheckHistory", typeof(bool));
    
            var healthCheckHistoryRemarkParameter = healthCheckHistoryRemark != null ?
                new ObjectParameter("HealthCheckHistoryRemark", healthCheckHistoryRemark) :
                new ObjectParameter("HealthCheckHistoryRemark", typeof(string));
    
            var isChronicDiseaseHistoryParameter = isChronicDiseaseHistory.HasValue ?
                new ObjectParameter("IsChronicDiseaseHistory", isChronicDiseaseHistory) :
                new ObjectParameter("IsChronicDiseaseHistory", typeof(bool));
    
            var chronicDiseaseHistoryRemarkParameter = chronicDiseaseHistoryRemark != null ?
                new ObjectParameter("ChronicDiseaseHistoryRemark", chronicDiseaseHistoryRemark) :
                new ObjectParameter("ChronicDiseaseHistoryRemark", typeof(string));
    
            var isMedicalLatestHistoryParameter = isMedicalLatestHistory.HasValue ?
                new ObjectParameter("IsMedicalLatestHistory", isMedicalLatestHistory) :
                new ObjectParameter("IsMedicalLatestHistory", typeof(bool));
    
            var medicalLatestHistoryRemarkParameter = medicalLatestHistoryRemark != null ?
                new ObjectParameter("MedicalLatestHistoryRemark", medicalLatestHistoryRemark) :
                new ObjectParameter("MedicalLatestHistoryRemark", typeof(string));
    
            var isSmokingHistoryParameter = isSmokingHistory.HasValue ?
                new ObjectParameter("IsSmokingHistory", isSmokingHistory) :
                new ObjectParameter("IsSmokingHistory", typeof(bool));
    
            var smokingHistoryRemarkParameter = smokingHistoryRemark != null ?
                new ObjectParameter("SmokingHistoryRemark", smokingHistoryRemark) :
                new ObjectParameter("SmokingHistoryRemark", typeof(string));
    
            var isDrinkingHistoryParameter = isDrinkingHistory.HasValue ?
                new ObjectParameter("IsDrinkingHistory", isDrinkingHistory) :
                new ObjectParameter("IsDrinkingHistory", typeof(bool));
    
            var drinkingHistoryRemarkParameter = drinkingHistoryRemark != null ?
                new ObjectParameter("DrinkingHistoryRemark", drinkingHistoryRemark) :
                new ObjectParameter("DrinkingHistoryRemark", typeof(string));
    
            var isVisionValueParameter = isVisionValue.HasValue ?
                new ObjectParameter("IsVisionValue", isVisionValue) :
                new ObjectParameter("IsVisionValue", typeof(bool));
    
            var visionValueRemarkParameter = visionValueRemark != null ?
                new ObjectParameter("VisionValueRemark", visionValueRemark) :
                new ObjectParameter("VisionValueRemark", typeof(string));
    
            var isHearingValueParameter = isHearingValue.HasValue ?
                new ObjectParameter("IsHearingValue", isHearingValue) :
                new ObjectParameter("IsHearingValue", typeof(bool));
    
            var hearingValueRemarkParameter = hearingValueRemark != null ?
                new ObjectParameter("HearingValueRemark", hearingValueRemark) :
                new ObjectParameter("HearingValueRemark", typeof(string));
    
            var isPregnantHistoryParameter = isPregnantHistory.HasValue ?
                new ObjectParameter("IsPregnantHistory", isPregnantHistory) :
                new ObjectParameter("IsPregnantHistory", typeof(bool));
    
            var pregnantHistoryRemarkParameter = pregnantHistoryRemark != null ?
                new ObjectParameter("PregnantHistoryRemark", pregnantHistoryRemark) :
                new ObjectParameter("PregnantHistoryRemark", typeof(string));
    
            var isOtherHealthHistoryParameter = isOtherHealthHistory.HasValue ?
                new ObjectParameter("IsOtherHealthHistory", isOtherHealthHistory) :
                new ObjectParameter("IsOtherHealthHistory", typeof(bool));
    
            var otherHealthHistoryRemarkParameter = otherHealthHistoryRemark != null ?
                new ObjectParameter("OtherHealthHistoryRemark", otherHealthHistoryRemark) :
                new ObjectParameter("OtherHealthHistoryRemark", typeof(string));
    
            var payerOccupationIsValidParameter = payerOccupationIsValid.HasValue ?
                new ObjectParameter("PayerOccupationIsValid", payerOccupationIsValid) :
                new ObjectParameter("PayerOccupationIsValid", typeof(bool));
    
            var payerOccupationRemarkParameter = payerOccupationRemark != null ?
                new ObjectParameter("PayerOccupationRemark", payerOccupationRemark) :
                new ObjectParameter("PayerOccupationRemark", typeof(string));
    
            var payerBuildingNameIsValidParameter = payerBuildingNameIsValid.HasValue ?
                new ObjectParameter("PayerBuildingNameIsValid", payerBuildingNameIsValid) :
                new ObjectParameter("PayerBuildingNameIsValid", typeof(bool));
    
            var payerBuildingNameRemarkParameter = payerBuildingNameRemark != null ?
                new ObjectParameter("PayerBuildingNameRemark", payerBuildingNameRemark) :
                new ObjectParameter("PayerBuildingNameRemark", typeof(string));
    
            var productIsValidParameter = productIsValid.HasValue ?
                new ObjectParameter("ProductIsValid", productIsValid) :
                new ObjectParameter("ProductIsValid", typeof(bool));
    
            var productRemarkParameter = productRemark != null ?
                new ObjectParameter("ProductRemark", productRemark) :
                new ObjectParameter("ProductRemark", typeof(string));
    
            var premiumIsValidParameter = premiumIsValid.HasValue ?
                new ObjectParameter("PremiumIsValid", premiumIsValid) :
                new ObjectParameter("PremiumIsValid", typeof(bool));
    
            var premiumRemarkParameter = premiumRemark != null ?
                new ObjectParameter("PremiumRemark", premiumRemark) :
                new ObjectParameter("PremiumRemark", typeof(string));
    
            var periodTypeIsValidParameter = periodTypeIsValid.HasValue ?
                new ObjectParameter("PeriodTypeIsValid", periodTypeIsValid) :
                new ObjectParameter("PeriodTypeIsValid", typeof(bool));
    
            var periodTypeRemarkParameter = periodTypeRemark != null ?
                new ObjectParameter("PeriodTypeRemark", periodTypeRemark) :
                new ObjectParameter("PeriodTypeRemark", typeof(string));
    
            var payMethodTypeIsValidParameter = payMethodTypeIsValid.HasValue ?
                new ObjectParameter("PayMethodTypeIsValid", payMethodTypeIsValid) :
                new ObjectParameter("PayMethodTypeIsValid", typeof(bool));
    
            var payMethodTypeRemarkParameter = payMethodTypeRemark != null ?
                new ObjectParameter("PayMethodTypeRemark", payMethodTypeRemark) :
                new ObjectParameter("PayMethodTypeRemark", typeof(string));
    
            var auditCIStatusIdParameter = auditCIStatusId.HasValue ?
                new ObjectParameter("AuditCIStatusId", auditCIStatusId) :
                new ObjectParameter("AuditCIStatusId", typeof(int));
    
            var auditCISpecifyStatusIdParameter = auditCISpecifyStatusId.HasValue ?
                new ObjectParameter("AuditCISpecifyStatusId", auditCISpecifyStatusId) :
                new ObjectParameter("AuditCISpecifyStatusId", typeof(int));
    
            var auditCIRemarkParameter = auditCIRemark != null ?
                new ObjectParameter("AuditCIRemark", auditCIRemark) :
                new ObjectParameter("AuditCIRemark", typeof(string));
    
            var auditOtherCIRemarkParameter = auditOtherCIRemark != null ?
                new ObjectParameter("AuditOtherCIRemark", auditOtherCIRemark) :
                new ObjectParameter("AuditOtherCIRemark", typeof(string));
    
            var auditQCUserIdParameter = auditQCUserId.HasValue ?
                new ObjectParameter("AuditQCUserId", auditQCUserId) :
                new ObjectParameter("AuditQCUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAudit1ResultV2_Insert_Result>("usp_QueueCIAudit1ResultV2_Insert", queueAuditIdParameter, queueAuditStatusIdParameter, notAuditedCauseIdParameter, callStatusIdParameter, auditRemarkParameter, saleMethodTypeIdParameter, saleMethodTypeRemarkParameter, saleServiceTypeIdParameter, saleServiceTypeRemarkParameter, isReceivedInsuranceParameter, receivingInsuranceTypeIdParameter, insuranceInsuredIsValidParameter, insuranceInsuredRemarkParameter, underwriteByUserIdParameter, underwriteByUserRemarkParameter, addLINEIsSuccessParameter, feedbackRateParameter, feedbackRemarkParameter, serviceResultIsIssueParameter, serviceResultRemarkParameter, underwritingBehaviorTypeIdParameter, underwritingBehaviorRemarkParameter, insuredNameIsValidParameter, insuredNameRemarkParameter, payerNameIsValidParameter, payerNameRemarkParameter, birthDateIsValidParameter, birthDateRemarkParameter, weightHeightIsValidParameter, weightHeightRemarkParameter, isAllergyHistoryParameter, allergyHistoryRemarkParameter, isCriticalIllnessHistoryParameter, criticalIllnessHistoryRemarkParameter, isAccidentHistoryParameter, accidentHistoryRemarkParameter, isSurgeryHistoryParameter, surgeryHistoryRemarkParameter, isHealthCheckHistoryParameter, healthCheckHistoryRemarkParameter, isChronicDiseaseHistoryParameter, chronicDiseaseHistoryRemarkParameter, isMedicalLatestHistoryParameter, medicalLatestHistoryRemarkParameter, isSmokingHistoryParameter, smokingHistoryRemarkParameter, isDrinkingHistoryParameter, drinkingHistoryRemarkParameter, isVisionValueParameter, visionValueRemarkParameter, isHearingValueParameter, hearingValueRemarkParameter, isPregnantHistoryParameter, pregnantHistoryRemarkParameter, isOtherHealthHistoryParameter, otherHealthHistoryRemarkParameter, payerOccupationIsValidParameter, payerOccupationRemarkParameter, payerBuildingNameIsValidParameter, payerBuildingNameRemarkParameter, productIsValidParameter, productRemarkParameter, premiumIsValidParameter, premiumRemarkParameter, periodTypeIsValidParameter, periodTypeRemarkParameter, payMethodTypeIsValidParameter, payMethodTypeRemarkParameter, auditCIStatusIdParameter, auditCISpecifyStatusIdParameter, auditCIRemarkParameter, auditOtherCIRemarkParameter, auditQCUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAuditV2_Select_Result> usp_QueueCIAuditV2_Select(string applicationCode, string insuredName, string payerName, Nullable<System.DateTime> period, Nullable<int> assignToUserId, string queueStatusIdList, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var insuredNameParameter = insuredName != null ?
                new ObjectParameter("InsuredName", insuredName) :
                new ObjectParameter("InsuredName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var queueStatusIdListParameter = queueStatusIdList != null ?
                new ObjectParameter("QueueStatusIdList", queueStatusIdList) :
                new ObjectParameter("QueueStatusIdList", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAuditV2_Select_Result>("usp_QueueCIAuditV2_Select", applicationCodeParameter, insuredNameParameter, payerNameParameter, periodParameter, assignToUserIdParameter, queueStatusIdListParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_SaleMethodType_Select_Result> usp_SaleMethodType_Select(Nullable<int> saleMethodTypeId, string saleMethodTypeDetail)
        {
            var saleMethodTypeIdParameter = saleMethodTypeId.HasValue ?
                new ObjectParameter("SaleMethodTypeId", saleMethodTypeId) :
                new ObjectParameter("SaleMethodTypeId", typeof(int));
    
            var saleMethodTypeDetailParameter = saleMethodTypeDetail != null ?
                new ObjectParameter("SaleMethodTypeDetail", saleMethodTypeDetail) :
                new ObjectParameter("SaleMethodTypeDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SaleMethodType_Select_Result>("usp_SaleMethodType_Select", saleMethodTypeIdParameter, saleMethodTypeDetailParameter);
        }
    
        public virtual ObjectResult<usp_SaleServiceType_Select_Result> usp_SaleServiceType_Select(Nullable<int> saleServiceTypeId, string saleServiceTypeDetail)
        {
            var saleServiceTypeIdParameter = saleServiceTypeId.HasValue ?
                new ObjectParameter("SaleServiceTypeId", saleServiceTypeId) :
                new ObjectParameter("SaleServiceTypeId", typeof(int));
    
            var saleServiceTypeDetailParameter = saleServiceTypeDetail != null ?
                new ObjectParameter("SaleServiceTypeDetail", saleServiceTypeDetail) :
                new ObjectParameter("SaleServiceTypeDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SaleServiceType_Select_Result>("usp_SaleServiceType_Select", saleServiceTypeIdParameter, saleServiceTypeDetailParameter);
        }
    
        public virtual ObjectResult<usp_UnderwritingBehaviorType_Select_Result> usp_UnderwritingBehaviorType_Select(Nullable<int> underwritingBehaviorTypeId, string underwritingBehaviorTypeDetail)
        {
            var underwritingBehaviorTypeIdParameter = underwritingBehaviorTypeId.HasValue ?
                new ObjectParameter("UnderwritingBehaviorTypeId", underwritingBehaviorTypeId) :
                new ObjectParameter("UnderwritingBehaviorTypeId", typeof(int));
    
            var underwritingBehaviorTypeDetailParameter = underwritingBehaviorTypeDetail != null ?
                new ObjectParameter("UnderwritingBehaviorTypeDetail", underwritingBehaviorTypeDetail) :
                new ObjectParameter("UnderwritingBehaviorTypeDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UnderwritingBehaviorType_Select_Result>("usp_UnderwritingBehaviorType_Select", underwritingBehaviorTypeIdParameter, underwritingBehaviorTypeDetailParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAudit2ResultV2_Insert_Result> usp_QueueCIAudit2ResultV2_Insert(Nullable<int> queueAuditId, Nullable<int> auditInsureStatusId, Nullable<int> auditInsureConsiderStatusId, string auditInsureConsiderRemark, Nullable<bool> auditInsureClose, string auditInsureCloseRemark, Nullable<int> auditInsureUserId, Nullable<bool> isSendMemo)
        {
            var queueAuditIdParameter = queueAuditId.HasValue ?
                new ObjectParameter("QueueAuditId", queueAuditId) :
                new ObjectParameter("QueueAuditId", typeof(int));
    
            var auditInsureStatusIdParameter = auditInsureStatusId.HasValue ?
                new ObjectParameter("AuditInsureStatusId", auditInsureStatusId) :
                new ObjectParameter("AuditInsureStatusId", typeof(int));
    
            var auditInsureConsiderStatusIdParameter = auditInsureConsiderStatusId.HasValue ?
                new ObjectParameter("AuditInsureConsiderStatusId", auditInsureConsiderStatusId) :
                new ObjectParameter("AuditInsureConsiderStatusId", typeof(int));
    
            var auditInsureConsiderRemarkParameter = auditInsureConsiderRemark != null ?
                new ObjectParameter("AuditInsureConsiderRemark", auditInsureConsiderRemark) :
                new ObjectParameter("AuditInsureConsiderRemark", typeof(string));
    
            var auditInsureCloseParameter = auditInsureClose.HasValue ?
                new ObjectParameter("AuditInsureClose", auditInsureClose) :
                new ObjectParameter("AuditInsureClose", typeof(bool));
    
            var auditInsureCloseRemarkParameter = auditInsureCloseRemark != null ?
                new ObjectParameter("AuditInsureCloseRemark", auditInsureCloseRemark) :
                new ObjectParameter("AuditInsureCloseRemark", typeof(string));
    
            var auditInsureUserIdParameter = auditInsureUserId.HasValue ?
                new ObjectParameter("AuditInsureUserId", auditInsureUserId) :
                new ObjectParameter("AuditInsureUserId", typeof(int));
    
            var isSendMemoParameter = isSendMemo.HasValue ?
                new ObjectParameter("IsSendMemo", isSendMemo) :
                new ObjectParameter("IsSendMemo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAudit2ResultV2_Insert_Result>("usp_QueueCIAudit2ResultV2_Insert", queueAuditIdParameter, auditInsureStatusIdParameter, auditInsureConsiderStatusIdParameter, auditInsureConsiderRemarkParameter, auditInsureCloseParameter, auditInsureCloseRemarkParameter, auditInsureUserIdParameter, isSendMemoParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAuditInsureCloseALL_Update_Result> usp_QueueCIAuditInsureCloseALL_Update(string queueAuditIdList, Nullable<int> createdByUserId)
        {
            var queueAuditIdListParameter = queueAuditIdList != null ?
                new ObjectParameter("QueueAuditIdList", queueAuditIdList) :
                new ObjectParameter("QueueAuditIdList", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAuditInsureCloseALL_Update_Result>("usp_QueueCIAuditInsureCloseALL_Update", queueAuditIdListParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAuditInsureCloseByQueueAuditId_Update_Result> usp_QueueCIAuditInsureCloseByQueueAuditId_Update(Nullable<int> queueAuditId, Nullable<int> createdByUserId)
        {
            var queueAuditIdParameter = queueAuditId.HasValue ?
                new ObjectParameter("QueueAuditId", queueAuditId) :
                new ObjectParameter("QueueAuditId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAuditInsureCloseByQueueAuditId_Update_Result>("usp_QueueCIAuditInsureCloseByQueueAuditId_Update", queueAuditIdParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAuditInsureV2_Select_Result> usp_QueueCIAuditInsureV2_Select(string applicationCode, string insuredName, string payerName, Nullable<System.DateTime> period, Nullable<int> auditCIStatusId, Nullable<int> auditInsureStatusId, string auditInsureConsiderStatusIdList, Nullable<bool> auditInsureClose, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var insuredNameParameter = insuredName != null ?
                new ObjectParameter("InsuredName", insuredName) :
                new ObjectParameter("InsuredName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var auditCIStatusIdParameter = auditCIStatusId.HasValue ?
                new ObjectParameter("AuditCIStatusId", auditCIStatusId) :
                new ObjectParameter("AuditCIStatusId", typeof(int));
    
            var auditInsureStatusIdParameter = auditInsureStatusId.HasValue ?
                new ObjectParameter("AuditInsureStatusId", auditInsureStatusId) :
                new ObjectParameter("AuditInsureStatusId", typeof(int));
    
            var auditInsureConsiderStatusIdListParameter = auditInsureConsiderStatusIdList != null ?
                new ObjectParameter("AuditInsureConsiderStatusIdList", auditInsureConsiderStatusIdList) :
                new ObjectParameter("AuditInsureConsiderStatusIdList", typeof(string));
    
            var auditInsureCloseParameter = auditInsureClose.HasValue ?
                new ObjectParameter("AuditInsureClose", auditInsureClose) :
                new ObjectParameter("AuditInsureClose", typeof(bool));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAuditInsureV2_Select_Result>("usp_QueueCIAuditInsureV2_Select", applicationCodeParameter, insuredNameParameter, payerNameParameter, periodParameter, auditCIStatusIdParameter, auditInsureStatusIdParameter, auditInsureConsiderStatusIdListParameter, auditInsureCloseParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAuditInsureReport_Select_Result> usp_QueueCIAuditInsureReport_Select(Nullable<System.DateTime> period)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAuditInsureReport_Select_Result>("usp_QueueCIAuditInsureReport_Select", periodParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAuditLot_Insert_v3_Result> usp_QueueCIAuditLot_Insert_v3(Nullable<System.DateTime> period, Nullable<int> createdByUserId)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAuditLot_Insert_v3_Result>("usp_QueueCIAuditLot_Insert_v3", periodParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAuditQCCloseALL_Update_Result> usp_QueueCIAuditQCCloseALL_Update(string applicationCode, string insuredName, string payerName, Nullable<System.DateTime> period, Nullable<int> areaManagerAuditUserId, string queueStatusIdList, Nullable<int> createdByUserId)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var insuredNameParameter = insuredName != null ?
                new ObjectParameter("InsuredName", insuredName) :
                new ObjectParameter("InsuredName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var areaManagerAuditUserIdParameter = areaManagerAuditUserId.HasValue ?
                new ObjectParameter("AreaManagerAuditUserId", areaManagerAuditUserId) :
                new ObjectParameter("AreaManagerAuditUserId", typeof(int));
    
            var queueStatusIdListParameter = queueStatusIdList != null ?
                new ObjectParameter("QueueStatusIdList", queueStatusIdList) :
                new ObjectParameter("QueueStatusIdList", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAuditQCCloseALL_Update_Result>("usp_QueueCIAuditQCCloseALL_Update", applicationCodeParameter, insuredNameParameter, payerNameParameter, periodParameter, areaManagerAuditUserIdParameter, queueStatusIdListParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAuditQCCloseByQueueAuditId_Update_Result> usp_QueueCIAuditQCCloseByQueueAuditId_Update(Nullable<int> queueAuditId, Nullable<int> createdByUserId)
        {
            var queueAuditIdParameter = queueAuditId.HasValue ?
                new ObjectParameter("QueueAuditId", queueAuditId) :
                new ObjectParameter("QueueAuditId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAuditQCCloseByQueueAuditId_Update_Result>("usp_QueueCIAuditQCCloseByQueueAuditId_Update", queueAuditIdParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAuditInsureReportV2_Select_Result> usp_QueueCIAuditInsureReportV2_Select(Nullable<System.DateTime> period)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAuditInsureReportV2_Select_Result>("usp_QueueCIAuditInsureReportV2_Select", periodParameter);
        }
    
        public virtual ObjectResult<usp_ReceivingInsuranceType_Select_Result> usp_ReceivingInsuranceType_Select(Nullable<int> receivingInsuranceTypeId, string receivingInsuranceTypeDetail)
        {
            var receivingInsuranceTypeIdParameter = receivingInsuranceTypeId.HasValue ?
                new ObjectParameter("ReceivingInsuranceTypeId", receivingInsuranceTypeId) :
                new ObjectParameter("ReceivingInsuranceTypeId", typeof(int));
    
            var receivingInsuranceTypeDetailParameter = receivingInsuranceTypeDetail != null ?
                new ObjectParameter("ReceivingInsuranceTypeDetail", receivingInsuranceTypeDetail) :
                new ObjectParameter("ReceivingInsuranceTypeDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ReceivingInsuranceType_Select_Result>("usp_ReceivingInsuranceType_Select", receivingInsuranceTypeIdParameter, receivingInsuranceTypeDetailParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAuditPendingCount_Select_Result> usp_QueueCIAuditPendingCount_Select(Nullable<System.DateTime> period, Nullable<int> createdByUserId)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAuditPendingCount_Select_Result>("usp_QueueCIAuditPendingCount_Select", periodParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAuditLot_Insert_v4_Result> usp_QueueCIAuditLot_Insert_v4(Nullable<System.DateTime> period, Nullable<int> createdByUserId)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAuditLot_Insert_v4_Result>("usp_QueueCIAuditLot_Insert_v4", periodParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_pvQueueCIQCUserV2_Select_Result> usp_pvQueueCIQCUserV2_Select(Nullable<int> queueAuditLotId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var queueAuditLotIdParameter = queueAuditLotId.HasValue ?
                new ObjectParameter("QueueAuditLotId", queueAuditLotId) :
                new ObjectParameter("QueueAuditLotId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pvQueueCIQCUserV2_Select_Result>("usp_pvQueueCIQCUserV2_Select", queueAuditLotIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAuditInsureDCRCount_Select_Result> usp_QueueCIAuditInsureDCRCount_Select(string applicationCode, string insuredName, string payerName, Nullable<System.DateTime> period, Nullable<int> auditCIStatusId, Nullable<int> auditInsureStatusId, string auditInsureConsiderStatusIdList, Nullable<bool> auditInsureClose)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var insuredNameParameter = insuredName != null ?
                new ObjectParameter("InsuredName", insuredName) :
                new ObjectParameter("InsuredName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var auditCIStatusIdParameter = auditCIStatusId.HasValue ?
                new ObjectParameter("AuditCIStatusId", auditCIStatusId) :
                new ObjectParameter("AuditCIStatusId", typeof(int));
    
            var auditInsureStatusIdParameter = auditInsureStatusId.HasValue ?
                new ObjectParameter("AuditInsureStatusId", auditInsureStatusId) :
                new ObjectParameter("AuditInsureStatusId", typeof(int));
    
            var auditInsureConsiderStatusIdListParameter = auditInsureConsiderStatusIdList != null ?
                new ObjectParameter("AuditInsureConsiderStatusIdList", auditInsureConsiderStatusIdList) :
                new ObjectParameter("AuditInsureConsiderStatusIdList", typeof(string));
    
            var auditInsureCloseParameter = auditInsureClose.HasValue ?
                new ObjectParameter("AuditInsureClose", auditInsureClose) :
                new ObjectParameter("AuditInsureClose", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAuditInsureDCRCount_Select_Result>("usp_QueueCIAuditInsureDCRCount_Select", applicationCodeParameter, insuredNameParameter, payerNameParameter, periodParameter, auditCIStatusIdParameter, auditInsureStatusIdParameter, auditInsureConsiderStatusIdListParameter, auditInsureCloseParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAuditFullDetailByQueueAuditIdV2_Select_Result> usp_QueueCIAuditFullDetailByQueueAuditIdV2_Select(Nullable<int> queueAuditId)
        {
            var queueAuditIdParameter = queueAuditId.HasValue ?
                new ObjectParameter("QueueAuditId", queueAuditId) :
                new ObjectParameter("QueueAuditId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAuditFullDetailByQueueAuditIdV2_Select_Result>("usp_QueueCIAuditFullDetailByQueueAuditIdV2_Select", queueAuditIdParameter);
        }
    
        public virtual ObjectResult<usp_AuditInsureNotConsideredVerifiedType_Select_Result> usp_AuditInsureNotConsideredVerifiedType_Select(Nullable<int> auditInsureNotConsideredVerifiedTypeId, string auditInsureNotConsideredVerifiedTypeDetail)
        {
            var auditInsureNotConsideredVerifiedTypeIdParameter = auditInsureNotConsideredVerifiedTypeId.HasValue ?
                new ObjectParameter("AuditInsureNotConsideredVerifiedTypeId", auditInsureNotConsideredVerifiedTypeId) :
                new ObjectParameter("AuditInsureNotConsideredVerifiedTypeId", typeof(int));
    
            var auditInsureNotConsideredVerifiedTypeDetailParameter = auditInsureNotConsideredVerifiedTypeDetail != null ?
                new ObjectParameter("AuditInsureNotConsideredVerifiedTypeDetail", auditInsureNotConsideredVerifiedTypeDetail) :
                new ObjectParameter("AuditInsureNotConsideredVerifiedTypeDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AuditInsureNotConsideredVerifiedType_Select_Result>("usp_AuditInsureNotConsideredVerifiedType_Select", auditInsureNotConsideredVerifiedTypeIdParameter, auditInsureNotConsideredVerifiedTypeDetailParameter);
        }
    
        public virtual ObjectResult<usp_AuditInsureNotConsideredResultStatus_Select_Result> usp_AuditInsureNotConsideredResultStatus_Select(Nullable<int> auditInsureNotConsideredResultStatusId, string auditInsureNotConsideredResultStatusDetail)
        {
            var auditInsureNotConsideredResultStatusIdParameter = auditInsureNotConsideredResultStatusId.HasValue ?
                new ObjectParameter("AuditInsureNotConsideredResultStatusId", auditInsureNotConsideredResultStatusId) :
                new ObjectParameter("AuditInsureNotConsideredResultStatusId", typeof(int));
    
            var auditInsureNotConsideredResultStatusDetailParameter = auditInsureNotConsideredResultStatusDetail != null ?
                new ObjectParameter("AuditInsureNotConsideredResultStatusDetail", auditInsureNotConsideredResultStatusDetail) :
                new ObjectParameter("AuditInsureNotConsideredResultStatusDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AuditInsureNotConsideredResultStatus_Select_Result>("usp_AuditInsureNotConsideredResultStatus_Select", auditInsureNotConsideredResultStatusIdParameter, auditInsureNotConsideredResultStatusDetailParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAudit2ResultV3_Insert_Result> usp_QueueCIAudit2ResultV3_Insert(Nullable<int> queueAuditId, Nullable<int> auditInsureStatusId, Nullable<int> auditInsureConsiderStatusId, string auditInsureConsiderRemark, Nullable<int> auditInsureNotConsideredResultStatusId, Nullable<int> auditInsureNotConsideredVerifiedTypeId, string auditInsureNotConsideredRemark, Nullable<bool> auditInsureClose, string auditInsureCloseRemark, Nullable<int> auditInsureUserId, Nullable<bool> isSendMemo)
        {
            var queueAuditIdParameter = queueAuditId.HasValue ?
                new ObjectParameter("QueueAuditId", queueAuditId) :
                new ObjectParameter("QueueAuditId", typeof(int));
    
            var auditInsureStatusIdParameter = auditInsureStatusId.HasValue ?
                new ObjectParameter("AuditInsureStatusId", auditInsureStatusId) :
                new ObjectParameter("AuditInsureStatusId", typeof(int));
    
            var auditInsureConsiderStatusIdParameter = auditInsureConsiderStatusId.HasValue ?
                new ObjectParameter("AuditInsureConsiderStatusId", auditInsureConsiderStatusId) :
                new ObjectParameter("AuditInsureConsiderStatusId", typeof(int));
    
            var auditInsureConsiderRemarkParameter = auditInsureConsiderRemark != null ?
                new ObjectParameter("AuditInsureConsiderRemark", auditInsureConsiderRemark) :
                new ObjectParameter("AuditInsureConsiderRemark", typeof(string));
    
            var auditInsureNotConsideredResultStatusIdParameter = auditInsureNotConsideredResultStatusId.HasValue ?
                new ObjectParameter("AuditInsureNotConsideredResultStatusId", auditInsureNotConsideredResultStatusId) :
                new ObjectParameter("AuditInsureNotConsideredResultStatusId", typeof(int));
    
            var auditInsureNotConsideredVerifiedTypeIdParameter = auditInsureNotConsideredVerifiedTypeId.HasValue ?
                new ObjectParameter("AuditInsureNotConsideredVerifiedTypeId", auditInsureNotConsideredVerifiedTypeId) :
                new ObjectParameter("AuditInsureNotConsideredVerifiedTypeId", typeof(int));
    
            var auditInsureNotConsideredRemarkParameter = auditInsureNotConsideredRemark != null ?
                new ObjectParameter("AuditInsureNotConsideredRemark", auditInsureNotConsideredRemark) :
                new ObjectParameter("AuditInsureNotConsideredRemark", typeof(string));
    
            var auditInsureCloseParameter = auditInsureClose.HasValue ?
                new ObjectParameter("AuditInsureClose", auditInsureClose) :
                new ObjectParameter("AuditInsureClose", typeof(bool));
    
            var auditInsureCloseRemarkParameter = auditInsureCloseRemark != null ?
                new ObjectParameter("AuditInsureCloseRemark", auditInsureCloseRemark) :
                new ObjectParameter("AuditInsureCloseRemark", typeof(string));
    
            var auditInsureUserIdParameter = auditInsureUserId.HasValue ?
                new ObjectParameter("AuditInsureUserId", auditInsureUserId) :
                new ObjectParameter("AuditInsureUserId", typeof(int));
    
            var isSendMemoParameter = isSendMemo.HasValue ?
                new ObjectParameter("IsSendMemo", isSendMemo) :
                new ObjectParameter("IsSendMemo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAudit2ResultV3_Insert_Result>("usp_QueueCIAudit2ResultV3_Insert", queueAuditIdParameter, auditInsureStatusIdParameter, auditInsureConsiderStatusIdParameter, auditInsureConsiderRemarkParameter, auditInsureNotConsideredResultStatusIdParameter, auditInsureNotConsideredVerifiedTypeIdParameter, auditInsureNotConsideredRemarkParameter, auditInsureCloseParameter, auditInsureCloseRemarkParameter, auditInsureUserIdParameter, isSendMemoParameter);
        }
    
        public virtual ObjectResult<usp_QueueCIAuditFullDetailReportByConsider_Select_Result> usp_QueueCIAuditFullDetailReportByConsider_Select(Nullable<System.DateTime> period, string auditInsureConsiderStatusIdList)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var auditInsureConsiderStatusIdListParameter = auditInsureConsiderStatusIdList != null ?
                new ObjectParameter("AuditInsureConsiderStatusIdList", auditInsureConsiderStatusIdList) :
                new ObjectParameter("AuditInsureConsiderStatusIdList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCIAuditFullDetailReportByConsider_Select_Result>("usp_QueueCIAuditFullDetailReportByConsider_Select", periodParameter, auditInsureConsiderStatusIdListParameter);
        }
    }
}
