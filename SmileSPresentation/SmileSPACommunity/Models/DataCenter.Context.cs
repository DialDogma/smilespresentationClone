//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmileSPACommunity.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DataCenterV1Entities : DbContext
    {
        public DataCenterV1Entities()
            : base("name=DataCenterV1Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<usp_Organize_Insert_Result> usp_Organize_Insert(Nullable<int> organizeTypeId, Nullable<int> organizeTitleId, string organizeDetail, string buildingName, string villageName, string no, string moo, string floor, string room, string soi, string road, string subDistrictCode, string zipCode, Nullable<int> createByUserId)
        {
            var organizeTypeIdParameter = organizeTypeId.HasValue ?
                new ObjectParameter("OrganizeTypeId", organizeTypeId) :
                new ObjectParameter("OrganizeTypeId", typeof(int));
    
            var organizeTitleIdParameter = organizeTitleId.HasValue ?
                new ObjectParameter("OrganizeTitleId", organizeTitleId) :
                new ObjectParameter("OrganizeTitleId", typeof(int));
    
            var organizeDetailParameter = organizeDetail != null ?
                new ObjectParameter("OrganizeDetail", organizeDetail) :
                new ObjectParameter("OrganizeDetail", typeof(string));
    
            var buildingNameParameter = buildingName != null ?
                new ObjectParameter("BuildingName", buildingName) :
                new ObjectParameter("BuildingName", typeof(string));
    
            var villageNameParameter = villageName != null ?
                new ObjectParameter("VillageName", villageName) :
                new ObjectParameter("VillageName", typeof(string));
    
            var noParameter = no != null ?
                new ObjectParameter("No", no) :
                new ObjectParameter("No", typeof(string));
    
            var mooParameter = moo != null ?
                new ObjectParameter("Moo", moo) :
                new ObjectParameter("Moo", typeof(string));
    
            var floorParameter = floor != null ?
                new ObjectParameter("Floor", floor) :
                new ObjectParameter("Floor", typeof(string));
    
            var roomParameter = room != null ?
                new ObjectParameter("Room", room) :
                new ObjectParameter("Room", typeof(string));
    
            var soiParameter = soi != null ?
                new ObjectParameter("Soi", soi) :
                new ObjectParameter("Soi", typeof(string));
    
            var roadParameter = road != null ?
                new ObjectParameter("Road", road) :
                new ObjectParameter("Road", typeof(string));
    
            var subDistrictCodeParameter = subDistrictCode != null ?
                new ObjectParameter("SubDistrictCode", subDistrictCode) :
                new ObjectParameter("SubDistrictCode", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var createByUserIdParameter = createByUserId.HasValue ?
                new ObjectParameter("CreateByUserId", createByUserId) :
                new ObjectParameter("CreateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Organize_Insert_Result>("usp_Organize_Insert", organizeTypeIdParameter, organizeTitleIdParameter, organizeDetailParameter, buildingNameParameter, villageNameParameter, noParameter, mooParameter, floorParameter, roomParameter, soiParameter, roadParameter, subDistrictCodeParameter, zipCodeParameter, createByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_Organize_Update_Result> usp_Organize_Update(Nullable<int> organizeId, Nullable<int> organizeTypeId, Nullable<int> organizeTitleId, string organizeDetail, string buildingName, string villageName, string no, string moo, string floor, string room, string soi, string road, string subDistrictCode, string zipCode, Nullable<int> updateByUserId)
        {
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            var organizeTypeIdParameter = organizeTypeId.HasValue ?
                new ObjectParameter("OrganizeTypeId", organizeTypeId) :
                new ObjectParameter("OrganizeTypeId", typeof(int));
    
            var organizeTitleIdParameter = organizeTitleId.HasValue ?
                new ObjectParameter("OrganizeTitleId", organizeTitleId) :
                new ObjectParameter("OrganizeTitleId", typeof(int));
    
            var organizeDetailParameter = organizeDetail != null ?
                new ObjectParameter("OrganizeDetail", organizeDetail) :
                new ObjectParameter("OrganizeDetail", typeof(string));
    
            var buildingNameParameter = buildingName != null ?
                new ObjectParameter("BuildingName", buildingName) :
                new ObjectParameter("BuildingName", typeof(string));
    
            var villageNameParameter = villageName != null ?
                new ObjectParameter("VillageName", villageName) :
                new ObjectParameter("VillageName", typeof(string));
    
            var noParameter = no != null ?
                new ObjectParameter("No", no) :
                new ObjectParameter("No", typeof(string));
    
            var mooParameter = moo != null ?
                new ObjectParameter("Moo", moo) :
                new ObjectParameter("Moo", typeof(string));
    
            var floorParameter = floor != null ?
                new ObjectParameter("Floor", floor) :
                new ObjectParameter("Floor", typeof(string));
    
            var roomParameter = room != null ?
                new ObjectParameter("Room", room) :
                new ObjectParameter("Room", typeof(string));
    
            var soiParameter = soi != null ?
                new ObjectParameter("Soi", soi) :
                new ObjectParameter("Soi", typeof(string));
    
            var roadParameter = road != null ?
                new ObjectParameter("Road", road) :
                new ObjectParameter("Road", typeof(string));
    
            var subDistrictCodeParameter = subDistrictCode != null ?
                new ObjectParameter("SubDistrictCode", subDistrictCode) :
                new ObjectParameter("SubDistrictCode", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var updateByUserIdParameter = updateByUserId.HasValue ?
                new ObjectParameter("UpdateByUserId", updateByUserId) :
                new ObjectParameter("UpdateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Organize_Update_Result>("usp_Organize_Update", organizeIdParameter, organizeTypeIdParameter, organizeTitleIdParameter, organizeDetailParameter, buildingNameParameter, villageNameParameter, noParameter, mooParameter, floorParameter, roomParameter, soiParameter, roadParameter, subDistrictCodeParameter, zipCodeParameter, updateByUserIdParameter);
        }
    }
}
