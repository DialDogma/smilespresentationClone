//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmileSTaxAllowance.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TaxAllowanceEntities1 : DbContext
    {
        public TaxAllowanceEntities1()
            : base("name=TaxAllowanceEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<usp_DataBUISelect_Result> usp_DataBUISelect(string iDCard, string firstName, string lastName, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var iDCardParameter = iDCard != null ?
                new ObjectParameter("IDCard", iDCard) :
                new ObjectParameter("IDCard", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DataBUISelect_Result>("usp_DataBUISelect", iDCardParameter, firstNameParameter, lastNameParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_CustomerLog_Insert_Result> usp_CustomerLog_Insert(string applicationCode, string custTitle, string custFirstName, string custLastName, string custIDCard, Nullable<System.DateTime> custBirthDate, string custMobile, string custEmail, string payerTitle, string payerFirstName, string payerLastName, string payerIDCard, Nullable<System.DateTime> payerBirthDate, string payerMobile, string payerEmail, Nullable<int> disclosureStatusId)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var custTitleParameter = custTitle != null ?
                new ObjectParameter("CustTitle", custTitle) :
                new ObjectParameter("CustTitle", typeof(string));
    
            var custFirstNameParameter = custFirstName != null ?
                new ObjectParameter("CustFirstName", custFirstName) :
                new ObjectParameter("CustFirstName", typeof(string));
    
            var custLastNameParameter = custLastName != null ?
                new ObjectParameter("CustLastName", custLastName) :
                new ObjectParameter("CustLastName", typeof(string));
    
            var custIDCardParameter = custIDCard != null ?
                new ObjectParameter("CustIDCard", custIDCard) :
                new ObjectParameter("CustIDCard", typeof(string));
    
            var custBirthDateParameter = custBirthDate.HasValue ?
                new ObjectParameter("CustBirthDate", custBirthDate) :
                new ObjectParameter("CustBirthDate", typeof(System.DateTime));
    
            var custMobileParameter = custMobile != null ?
                new ObjectParameter("CustMobile", custMobile) :
                new ObjectParameter("CustMobile", typeof(string));
    
            var custEmailParameter = custEmail != null ?
                new ObjectParameter("CustEmail", custEmail) :
                new ObjectParameter("CustEmail", typeof(string));
    
            var payerTitleParameter = payerTitle != null ?
                new ObjectParameter("PayerTitle", payerTitle) :
                new ObjectParameter("PayerTitle", typeof(string));
    
            var payerFirstNameParameter = payerFirstName != null ?
                new ObjectParameter("PayerFirstName", payerFirstName) :
                new ObjectParameter("PayerFirstName", typeof(string));
    
            var payerLastNameParameter = payerLastName != null ?
                new ObjectParameter("PayerLastName", payerLastName) :
                new ObjectParameter("PayerLastName", typeof(string));
    
            var payerIDCardParameter = payerIDCard != null ?
                new ObjectParameter("PayerIDCard", payerIDCard) :
                new ObjectParameter("PayerIDCard", typeof(string));
    
            var payerBirthDateParameter = payerBirthDate.HasValue ?
                new ObjectParameter("PayerBirthDate", payerBirthDate) :
                new ObjectParameter("PayerBirthDate", typeof(System.DateTime));
    
            var payerMobileParameter = payerMobile != null ?
                new ObjectParameter("PayerMobile", payerMobile) :
                new ObjectParameter("PayerMobile", typeof(string));
    
            var payerEmailParameter = payerEmail != null ?
                new ObjectParameter("PayerEmail", payerEmail) :
                new ObjectParameter("PayerEmail", typeof(string));
    
            var disclosureStatusIdParameter = disclosureStatusId.HasValue ?
                new ObjectParameter("DisclosureStatusId", disclosureStatusId) :
                new ObjectParameter("DisclosureStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerLog_Insert_Result>("usp_CustomerLog_Insert", applicationCodeParameter, custTitleParameter, custFirstNameParameter, custLastNameParameter, custIDCardParameter, custBirthDateParameter, custMobileParameter, custEmailParameter, payerTitleParameter, payerFirstNameParameter, payerLastNameParameter, payerIDCardParameter, payerBirthDateParameter, payerMobileParameter, payerEmailParameter, disclosureStatusIdParameter);
        }
    
        public virtual ObjectResult<usp_GetCustomerDetailLatest_Result> usp_GetCustomerDetailLatest(string iDCard, Nullable<System.DateTime> birthDate)
        {
            var iDCardParameter = iDCard != null ?
                new ObjectParameter("IDCard", iDCard) :
                new ObjectParameter("IDCard", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCustomerDetailLatest_Result>("usp_GetCustomerDetailLatest", iDCardParameter, birthDateParameter);
        }
    
        public virtual ObjectResult<usp_TaxAllowance_Select_Result> usp_TaxAllowance_Select(string iDCard, string firstName, string lastName, Nullable<int> year, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var iDCardParameter = iDCard != null ?
                new ObjectParameter("IDCard", iDCard) :
                new ObjectParameter("IDCard", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TaxAllowance_Select_Result>("usp_TaxAllowance_Select", iDCardParameter, firstNameParameter, lastNameParameter, yearParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_CustomerPDPA_Select_Result> usp_CustomerPDPA_Select(string reference, string iP)
        {
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerPDPA_Select_Result>("usp_CustomerPDPA_Select", referenceParameter, iPParameter);
        }
    
        public virtual ObjectResult<usp_CustomerPDPA_Verify_Result> usp_CustomerPDPA_Verify(string reference, string identityCardVerify, string iP)
        {
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var identityCardVerifyParameter = identityCardVerify != null ?
                new ObjectParameter("IdentityCardVerify", identityCardVerify) :
                new ObjectParameter("IdentityCardVerify", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerPDPA_Verify_Result>("usp_CustomerPDPA_Verify", referenceParameter, identityCardVerifyParameter, iPParameter);
        }
    
        public virtual ObjectResult<usp_TaxPrintLog_Insert_Result> usp_TaxPrintLog_Insert(Nullable<int> taxAllowanceId, Nullable<int> userId)
        {
            var taxAllowanceIdParameter = taxAllowanceId.HasValue ?
                new ObjectParameter("TaxAllowanceId", taxAllowanceId) :
                new ObjectParameter("TaxAllowanceId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TaxPrintLog_Insert_Result>("usp_TaxPrintLog_Insert", taxAllowanceIdParameter, userIdParameter);
        }
    }
}
