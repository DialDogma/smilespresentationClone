//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmilesSSytemMonitor.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SystemMonitorEntities : DbContext
    {
        public SystemMonitorEntities()
            : base("name=SystemMonitorEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<usp_GetCurrentServerMonitor_Result> usp_GetCurrentServerMonitor()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCurrentServerMonitor_Result>("usp_GetCurrentServerMonitor");
        }
    
        public virtual int usp_InsertCurrentServerMonitor(string serverName, Nullable<double> disk_C_Free, Nullable<double> disk_D_Free, Nullable<double> disk_E_Free, Nullable<double> disk_F_Free, Nullable<double> disk_C_Total, Nullable<double> disk_D_Total, Nullable<double> disk_E_Total, Nullable<double> disk_F_Total, Nullable<double> rAM, Nullable<double> cPU, Nullable<double> diskIO)
        {
            var serverNameParameter = serverName != null ?
                new ObjectParameter("ServerName", serverName) :
                new ObjectParameter("ServerName", typeof(string));
    
            var disk_C_FreeParameter = disk_C_Free.HasValue ?
                new ObjectParameter("Disk_C_Free", disk_C_Free) :
                new ObjectParameter("Disk_C_Free", typeof(double));
    
            var disk_D_FreeParameter = disk_D_Free.HasValue ?
                new ObjectParameter("Disk_D_Free", disk_D_Free) :
                new ObjectParameter("Disk_D_Free", typeof(double));
    
            var disk_E_FreeParameter = disk_E_Free.HasValue ?
                new ObjectParameter("Disk_E_Free", disk_E_Free) :
                new ObjectParameter("Disk_E_Free", typeof(double));
    
            var disk_F_FreeParameter = disk_F_Free.HasValue ?
                new ObjectParameter("Disk_F_Free", disk_F_Free) :
                new ObjectParameter("Disk_F_Free", typeof(double));
    
            var disk_C_TotalParameter = disk_C_Total.HasValue ?
                new ObjectParameter("Disk_C_Total", disk_C_Total) :
                new ObjectParameter("Disk_C_Total", typeof(double));
    
            var disk_D_TotalParameter = disk_D_Total.HasValue ?
                new ObjectParameter("Disk_D_Total", disk_D_Total) :
                new ObjectParameter("Disk_D_Total", typeof(double));
    
            var disk_E_TotalParameter = disk_E_Total.HasValue ?
                new ObjectParameter("Disk_E_Total", disk_E_Total) :
                new ObjectParameter("Disk_E_Total", typeof(double));
    
            var disk_F_TotalParameter = disk_F_Total.HasValue ?
                new ObjectParameter("Disk_F_Total", disk_F_Total) :
                new ObjectParameter("Disk_F_Total", typeof(double));
    
            var rAMParameter = rAM.HasValue ?
                new ObjectParameter("RAM", rAM) :
                new ObjectParameter("RAM", typeof(double));
    
            var cPUParameter = cPU.HasValue ?
                new ObjectParameter("CPU", cPU) :
                new ObjectParameter("CPU", typeof(double));
    
            var diskIOParameter = diskIO.HasValue ?
                new ObjectParameter("DiskIO", diskIO) :
                new ObjectParameter("DiskIO", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertCurrentServerMonitor", serverNameParameter, disk_C_FreeParameter, disk_D_FreeParameter, disk_E_FreeParameter, disk_F_FreeParameter, disk_C_TotalParameter, disk_D_TotalParameter, disk_E_TotalParameter, disk_F_TotalParameter, rAMParameter, cPUParameter, diskIOParameter);
        }
    }
}
