//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmileMotorV1.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MotorV1Entities : DbContext
    {
        public MotorV1Entities()
            : base("name=MotorV1Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<usp_MotorApplication_CountStatus_Select_Result> usp_MotorApplication_CountStatus_Select(Nullable<int> branchID, Nullable<int> statusID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MotorApplication_CountStatus_Select_Result>("usp_MotorApplication_CountStatus_Select", branchIDParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<usp_MotorApplication_Monitor_Select_Result> usp_MotorApplication_Monitor_Select(Nullable<int> branchID, Nullable<int> motorApplicationStatusID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var motorApplicationStatusIDParameter = motorApplicationStatusID.HasValue ?
                new ObjectParameter("MotorApplicationStatusID", motorApplicationStatusID) :
                new ObjectParameter("MotorApplicationStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MotorApplication_Monitor_Select_Result>("usp_MotorApplication_Monitor_Select", branchIDParameter, motorApplicationStatusIDParameter);
        }
    
        public virtual ObjectResult<usp_MotorApplication_VehicleDetailValidate_Select_Result> usp_MotorApplication_VehicleDetailValidate_Select(string vehicleRegistrationDetail, string vehicleRegistrationNumber, Nullable<int> vehicleRegistrationProvince_ID, string vehicleChassisNumber, string vehicleEngineNumber)
        {
            var vehicleRegistrationDetailParameter = vehicleRegistrationDetail != null ?
                new ObjectParameter("VehicleRegistrationDetail", vehicleRegistrationDetail) :
                new ObjectParameter("VehicleRegistrationDetail", typeof(string));
    
            var vehicleRegistrationNumberParameter = vehicleRegistrationNumber != null ?
                new ObjectParameter("VehicleRegistrationNumber", vehicleRegistrationNumber) :
                new ObjectParameter("VehicleRegistrationNumber", typeof(string));
    
            var vehicleRegistrationProvince_IDParameter = vehicleRegistrationProvince_ID.HasValue ?
                new ObjectParameter("VehicleRegistrationProvince_ID", vehicleRegistrationProvince_ID) :
                new ObjectParameter("VehicleRegistrationProvince_ID", typeof(int));
    
            var vehicleChassisNumberParameter = vehicleChassisNumber != null ?
                new ObjectParameter("VehicleChassisNumber", vehicleChassisNumber) :
                new ObjectParameter("VehicleChassisNumber", typeof(string));
    
            var vehicleEngineNumberParameter = vehicleEngineNumber != null ?
                new ObjectParameter("VehicleEngineNumber", vehicleEngineNumber) :
                new ObjectParameter("VehicleEngineNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MotorApplication_VehicleDetailValidate_Select_Result>("usp_MotorApplication_VehicleDetailValidate_Select", vehicleRegistrationDetailParameter, vehicleRegistrationNumberParameter, vehicleRegistrationProvince_IDParameter, vehicleChassisNumberParameter, vehicleEngineNumberParameter);
        }
    
        public virtual ObjectResult<usp_MotorApplication_EndroseBankAccount_Result> usp_MotorApplication_EndroseBankAccount(Nullable<int> applicationId, Nullable<int> bankId, string bankAccountNo, Nullable<int> updateByUserId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(int));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var bankAccountNoParameter = bankAccountNo != null ?
                new ObjectParameter("BankAccountNo", bankAccountNo) :
                new ObjectParameter("BankAccountNo", typeof(string));
    
            var updateByUserIdParameter = updateByUserId.HasValue ?
                new ObjectParameter("UpdateByUserId", updateByUserId) :
                new ObjectParameter("UpdateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MotorApplication_EndroseBankAccount_Result>("usp_MotorApplication_EndroseBankAccount", applicationIdParameter, bankIdParameter, bankAccountNoParameter, updateByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_MotorApplication_Status_Select_Result> usp_MotorApplication_Status_Select(Nullable<int> motorApplicationStatus_ID)
        {
            var motorApplicationStatus_IDParameter = motorApplicationStatus_ID.HasValue ?
                new ObjectParameter("MotorApplicationStatus_ID", motorApplicationStatus_ID) :
                new ObjectParameter("MotorApplicationStatus_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MotorApplication_Status_Select_Result>("usp_MotorApplication_Status_Select", motorApplicationStatus_IDParameter);
        }
    
        public virtual ObjectResult<usp_PremiumCash_Select_Result> usp_PremiumCash_Select(Nullable<System.DateTime> debtPeriod, Nullable<int> payerBranch_ID, Nullable<int> saleEmploee_ID)
        {
            var debtPeriodParameter = debtPeriod.HasValue ?
                new ObjectParameter("DebtPeriod", debtPeriod) :
                new ObjectParameter("DebtPeriod", typeof(System.DateTime));
    
            var payerBranch_IDParameter = payerBranch_ID.HasValue ?
                new ObjectParameter("PayerBranch_ID", payerBranch_ID) :
                new ObjectParameter("PayerBranch_ID", typeof(int));
    
            var saleEmploee_IDParameter = saleEmploee_ID.HasValue ?
                new ObjectParameter("SaleEmploee_ID", saleEmploee_ID) :
                new ObjectParameter("SaleEmploee_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PremiumCash_Select_Result>("usp_PremiumCash_Select", debtPeriodParameter, payerBranch_IDParameter, saleEmploee_IDParameter);
        }
    
        public virtual ObjectResult<usp_MotorApplication_Report_EndCoverNotice_Select_Result> usp_MotorApplication_Report_EndCoverNotice_Select(Nullable<int> motorApplicationStatus_ID, Nullable<int> periodType_ID, Nullable<int> product_ID, Nullable<int> branch_ID, Nullable<int> noticeDays)
        {
            var motorApplicationStatus_IDParameter = motorApplicationStatus_ID.HasValue ?
                new ObjectParameter("MotorApplicationStatus_ID", motorApplicationStatus_ID) :
                new ObjectParameter("MotorApplicationStatus_ID", typeof(int));
    
            var periodType_IDParameter = periodType_ID.HasValue ?
                new ObjectParameter("PeriodType_ID", periodType_ID) :
                new ObjectParameter("PeriodType_ID", typeof(int));
    
            var product_IDParameter = product_ID.HasValue ?
                new ObjectParameter("Product_ID", product_ID) :
                new ObjectParameter("Product_ID", typeof(int));
    
            var branch_IDParameter = branch_ID.HasValue ?
                new ObjectParameter("Branch_ID", branch_ID) :
                new ObjectParameter("Branch_ID", typeof(int));
    
            var noticeDaysParameter = noticeDays.HasValue ?
                new ObjectParameter("NoticeDays", noticeDays) :
                new ObjectParameter("NoticeDays", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MotorApplication_Report_EndCoverNotice_Select_Result>("usp_MotorApplication_Report_EndCoverNotice_Select", motorApplicationStatus_IDParameter, periodType_IDParameter, product_IDParameter, branch_IDParameter, noticeDaysParameter);
        }
    
        public virtual int usp_MotorApplication_Document_Readed_Update(Nullable<int> motorApplication_ID)
        {
            var motorApplication_IDParameter = motorApplication_ID.HasValue ?
                new ObjectParameter("MotorApplication_ID", motorApplication_ID) :
                new ObjectParameter("MotorApplication_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MotorApplication_Document_Readed_Update", motorApplication_IDParameter);
        }
    
        public virtual ObjectResult<usp_MotorApplication_Report_DocumentNotice_Select_Result> usp_MotorApplication_Report_DocumentNotice_Select(Nullable<int> branch_ID)
        {
            var branch_IDParameter = branch_ID.HasValue ?
                new ObjectParameter("Branch_ID", branch_ID) :
                new ObjectParameter("Branch_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MotorApplication_Report_DocumentNotice_Select_Result>("usp_MotorApplication_Report_DocumentNotice_Select", branch_IDParameter);
        }
    
        public virtual ObjectResult<usp_MotorApplication_Report_NewAppNotice_Select_Result> usp_MotorApplication_Report_NewAppNotice_Select(Nullable<int> branch_ID)
        {
            var branch_IDParameter = branch_ID.HasValue ?
                new ObjectParameter("Branch_ID", branch_ID) :
                new ObjectParameter("Branch_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MotorApplication_Report_NewAppNotice_Select_Result>("usp_MotorApplication_Report_NewAppNotice_Select", branch_IDParameter);
        }
    
        public virtual ObjectResult<usp_MotorApplication_SelectStatusByID_Result> usp_MotorApplication_SelectStatusByID(Nullable<int> motorApplicationID)
        {
            var motorApplicationIDParameter = motorApplicationID.HasValue ?
                new ObjectParameter("MotorApplicationID", motorApplicationID) :
                new ObjectParameter("MotorApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MotorApplication_SelectStatusByID_Result>("usp_MotorApplication_SelectStatusByID", motorApplicationIDParameter);
        }
    
        public virtual ObjectResult<usp_MotorApplication_Report_StatusNotice_Select_Result> usp_MotorApplication_Report_StatusNotice_Select(Nullable<int> branch_ID, Nullable<int> product_ID, Nullable<int> motorApplicationStatus_ID)
        {
            var branch_IDParameter = branch_ID.HasValue ?
                new ObjectParameter("Branch_ID", branch_ID) :
                new ObjectParameter("Branch_ID", typeof(int));
    
            var product_IDParameter = product_ID.HasValue ?
                new ObjectParameter("Product_ID", product_ID) :
                new ObjectParameter("Product_ID", typeof(int));
    
            var motorApplicationStatus_IDParameter = motorApplicationStatus_ID.HasValue ?
                new ObjectParameter("MotorApplicationStatus_ID", motorApplicationStatus_ID) :
                new ObjectParameter("MotorApplicationStatus_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MotorApplication_Report_StatusNotice_Select_Result>("usp_MotorApplication_Report_StatusNotice_Select", branch_IDParameter, product_IDParameter, motorApplicationStatus_IDParameter);
        }
    
        public virtual ObjectResult<usp_MotorApplication_Report_NewAppMatchedNotice_Select_Result> usp_MotorApplication_Report_NewAppMatchedNotice_Select(Nullable<int> branch_ID)
        {
            var branch_IDParameter = branch_ID.HasValue ?
                new ObjectParameter("Branch_ID", branch_ID) :
                new ObjectParameter("Branch_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MotorApplication_Report_NewAppMatchedNotice_Select_Result>("usp_MotorApplication_Report_NewAppMatchedNotice_Select", branch_IDParameter);
        }
    
        public virtual ObjectResult<usp_MotorApplication_Endorse_Select_Result> usp_MotorApplication_Endorse_Select(Nullable<int> motorApplicationEndorse_ID)
        {
            var motorApplicationEndorse_IDParameter = motorApplicationEndorse_ID.HasValue ?
                new ObjectParameter("MotorApplicationEndorse_ID", motorApplicationEndorse_ID) :
                new ObjectParameter("MotorApplicationEndorse_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MotorApplication_Endorse_Select_Result>("usp_MotorApplication_Endorse_Select", motorApplicationEndorse_IDParameter);
        }
    
        public virtual ObjectResult<usp_MotorApplication_Search_SelectV2_Result> usp_MotorApplication_Search_SelectV2(Nullable<int> motorApplicationStatus_ID, string criteria)
        {
            var motorApplicationStatus_IDParameter = motorApplicationStatus_ID.HasValue ?
                new ObjectParameter("MotorApplicationStatus_ID", motorApplicationStatus_ID) :
                new ObjectParameter("MotorApplicationStatus_ID", typeof(int));
    
            var criteriaParameter = criteria != null ?
                new ObjectParameter("Criteria", criteria) :
                new ObjectParameter("Criteria", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MotorApplication_Search_SelectV2_Result>("usp_MotorApplication_Search_SelectV2", motorApplicationStatus_IDParameter, criteriaParameter);
        }
    
        public virtual ObjectResult<usp_EndorseChangePayer_Update_Result> usp_EndorseChangePayer_Update(Nullable<int> motorApplicationId, Nullable<int> payerRelationTypeId, Nullable<int> payerPersonId, Nullable<int> createdByUserId)
        {
            var motorApplicationIdParameter = motorApplicationId.HasValue ?
                new ObjectParameter("MotorApplicationId", motorApplicationId) :
                new ObjectParameter("MotorApplicationId", typeof(int));
    
            var payerRelationTypeIdParameter = payerRelationTypeId.HasValue ?
                new ObjectParameter("PayerRelationTypeId", payerRelationTypeId) :
                new ObjectParameter("PayerRelationTypeId", typeof(int));
    
            var payerPersonIdParameter = payerPersonId.HasValue ?
                new ObjectParameter("PayerPersonId", payerPersonId) :
                new ObjectParameter("PayerPersonId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EndorseChangePayer_Update_Result>("usp_EndorseChangePayer_Update", motorApplicationIdParameter, payerRelationTypeIdParameter, payerPersonIdParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_EndorseChangePaymethod_Update_Result> usp_EndorseChangePaymethod_Update(Nullable<int> motorApplicationId, Nullable<int> periodTypeId, Nullable<int> payMethodTypeId, Nullable<int> personBankAccountId, Nullable<double> premiumAmount, Nullable<double> dutyAmount, Nullable<double> taxAmout, Nullable<double> premiumTaxAmount, Nullable<double> premiumDeliverAmount, Nullable<int> createdByUserId)
        {
            var motorApplicationIdParameter = motorApplicationId.HasValue ?
                new ObjectParameter("MotorApplicationId", motorApplicationId) :
                new ObjectParameter("MotorApplicationId", typeof(int));
    
            var periodTypeIdParameter = periodTypeId.HasValue ?
                new ObjectParameter("PeriodTypeId", periodTypeId) :
                new ObjectParameter("PeriodTypeId", typeof(int));
    
            var payMethodTypeIdParameter = payMethodTypeId.HasValue ?
                new ObjectParameter("PayMethodTypeId", payMethodTypeId) :
                new ObjectParameter("PayMethodTypeId", typeof(int));
    
            var personBankAccountIdParameter = personBankAccountId.HasValue ?
                new ObjectParameter("PersonBankAccountId", personBankAccountId) :
                new ObjectParameter("PersonBankAccountId", typeof(int));
    
            var premiumAmountParameter = premiumAmount.HasValue ?
                new ObjectParameter("PremiumAmount", premiumAmount) :
                new ObjectParameter("PremiumAmount", typeof(double));
    
            var dutyAmountParameter = dutyAmount.HasValue ?
                new ObjectParameter("DutyAmount", dutyAmount) :
                new ObjectParameter("DutyAmount", typeof(double));
    
            var taxAmoutParameter = taxAmout.HasValue ?
                new ObjectParameter("TaxAmout", taxAmout) :
                new ObjectParameter("TaxAmout", typeof(double));
    
            var premiumTaxAmountParameter = premiumTaxAmount.HasValue ?
                new ObjectParameter("PremiumTaxAmount", premiumTaxAmount) :
                new ObjectParameter("PremiumTaxAmount", typeof(double));
    
            var premiumDeliverAmountParameter = premiumDeliverAmount.HasValue ?
                new ObjectParameter("PremiumDeliverAmount", premiumDeliverAmount) :
                new ObjectParameter("PremiumDeliverAmount", typeof(double));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EndorseChangePaymethod_Update_Result>("usp_EndorseChangePaymethod_Update", motorApplicationIdParameter, periodTypeIdParameter, payMethodTypeIdParameter, personBankAccountIdParameter, premiumAmountParameter, dutyAmountParameter, taxAmoutParameter, premiumTaxAmountParameter, premiumDeliverAmountParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_MotorApplication_RenewByAppID_Select_Result> usp_MotorApplication_RenewByAppID_Select(Nullable<int> motorApplication_ID)
        {
            var motorApplication_IDParameter = motorApplication_ID.HasValue ?
                new ObjectParameter("MotorApplication_ID", motorApplication_ID) :
                new ObjectParameter("MotorApplication_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MotorApplication_RenewByAppID_Select_Result>("usp_MotorApplication_RenewByAppID_Select", motorApplication_IDParameter);
        }
    
        public virtual ObjectResult<usp_MotorApplication_Renew_Insert_Result> usp_MotorApplication_Renew_Insert(Nullable<int> fromMotorApplicationId, Nullable<System.DateTime> startCover, Nullable<int> createdByUserId)
        {
            var fromMotorApplicationIdParameter = fromMotorApplicationId.HasValue ?
                new ObjectParameter("FromMotorApplicationId", fromMotorApplicationId) :
                new ObjectParameter("FromMotorApplicationId", typeof(int));
    
            var startCoverParameter = startCover.HasValue ?
                new ObjectParameter("StartCover", startCover) :
                new ObjectParameter("StartCover", typeof(System.DateTime));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MotorApplication_Renew_Insert_Result>("usp_MotorApplication_Renew_Insert", fromMotorApplicationIdParameter, startCoverParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_MotorApplication_Status_UpdateV2_Result> usp_MotorApplication_Status_UpdateV2(Nullable<int> motorApplication_ID, Nullable<int> motorApplicationStatus_ID, Nullable<int> updateBy_ID, Nullable<int> motorApplicationCancelCuase_ID, string cancelRemark, Nullable<System.DateTime> cancelDate)
        {
            var motorApplication_IDParameter = motorApplication_ID.HasValue ?
                new ObjectParameter("MotorApplication_ID", motorApplication_ID) :
                new ObjectParameter("MotorApplication_ID", typeof(int));
    
            var motorApplicationStatus_IDParameter = motorApplicationStatus_ID.HasValue ?
                new ObjectParameter("MotorApplicationStatus_ID", motorApplicationStatus_ID) :
                new ObjectParameter("MotorApplicationStatus_ID", typeof(int));
    
            var updateBy_IDParameter = updateBy_ID.HasValue ?
                new ObjectParameter("UpdateBy_ID", updateBy_ID) :
                new ObjectParameter("UpdateBy_ID", typeof(int));
    
            var motorApplicationCancelCuase_IDParameter = motorApplicationCancelCuase_ID.HasValue ?
                new ObjectParameter("MotorApplicationCancelCuase_ID", motorApplicationCancelCuase_ID) :
                new ObjectParameter("MotorApplicationCancelCuase_ID", typeof(int));
    
            var cancelRemarkParameter = cancelRemark != null ?
                new ObjectParameter("CancelRemark", cancelRemark) :
                new ObjectParameter("CancelRemark", typeof(string));
    
            var cancelDateParameter = cancelDate.HasValue ?
                new ObjectParameter("CancelDate", cancelDate) :
                new ObjectParameter("CancelDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MotorApplication_Status_UpdateV2_Result>("usp_MotorApplication_Status_UpdateV2", motorApplication_IDParameter, motorApplicationStatus_IDParameter, updateBy_IDParameter, motorApplicationCancelCuase_IDParameter, cancelRemarkParameter, cancelDateParameter);
        }
    
        public virtual ObjectResult<usp_PersonRelatedApplication_Update_Result> usp_PersonRelatedApplication_Update(Nullable<int> personRelatedApplicaton_ID, Nullable<int> personRelatedApplicatonType_ID, Nullable<int> person_ID, Nullable<int> motorApplication_ID, Nullable<int> updateBy_ID)
        {
            var personRelatedApplicaton_IDParameter = personRelatedApplicaton_ID.HasValue ?
                new ObjectParameter("PersonRelatedApplicaton_ID", personRelatedApplicaton_ID) :
                new ObjectParameter("PersonRelatedApplicaton_ID", typeof(int));
    
            var personRelatedApplicatonType_IDParameter = personRelatedApplicatonType_ID.HasValue ?
                new ObjectParameter("PersonRelatedApplicatonType_ID", personRelatedApplicatonType_ID) :
                new ObjectParameter("PersonRelatedApplicatonType_ID", typeof(int));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var motorApplication_IDParameter = motorApplication_ID.HasValue ?
                new ObjectParameter("MotorApplication_ID", motorApplication_ID) :
                new ObjectParameter("MotorApplication_ID", typeof(int));
    
            var updateBy_IDParameter = updateBy_ID.HasValue ?
                new ObjectParameter("UpdateBy_ID", updateBy_ID) :
                new ObjectParameter("UpdateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonRelatedApplication_Update_Result>("usp_PersonRelatedApplication_Update", personRelatedApplicaton_IDParameter, personRelatedApplicatonType_IDParameter, person_IDParameter, motorApplication_IDParameter, updateBy_IDParameter);
        }
    
        public virtual int usp_MotorApplicationPersonRelatedApplication_Update(Nullable<int> motorApplication_ID, Nullable<int> person_ID, Nullable<int> personRelatedApplicatonType_ID, Nullable<int> creatBy_ID)
        {
            var motorApplication_IDParameter = motorApplication_ID.HasValue ?
                new ObjectParameter("MotorApplication_ID", motorApplication_ID) :
                new ObjectParameter("MotorApplication_ID", typeof(int));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var personRelatedApplicatonType_IDParameter = personRelatedApplicatonType_ID.HasValue ?
                new ObjectParameter("PersonRelatedApplicatonType_ID", personRelatedApplicatonType_ID) :
                new ObjectParameter("PersonRelatedApplicatonType_ID", typeof(int));
    
            var creatBy_IDParameter = creatBy_ID.HasValue ?
                new ObjectParameter("CreatBy_ID", creatBy_ID) :
                new ObjectParameter("CreatBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MotorApplicationPersonRelatedApplication_Update", motorApplication_IDParameter, person_IDParameter, personRelatedApplicatonType_IDParameter, creatBy_IDParameter);
        }
    
        public virtual ObjectResult<usp_MotorApplication_CancelCuase_Select_Result> usp_MotorApplication_CancelCuase_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MotorApplication_CancelCuase_Select_Result>("usp_MotorApplication_CancelCuase_Select");
        }
    
        public virtual ObjectResult<usp_MotorApplication_Report_NewAppV2_Select_Result> usp_MotorApplication_Report_NewAppV2_Select(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> motorApplicationStatusID, Nullable<int> dateCondition, Nullable<int> branchID, Nullable<int> employeeCode)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var motorApplicationStatusIDParameter = motorApplicationStatusID.HasValue ?
                new ObjectParameter("MotorApplicationStatusID", motorApplicationStatusID) :
                new ObjectParameter("MotorApplicationStatusID", typeof(int));
    
            var dateConditionParameter = dateCondition.HasValue ?
                new ObjectParameter("DateCondition", dateCondition) :
                new ObjectParameter("DateCondition", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var employeeCodeParameter = employeeCode.HasValue ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MotorApplication_Report_NewAppV2_Select_Result>("usp_MotorApplication_Report_NewAppV2_Select", dateFromParameter, dateToParameter, motorApplicationStatusIDParameter, dateConditionParameter, branchIDParameter, employeeCodeParameter);
        }
    
        public virtual int usp_Premium_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Premium_Select");
        }
    
        public virtual ObjectResult<usp_MotorApplication_Report_AppByStatus_Select_Result> usp_MotorApplication_Report_AppByStatus_Select(Nullable<int> motorApplicationStatusID)
        {
            var motorApplicationStatusIDParameter = motorApplicationStatusID.HasValue ?
                new ObjectParameter("MotorApplicationStatusID", motorApplicationStatusID) :
                new ObjectParameter("MotorApplicationStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MotorApplication_Report_AppByStatus_Select_Result>("usp_MotorApplication_Report_AppByStatus_Select", motorApplicationStatusIDParameter);
        }
    
        public virtual ObjectResult<usp_MotorApplication_CoverNote_Select_Result> usp_MotorApplication_CoverNote_Select(Nullable<int> motorApplication_ID)
        {
            var motorApplication_IDParameter = motorApplication_ID.HasValue ?
                new ObjectParameter("MotorApplication_ID", motorApplication_ID) :
                new ObjectParameter("MotorApplication_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MotorApplication_CoverNote_Select_Result>("usp_MotorApplication_CoverNote_Select", motorApplication_IDParameter);
        }
    
        public virtual ObjectResult<usp_MotorApplicationSendForCover_Select_Result> usp_MotorApplicationSendForCover_Select(Nullable<int> periodTypeID, Nullable<System.DateTime> period)
        {
            var periodTypeIDParameter = periodTypeID.HasValue ?
                new ObjectParameter("PeriodTypeID", periodTypeID) :
                new ObjectParameter("PeriodTypeID", typeof(int));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MotorApplicationSendForCover_Select_Result>("usp_MotorApplicationSendForCover_Select", periodTypeIDParameter, periodParameter);
        }
    
        public virtual ObjectResult<usp_MotorApplicationSendForCover_Insert_Result> usp_MotorApplicationSendForCover_Insert(Nullable<int> periodTypeID, Nullable<System.DateTime> period, Nullable<int> createdBy_ID, Nullable<int> coverTypeID)
        {
            var periodTypeIDParameter = periodTypeID.HasValue ?
                new ObjectParameter("PeriodTypeID", periodTypeID) :
                new ObjectParameter("PeriodTypeID", typeof(int));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var createdBy_IDParameter = createdBy_ID.HasValue ?
                new ObjectParameter("CreatedBy_ID", createdBy_ID) :
                new ObjectParameter("CreatedBy_ID", typeof(int));
    
            var coverTypeIDParameter = coverTypeID.HasValue ?
                new ObjectParameter("CoverTypeID", coverTypeID) :
                new ObjectParameter("CoverTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MotorApplicationSendForCover_Insert_Result>("usp_MotorApplicationSendForCover_Insert", periodTypeIDParameter, periodParameter, createdBy_IDParameter, coverTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_MotorApplicationSendForCoverExcel_Select_Result> usp_MotorApplicationSendForCoverExcel_Select(Nullable<int> sendForCoverHeader_ID)
        {
            var sendForCoverHeader_IDParameter = sendForCoverHeader_ID.HasValue ?
                new ObjectParameter("SendForCoverHeader_ID", sendForCoverHeader_ID) :
                new ObjectParameter("SendForCoverHeader_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MotorApplicationSendForCoverExcel_Select_Result>("usp_MotorApplicationSendForCoverExcel_Select", sendForCoverHeader_IDParameter);
        }
    
        public virtual ObjectResult<usp_MotorApplication_Report_SendForCover_Select_Result> usp_MotorApplication_Report_SendForCover_Select(Nullable<int> dateCase, Nullable<int> periodTypeID, Nullable<System.DateTime> periodFrom, Nullable<System.DateTime> periodTo, Nullable<System.DateTime> startCorverDate, Nullable<System.DateTime> endCoverDate, Nullable<System.DateTime> createdDateFrom, Nullable<System.DateTime> createdDateTo)
        {
            var dateCaseParameter = dateCase.HasValue ?
                new ObjectParameter("DateCase", dateCase) :
                new ObjectParameter("DateCase", typeof(int));
    
            var periodTypeIDParameter = periodTypeID.HasValue ?
                new ObjectParameter("PeriodTypeID", periodTypeID) :
                new ObjectParameter("PeriodTypeID", typeof(int));
    
            var periodFromParameter = periodFrom.HasValue ?
                new ObjectParameter("PeriodFrom", periodFrom) :
                new ObjectParameter("PeriodFrom", typeof(System.DateTime));
    
            var periodToParameter = periodTo.HasValue ?
                new ObjectParameter("PeriodTo", periodTo) :
                new ObjectParameter("PeriodTo", typeof(System.DateTime));
    
            var startCorverDateParameter = startCorverDate.HasValue ?
                new ObjectParameter("StartCorverDate", startCorverDate) :
                new ObjectParameter("StartCorverDate", typeof(System.DateTime));
    
            var endCoverDateParameter = endCoverDate.HasValue ?
                new ObjectParameter("EndCoverDate", endCoverDate) :
                new ObjectParameter("EndCoverDate", typeof(System.DateTime));
    
            var createdDateFromParameter = createdDateFrom.HasValue ?
                new ObjectParameter("CreatedDateFrom", createdDateFrom) :
                new ObjectParameter("CreatedDateFrom", typeof(System.DateTime));
    
            var createdDateToParameter = createdDateTo.HasValue ?
                new ObjectParameter("CreatedDateTo", createdDateTo) :
                new ObjectParameter("CreatedDateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MotorApplication_Report_SendForCover_Select_Result>("usp_MotorApplication_Report_SendForCover_Select", dateCaseParameter, periodTypeIDParameter, periodFromParameter, periodToParameter, startCorverDateParameter, endCoverDateParameter, createdDateFromParameter, createdDateToParameter);
        }
    
        public virtual ObjectResult<usp_MotorApplication_Report_SendForCoverExcel_Select_Result1> usp_MotorApplication_Report_SendForCoverExcel_Select(Nullable<int> dateCase, Nullable<int> periodTypeID, Nullable<System.DateTime> periodFrom, Nullable<System.DateTime> periodTo, Nullable<System.DateTime> startCorverDate, Nullable<System.DateTime> endCoverDate, Nullable<System.DateTime> createdDateFrom, Nullable<System.DateTime> createdDateTo)
        {
            var dateCaseParameter = dateCase.HasValue ?
                new ObjectParameter("DateCase", dateCase) :
                new ObjectParameter("DateCase", typeof(int));
    
            var periodTypeIDParameter = periodTypeID.HasValue ?
                new ObjectParameter("PeriodTypeID", periodTypeID) :
                new ObjectParameter("PeriodTypeID", typeof(int));
    
            var periodFromParameter = periodFrom.HasValue ?
                new ObjectParameter("PeriodFrom", periodFrom) :
                new ObjectParameter("PeriodFrom", typeof(System.DateTime));
    
            var periodToParameter = periodTo.HasValue ?
                new ObjectParameter("PeriodTo", periodTo) :
                new ObjectParameter("PeriodTo", typeof(System.DateTime));
    
            var startCorverDateParameter = startCorverDate.HasValue ?
                new ObjectParameter("StartCorverDate", startCorverDate) :
                new ObjectParameter("StartCorverDate", typeof(System.DateTime));
    
            var endCoverDateParameter = endCoverDate.HasValue ?
                new ObjectParameter("EndCoverDate", endCoverDate) :
                new ObjectParameter("EndCoverDate", typeof(System.DateTime));
    
            var createdDateFromParameter = createdDateFrom.HasValue ?
                new ObjectParameter("CreatedDateFrom", createdDateFrom) :
                new ObjectParameter("CreatedDateFrom", typeof(System.DateTime));
    
            var createdDateToParameter = createdDateTo.HasValue ?
                new ObjectParameter("CreatedDateTo", createdDateTo) :
                new ObjectParameter("CreatedDateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MotorApplication_Report_SendForCoverExcel_Select_Result1>("usp_MotorApplication_Report_SendForCoverExcel_Select", dateCaseParameter, periodTypeIDParameter, periodFromParameter, periodToParameter, startCorverDateParameter, endCoverDateParameter, createdDateFromParameter, createdDateToParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_MotorApplicationSendForCoverV2_Insert(Nullable<int> periodTypeID, Nullable<System.DateTime> period, Nullable<int> createdBy_ID, Nullable<int> motorApplicationContractType_ID)
        {
            var periodTypeIDParameter = periodTypeID.HasValue ?
                new ObjectParameter("PeriodTypeID", periodTypeID) :
                new ObjectParameter("PeriodTypeID", typeof(int));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var createdBy_IDParameter = createdBy_ID.HasValue ?
                new ObjectParameter("CreatedBy_ID", createdBy_ID) :
                new ObjectParameter("CreatedBy_ID", typeof(int));
    
            var motorApplicationContractType_IDParameter = motorApplicationContractType_ID.HasValue ?
                new ObjectParameter("MotorApplicationContractType_ID", motorApplicationContractType_ID) :
                new ObjectParameter("MotorApplicationContractType_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_MotorApplicationSendForCoverV2_Insert", periodTypeIDParameter, periodParameter, createdBy_IDParameter, motorApplicationContractType_IDParameter);
        }
    
        public virtual ObjectResult<usp_MotorApplication_Report_SendForCoverPremium_Select_Result> usp_MotorApplication_Report_SendForCoverPremium_Select(Nullable<int> periodTypeID, Nullable<System.DateTime> period, Nullable<int> motorApplicationContractType_ID)
        {
            var periodTypeIDParameter = periodTypeID.HasValue ?
                new ObjectParameter("PeriodTypeID", periodTypeID) :
                new ObjectParameter("PeriodTypeID", typeof(int));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var motorApplicationContractType_IDParameter = motorApplicationContractType_ID.HasValue ?
                new ObjectParameter("MotorApplicationContractType_ID", motorApplicationContractType_ID) :
                new ObjectParameter("MotorApplicationContractType_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MotorApplication_Report_SendForCoverPremium_Select_Result>("usp_MotorApplication_Report_SendForCoverPremium_Select", periodTypeIDParameter, periodParameter, motorApplicationContractType_IDParameter);
        }
    
        public virtual ObjectResult<usp_MotorApplication_Report_SendForCoverPremiumExcel_Select_Result> usp_MotorApplication_Report_SendForCoverPremiumExcel_Select(Nullable<int> periodTypeID, Nullable<System.DateTime> period, Nullable<int> motorApplicationContractType_ID)
        {
            var periodTypeIDParameter = periodTypeID.HasValue ?
                new ObjectParameter("PeriodTypeID", periodTypeID) :
                new ObjectParameter("PeriodTypeID", typeof(int));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var motorApplicationContractType_IDParameter = motorApplicationContractType_ID.HasValue ?
                new ObjectParameter("MotorApplicationContractType_ID", motorApplicationContractType_ID) :
                new ObjectParameter("MotorApplicationContractType_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MotorApplication_Report_SendForCoverPremiumExcel_Select_Result>("usp_MotorApplication_Report_SendForCoverPremiumExcel_Select", periodTypeIDParameter, periodParameter, motorApplicationContractType_IDParameter);
        }
    
        public virtual int usp_CustomerApplication_Motor_Person_InsertOrUpdate(Nullable<int> applicationId, Nullable<int> personId, string type, Nullable<int> createdByUserId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(int));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CustomerApplication_Motor_Person_InsertOrUpdate", applicationIdParameter, personIdParameter, typeParameter, createdByUserIdParameter);
        }
    }
}
