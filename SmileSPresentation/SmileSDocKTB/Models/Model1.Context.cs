//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmileSDocKTB.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DocumentKTBContext : DbContext
    {
        public DocumentKTBContext()
            : base("name=DocumentKTBContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<usp_AccountKTBDocumnet_Select_Result> usp_AccountKTBDocumnet_Select(string accountNo)
        {
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AccountKTBDocumnet_Select_Result>("usp_AccountKTBDocumnet_Select", accountNoParameter);
        }
    
        public virtual ObjectResult<usp_AccountKTBDocumnet_Update_Result> usp_AccountKTBDocumnet_Update(Nullable<int> accountKTBId, string accountName, Nullable<int> boxId, Nullable<bool> isCorrect, Nullable<bool> inCorrect_Signature, Nullable<bool> inCorrect_AccountNo, Nullable<bool> inCorrect_ContactBranch, Nullable<bool> inCorrect_AccountClosed, Nullable<bool> inCorrect_AccountUnAvailable, Nullable<bool> inCorrect_AccountUnmatch, Nullable<bool> inCorrect_Other, string inCorrect_OtherRemark, Nullable<int> createdByUserId)
        {
            var accountKTBIdParameter = accountKTBId.HasValue ?
                new ObjectParameter("AccountKTBId", accountKTBId) :
                new ObjectParameter("AccountKTBId", typeof(int));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var boxIdParameter = boxId.HasValue ?
                new ObjectParameter("BoxId", boxId) :
                new ObjectParameter("BoxId", typeof(int));
    
            var isCorrectParameter = isCorrect.HasValue ?
                new ObjectParameter("IsCorrect", isCorrect) :
                new ObjectParameter("IsCorrect", typeof(bool));
    
            var inCorrect_SignatureParameter = inCorrect_Signature.HasValue ?
                new ObjectParameter("InCorrect_Signature", inCorrect_Signature) :
                new ObjectParameter("InCorrect_Signature", typeof(bool));
    
            var inCorrect_AccountNoParameter = inCorrect_AccountNo.HasValue ?
                new ObjectParameter("InCorrect_AccountNo", inCorrect_AccountNo) :
                new ObjectParameter("InCorrect_AccountNo", typeof(bool));
    
            var inCorrect_ContactBranchParameter = inCorrect_ContactBranch.HasValue ?
                new ObjectParameter("InCorrect_ContactBranch", inCorrect_ContactBranch) :
                new ObjectParameter("InCorrect_ContactBranch", typeof(bool));
    
            var inCorrect_AccountClosedParameter = inCorrect_AccountClosed.HasValue ?
                new ObjectParameter("InCorrect_AccountClosed", inCorrect_AccountClosed) :
                new ObjectParameter("InCorrect_AccountClosed", typeof(bool));
    
            var inCorrect_AccountUnAvailableParameter = inCorrect_AccountUnAvailable.HasValue ?
                new ObjectParameter("InCorrect_AccountUnAvailable", inCorrect_AccountUnAvailable) :
                new ObjectParameter("InCorrect_AccountUnAvailable", typeof(bool));
    
            var inCorrect_AccountUnmatchParameter = inCorrect_AccountUnmatch.HasValue ?
                new ObjectParameter("InCorrect_AccountUnmatch", inCorrect_AccountUnmatch) :
                new ObjectParameter("InCorrect_AccountUnmatch", typeof(bool));
    
            var inCorrect_OtherParameter = inCorrect_Other.HasValue ?
                new ObjectParameter("InCorrect_Other", inCorrect_Other) :
                new ObjectParameter("InCorrect_Other", typeof(bool));
    
            var inCorrect_OtherRemarkParameter = inCorrect_OtherRemark != null ?
                new ObjectParameter("InCorrect_OtherRemark", inCorrect_OtherRemark) :
                new ObjectParameter("InCorrect_OtherRemark", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AccountKTBDocumnet_Update_Result>("usp_AccountKTBDocumnet_Update", accountKTBIdParameter, accountNameParameter, boxIdParameter, isCorrectParameter, inCorrect_SignatureParameter, inCorrect_AccountNoParameter, inCorrect_ContactBranchParameter, inCorrect_AccountClosedParameter, inCorrect_AccountUnAvailableParameter, inCorrect_AccountUnmatchParameter, inCorrect_OtherParameter, inCorrect_OtherRemarkParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_BoxNo_Select_Result> usp_BoxNo_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BoxNo_Select_Result>("usp_BoxNo_Select");
        }
    
        public virtual ObjectResult<usp_AccountKTB_Select_Result> usp_AccountKTB_Select(string accountNo)
        {
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AccountKTB_Select_Result>("usp_AccountKTB_Select", accountNoParameter);
        }
    
        public virtual ObjectResult<usp_AccountKTBDocumnet_Insert_Result> usp_AccountKTBDocumnet_Insert(string accountNo, string accountName, Nullable<int> boxId, Nullable<bool> isCorrect, Nullable<bool> inCorrect_Signature, Nullable<bool> inCorrect_AccountNo, Nullable<bool> inCorrect_ContactBranch, Nullable<bool> inCorrect_AccountClosed, Nullable<bool> inCorrect_AccountUnAvailable, Nullable<bool> inCorrect_AccountUnmatch, Nullable<bool> inCorrect_Other, string inCorrect_OtherRemark, Nullable<int> createdByUserId)
        {
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var boxIdParameter = boxId.HasValue ?
                new ObjectParameter("BoxId", boxId) :
                new ObjectParameter("BoxId", typeof(int));
    
            var isCorrectParameter = isCorrect.HasValue ?
                new ObjectParameter("IsCorrect", isCorrect) :
                new ObjectParameter("IsCorrect", typeof(bool));
    
            var inCorrect_SignatureParameter = inCorrect_Signature.HasValue ?
                new ObjectParameter("InCorrect_Signature", inCorrect_Signature) :
                new ObjectParameter("InCorrect_Signature", typeof(bool));
    
            var inCorrect_AccountNoParameter = inCorrect_AccountNo.HasValue ?
                new ObjectParameter("InCorrect_AccountNo", inCorrect_AccountNo) :
                new ObjectParameter("InCorrect_AccountNo", typeof(bool));
    
            var inCorrect_ContactBranchParameter = inCorrect_ContactBranch.HasValue ?
                new ObjectParameter("InCorrect_ContactBranch", inCorrect_ContactBranch) :
                new ObjectParameter("InCorrect_ContactBranch", typeof(bool));
    
            var inCorrect_AccountClosedParameter = inCorrect_AccountClosed.HasValue ?
                new ObjectParameter("InCorrect_AccountClosed", inCorrect_AccountClosed) :
                new ObjectParameter("InCorrect_AccountClosed", typeof(bool));
    
            var inCorrect_AccountUnAvailableParameter = inCorrect_AccountUnAvailable.HasValue ?
                new ObjectParameter("InCorrect_AccountUnAvailable", inCorrect_AccountUnAvailable) :
                new ObjectParameter("InCorrect_AccountUnAvailable", typeof(bool));
    
            var inCorrect_AccountUnmatchParameter = inCorrect_AccountUnmatch.HasValue ?
                new ObjectParameter("InCorrect_AccountUnmatch", inCorrect_AccountUnmatch) :
                new ObjectParameter("InCorrect_AccountUnmatch", typeof(bool));
    
            var inCorrect_OtherParameter = inCorrect_Other.HasValue ?
                new ObjectParameter("InCorrect_Other", inCorrect_Other) :
                new ObjectParameter("InCorrect_Other", typeof(bool));
    
            var inCorrect_OtherRemarkParameter = inCorrect_OtherRemark != null ?
                new ObjectParameter("InCorrect_OtherRemark", inCorrect_OtherRemark) :
                new ObjectParameter("InCorrect_OtherRemark", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AccountKTBDocumnet_Insert_Result>("usp_AccountKTBDocumnet_Insert", accountNoParameter, accountNameParameter, boxIdParameter, isCorrectParameter, inCorrect_SignatureParameter, inCorrect_AccountNoParameter, inCorrect_ContactBranchParameter, inCorrect_AccountClosedParameter, inCorrect_AccountUnAvailableParameter, inCorrect_AccountUnmatchParameter, inCorrect_OtherParameter, inCorrect_OtherRemarkParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_AccountKTBDocumentMonitor_Select_Result> usp_AccountKTBDocumentMonitor_Select(Nullable<System.DateTime> updateDateFrom, Nullable<System.DateTime> updateDateTo, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var updateDateFromParameter = updateDateFrom.HasValue ?
                new ObjectParameter("UpdateDateFrom", updateDateFrom) :
                new ObjectParameter("UpdateDateFrom", typeof(System.DateTime));
    
            var updateDateToParameter = updateDateTo.HasValue ?
                new ObjectParameter("UpdateDateTo", updateDateTo) :
                new ObjectParameter("UpdateDateTo", typeof(System.DateTime));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AccountKTBDocumentMonitor_Select_Result>("usp_AccountKTBDocumentMonitor_Select", updateDateFromParameter, updateDateToParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ReportAccountKTBDocument_Select_Result> usp_ReportAccountKTBDocument_Select(Nullable<int> updateByUserId, Nullable<System.DateTime> updateDateFrom, Nullable<System.DateTime> updateDateTo)
        {
            var updateByUserIdParameter = updateByUserId.HasValue ?
                new ObjectParameter("UpdateByUserId", updateByUserId) :
                new ObjectParameter("UpdateByUserId", typeof(int));
    
            var updateDateFromParameter = updateDateFrom.HasValue ?
                new ObjectParameter("UpdateDateFrom", updateDateFrom) :
                new ObjectParameter("UpdateDateFrom", typeof(System.DateTime));
    
            var updateDateToParameter = updateDateTo.HasValue ?
                new ObjectParameter("UpdateDateTo", updateDateTo) :
                new ObjectParameter("UpdateDateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ReportAccountKTBDocument_Select_Result>("usp_ReportAccountKTBDocument_Select", updateByUserIdParameter, updateDateFromParameter, updateDateToParameter);
        }
    
        public virtual ObjectResult<usp_MasterAccountNo_Select_Result> usp_MasterAccountNo_Select(string accountNo)
        {
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MasterAccountNo_Select_Result>("usp_MasterAccountNo_Select", accountNoParameter);
        }
    
        public virtual ObjectResult<usp_AccountKTBDocumentMonitor_Select_v2_Result> usp_AccountKTBDocumentMonitor_Select_v2(Nullable<System.DateTime> updateDateFrom, Nullable<System.DateTime> updateDateTo, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var updateDateFromParameter = updateDateFrom.HasValue ?
                new ObjectParameter("UpdateDateFrom", updateDateFrom) :
                new ObjectParameter("UpdateDateFrom", typeof(System.DateTime));
    
            var updateDateToParameter = updateDateTo.HasValue ?
                new ObjectParameter("UpdateDateTo", updateDateTo) :
                new ObjectParameter("UpdateDateTo", typeof(System.DateTime));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AccountKTBDocumentMonitor_Select_v2_Result>("usp_AccountKTBDocumentMonitor_Select_v2", updateDateFromParameter, updateDateToParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_AccountKTBDocumnet_Insert_v2_Result> usp_AccountKTBDocumnet_Insert_v2(string accountNo, string accountName, Nullable<int> boxId, Nullable<int> documentResultStatusId, Nullable<bool> inCorrect_Signature, Nullable<bool> inCorrect_AccountNo, Nullable<bool> inCorrect_ContactBranch, Nullable<bool> inCorrect_AccountClosed, Nullable<bool> inCorrect_AccountUnAvailable, Nullable<bool> inCorrect_AccountUnmatch, Nullable<bool> inCorrect_Other, string inCorrect_OtherRemark, Nullable<int> createdByUserId)
        {
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var boxIdParameter = boxId.HasValue ?
                new ObjectParameter("BoxId", boxId) :
                new ObjectParameter("BoxId", typeof(int));
    
            var documentResultStatusIdParameter = documentResultStatusId.HasValue ?
                new ObjectParameter("DocumentResultStatusId", documentResultStatusId) :
                new ObjectParameter("DocumentResultStatusId", typeof(int));
    
            var inCorrect_SignatureParameter = inCorrect_Signature.HasValue ?
                new ObjectParameter("InCorrect_Signature", inCorrect_Signature) :
                new ObjectParameter("InCorrect_Signature", typeof(bool));
    
            var inCorrect_AccountNoParameter = inCorrect_AccountNo.HasValue ?
                new ObjectParameter("InCorrect_AccountNo", inCorrect_AccountNo) :
                new ObjectParameter("InCorrect_AccountNo", typeof(bool));
    
            var inCorrect_ContactBranchParameter = inCorrect_ContactBranch.HasValue ?
                new ObjectParameter("InCorrect_ContactBranch", inCorrect_ContactBranch) :
                new ObjectParameter("InCorrect_ContactBranch", typeof(bool));
    
            var inCorrect_AccountClosedParameter = inCorrect_AccountClosed.HasValue ?
                new ObjectParameter("InCorrect_AccountClosed", inCorrect_AccountClosed) :
                new ObjectParameter("InCorrect_AccountClosed", typeof(bool));
    
            var inCorrect_AccountUnAvailableParameter = inCorrect_AccountUnAvailable.HasValue ?
                new ObjectParameter("InCorrect_AccountUnAvailable", inCorrect_AccountUnAvailable) :
                new ObjectParameter("InCorrect_AccountUnAvailable", typeof(bool));
    
            var inCorrect_AccountUnmatchParameter = inCorrect_AccountUnmatch.HasValue ?
                new ObjectParameter("InCorrect_AccountUnmatch", inCorrect_AccountUnmatch) :
                new ObjectParameter("InCorrect_AccountUnmatch", typeof(bool));
    
            var inCorrect_OtherParameter = inCorrect_Other.HasValue ?
                new ObjectParameter("InCorrect_Other", inCorrect_Other) :
                new ObjectParameter("InCorrect_Other", typeof(bool));
    
            var inCorrect_OtherRemarkParameter = inCorrect_OtherRemark != null ?
                new ObjectParameter("InCorrect_OtherRemark", inCorrect_OtherRemark) :
                new ObjectParameter("InCorrect_OtherRemark", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AccountKTBDocumnet_Insert_v2_Result>("usp_AccountKTBDocumnet_Insert_v2", accountNoParameter, accountNameParameter, boxIdParameter, documentResultStatusIdParameter, inCorrect_SignatureParameter, inCorrect_AccountNoParameter, inCorrect_ContactBranchParameter, inCorrect_AccountClosedParameter, inCorrect_AccountUnAvailableParameter, inCorrect_AccountUnmatchParameter, inCorrect_OtherParameter, inCorrect_OtherRemarkParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_ReportAccountKTBDocument_Select_v2_Result> usp_ReportAccountKTBDocument_Select_v2(Nullable<int> updateByUserId, Nullable<System.DateTime> updateDateFrom, Nullable<System.DateTime> updateDateTo)
        {
            var updateByUserIdParameter = updateByUserId.HasValue ?
                new ObjectParameter("UpdateByUserId", updateByUserId) :
                new ObjectParameter("UpdateByUserId", typeof(int));
    
            var updateDateFromParameter = updateDateFrom.HasValue ?
                new ObjectParameter("UpdateDateFrom", updateDateFrom) :
                new ObjectParameter("UpdateDateFrom", typeof(System.DateTime));
    
            var updateDateToParameter = updateDateTo.HasValue ?
                new ObjectParameter("UpdateDateTo", updateDateTo) :
                new ObjectParameter("UpdateDateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ReportAccountKTBDocument_Select_v2_Result>("usp_ReportAccountKTBDocument_Select_v2", updateByUserIdParameter, updateDateFromParameter, updateDateToParameter);
        }
    
        public virtual ObjectResult<usp_ProcessKtb_Select_Result> usp_ProcessKtb_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProcessKtb_Select_Result>("usp_ProcessKtb_Select");
        }
    
        public virtual ObjectResult<usp_ReportAccountKTBGraphSummary_Select_Result> usp_ReportAccountKTBGraphSummary_Select(Nullable<System.DateTime> updateDateFrom, Nullable<System.DateTime> updateDateTo, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail, Nullable<bool> isOnlyKTB)
        {
            var updateDateFromParameter = updateDateFrom.HasValue ?
                new ObjectParameter("UpdateDateFrom", updateDateFrom) :
                new ObjectParameter("UpdateDateFrom", typeof(System.DateTime));
    
            var updateDateToParameter = updateDateTo.HasValue ?
                new ObjectParameter("UpdateDateTo", updateDateTo) :
                new ObjectParameter("UpdateDateTo", typeof(System.DateTime));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            var isOnlyKTBParameter = isOnlyKTB.HasValue ?
                new ObjectParameter("IsOnlyKTB", isOnlyKTB) :
                new ObjectParameter("IsOnlyKTB", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ReportAccountKTBGraphSummary_Select_Result>("usp_ReportAccountKTBGraphSummary_Select", updateDateFromParameter, updateDateToParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter, isOnlyKTBParameter);
        }
    
        public virtual ObjectResult<usp_ReportAccountKTBGraphBoxCountQuantity_Select_Result> usp_ReportAccountKTBGraphBoxCountQuantity_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ReportAccountKTBGraphBoxCountQuantity_Select_Result>("usp_ReportAccountKTBGraphBoxCountQuantity_Select");
        }
    
        public virtual ObjectResult<usp_ReportAccountKTBGraphDailySummary_Select_Result> usp_ReportAccountKTBGraphDailySummary_Select(Nullable<System.DateTime> createdDateFrom, Nullable<System.DateTime> createdDateTo)
        {
            var createdDateFromParameter = createdDateFrom.HasValue ?
                new ObjectParameter("CreatedDateFrom", createdDateFrom) :
                new ObjectParameter("CreatedDateFrom", typeof(System.DateTime));
    
            var createdDateToParameter = createdDateTo.HasValue ?
                new ObjectParameter("CreatedDateTo", createdDateTo) :
                new ObjectParameter("CreatedDateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ReportAccountKTBGraphDailySummary_Select_Result>("usp_ReportAccountKTBGraphDailySummary_Select", createdDateFromParameter, createdDateToParameter);
        }
    
        public virtual ObjectResult<usp_DocumentKTB_Insert_Result> usp_DocumentKTB_Insert(Nullable<int> createdByUserId)
        {
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DocumentKTB_Insert_Result>("usp_DocumentKTB_Insert", createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_DocumentKTB_Update_Result> usp_DocumentKTB_Update(Nullable<int> accountKTBId, Nullable<int> bankId, string accountNo, string accountName, Nullable<int> boxId, Nullable<bool> isCorrect, Nullable<bool> inCorrect_Signature, Nullable<bool> inCorrect_AccountNo, Nullable<bool> inCorrect_ContactBranch, Nullable<bool> inCorrect_AccountClosed, Nullable<bool> inCorrect_AccountUnAvailable, Nullable<bool> inCorrect_AccountUnmatch, Nullable<bool> inCorrect_Other, string inCorrect_OtherRemark, Nullable<int> documentResultStatusId, Nullable<int> createdByUserId)
        {
            var accountKTBIdParameter = accountKTBId.HasValue ?
                new ObjectParameter("AccountKTBId", accountKTBId) :
                new ObjectParameter("AccountKTBId", typeof(int));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var boxIdParameter = boxId.HasValue ?
                new ObjectParameter("BoxId", boxId) :
                new ObjectParameter("BoxId", typeof(int));
    
            var isCorrectParameter = isCorrect.HasValue ?
                new ObjectParameter("IsCorrect", isCorrect) :
                new ObjectParameter("IsCorrect", typeof(bool));
    
            var inCorrect_SignatureParameter = inCorrect_Signature.HasValue ?
                new ObjectParameter("InCorrect_Signature", inCorrect_Signature) :
                new ObjectParameter("InCorrect_Signature", typeof(bool));
    
            var inCorrect_AccountNoParameter = inCorrect_AccountNo.HasValue ?
                new ObjectParameter("InCorrect_AccountNo", inCorrect_AccountNo) :
                new ObjectParameter("InCorrect_AccountNo", typeof(bool));
    
            var inCorrect_ContactBranchParameter = inCorrect_ContactBranch.HasValue ?
                new ObjectParameter("InCorrect_ContactBranch", inCorrect_ContactBranch) :
                new ObjectParameter("InCorrect_ContactBranch", typeof(bool));
    
            var inCorrect_AccountClosedParameter = inCorrect_AccountClosed.HasValue ?
                new ObjectParameter("InCorrect_AccountClosed", inCorrect_AccountClosed) :
                new ObjectParameter("InCorrect_AccountClosed", typeof(bool));
    
            var inCorrect_AccountUnAvailableParameter = inCorrect_AccountUnAvailable.HasValue ?
                new ObjectParameter("InCorrect_AccountUnAvailable", inCorrect_AccountUnAvailable) :
                new ObjectParameter("InCorrect_AccountUnAvailable", typeof(bool));
    
            var inCorrect_AccountUnmatchParameter = inCorrect_AccountUnmatch.HasValue ?
                new ObjectParameter("InCorrect_AccountUnmatch", inCorrect_AccountUnmatch) :
                new ObjectParameter("InCorrect_AccountUnmatch", typeof(bool));
    
            var inCorrect_OtherParameter = inCorrect_Other.HasValue ?
                new ObjectParameter("InCorrect_Other", inCorrect_Other) :
                new ObjectParameter("InCorrect_Other", typeof(bool));
    
            var inCorrect_OtherRemarkParameter = inCorrect_OtherRemark != null ?
                new ObjectParameter("InCorrect_OtherRemark", inCorrect_OtherRemark) :
                new ObjectParameter("InCorrect_OtherRemark", typeof(string));
    
            var documentResultStatusIdParameter = documentResultStatusId.HasValue ?
                new ObjectParameter("DocumentResultStatusId", documentResultStatusId) :
                new ObjectParameter("DocumentResultStatusId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DocumentKTB_Update_Result>("usp_DocumentKTB_Update", accountKTBIdParameter, bankIdParameter, accountNoParameter, accountNameParameter, boxIdParameter, isCorrectParameter, inCorrect_SignatureParameter, inCorrect_AccountNoParameter, inCorrect_ContactBranchParameter, inCorrect_AccountClosedParameter, inCorrect_AccountUnAvailableParameter, inCorrect_AccountUnmatchParameter, inCorrect_OtherParameter, inCorrect_OtherRemarkParameter, documentResultStatusIdParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_CountDocument_Result> usp_CountDocument(string documentCode)
        {
            var documentCodeParameter = documentCode != null ?
                new ObjectParameter("DocumentCode", documentCode) :
                new ObjectParameter("DocumentCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CountDocument_Result>("usp_CountDocument", documentCodeParameter);
        }
    }
}
