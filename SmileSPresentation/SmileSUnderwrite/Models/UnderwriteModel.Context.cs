//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmileSUnderwrite.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class UnderwriteDBContext : DbContext
    {
        public UnderwriteDBContext()
            : base("name=UnderwriteDBContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ImportQueueDetail> ImportQueueDetails { get; set; }
    
        [DbFunction("UnderwriteDBContext", "func_AnswerDetail")]
        public virtual IQueryable<func_AnswerDetail_Result> func_AnswerDetail(Nullable<int> underwriteId)
        {
            var underwriteIdParameter = underwriteId.HasValue ?
                new ObjectParameter("UnderwriteId", underwriteId) :
                new ObjectParameter("UnderwriteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_AnswerDetail_Result>("[UnderwriteDBContext].[func_AnswerDetail](@UnderwriteId)", underwriteIdParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<usp_AnswerDetail_Select_Result> usp_AnswerDetail_Select(Nullable<int> underwriteId)
        {
            var underwriteIdParameter = underwriteId.HasValue ?
                new ObjectParameter("UnderwriteId", underwriteId) :
                new ObjectParameter("UnderwriteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AnswerDetail_Select_Result>("usp_AnswerDetail_Select", underwriteIdParameter);
        }
    
        public virtual ObjectResult<usp_ApplicationDetail_Select_Result> usp_ApplicationDetail_Select(string applicationCode)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ApplicationDetail_Select_Result>("usp_ApplicationDetail_Select", applicationCodeParameter);
        }
    
        public virtual ObjectResult<usp_AssignQueue_Result> usp_AssignQueue(Nullable<int> queueId, Nullable<int> assignToUserId, Nullable<int> createdByUserId)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AssignQueue_Result>("usp_AssignQueue", queueIdParameter, assignToUserIdParameter, createdByUserIdParameter);
        }
    
        public virtual int usp_Call_Insert(Nullable<int> underwriteId, Nullable<int> callStatusId, string otherText, string contactName, Nullable<int> createByUserId)
        {
            var underwriteIdParameter = underwriteId.HasValue ?
                new ObjectParameter("UnderwriteId", underwriteId) :
                new ObjectParameter("UnderwriteId", typeof(int));
    
            var callStatusIdParameter = callStatusId.HasValue ?
                new ObjectParameter("CallStatusId", callStatusId) :
                new ObjectParameter("CallStatusId", typeof(int));
    
            var otherTextParameter = otherText != null ?
                new ObjectParameter("OtherText", otherText) :
                new ObjectParameter("OtherText", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var createByUserIdParameter = createByUserId.HasValue ?
                new ObjectParameter("CreateByUserId", createByUserId) :
                new ObjectParameter("CreateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Call_Insert", underwriteIdParameter, callStatusIdParameter, otherTextParameter, contactNameParameter, createByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_Call_Select_Result> usp_Call_Select(Nullable<int> underwriteId, Nullable<bool> isActive)
        {
            var underwriteIdParameter = underwriteId.HasValue ?
                new ObjectParameter("UnderwriteId", underwriteId) :
                new ObjectParameter("UnderwriteId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Call_Select_Result>("usp_Call_Select", underwriteIdParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_DropdownlistFilterType_Select_Result> usp_DropdownlistFilterType_Select(Nullable<int> filterTypeId, string valueCode)
        {
            var filterTypeIdParameter = filterTypeId.HasValue ?
                new ObjectParameter("FilterTypeId", filterTypeId) :
                new ObjectParameter("FilterTypeId", typeof(int));
    
            var valueCodeParameter = valueCode != null ?
                new ObjectParameter("ValueCode", valueCode) :
                new ObjectParameter("ValueCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DropdownlistFilterType_Select_Result>("usp_DropdownlistFilterType_Select", filterTypeIdParameter, valueCodeParameter);
        }
    
        public virtual int usp_Ex_DynamicPivot()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Ex_DynamicPivot");
        }
    
        public virtual ObjectResult<usp_QueueLog_Select_Result> usp_QueueLog_Select(Nullable<int> queueId, Nullable<int> transactionTypeId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var transactionTypeIdParameter = transactionTypeId.HasValue ?
                new ObjectParameter("TransactionTypeId", transactionTypeId) :
                new ObjectParameter("TransactionTypeId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueLog_Select_Result>("usp_QueueLog_Select", queueIdParameter, transactionTypeIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual ObjectResult<usp_QueueStatus_Update_Result> usp_QueueStatus_Update(Nullable<int> queueId, Nullable<int> queueStatusId, Nullable<int> createdByUserId)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var queueStatusIdParameter = queueStatusId.HasValue ?
                new ObjectParameter("QueueStatusId", queueStatusId) :
                new ObjectParameter("QueueStatusId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueStatus_Update_Result>("usp_QueueStatus_Update", queueIdParameter, queueStatusIdParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueType_Select_Result> usp_QueueType_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueType_Select_Result>("usp_QueueType_Select");
        }
    
        public virtual ObjectResult<usp_QueueUnderwrite_Select_Result> usp_QueueUnderwrite_Select(Nullable<int> queueId, Nullable<int> queueTypeId, Nullable<int> queueStatusId, Nullable<int> assignToUserId, Nullable<System.DateTime> createDateFrom, Nullable<System.DateTime> createDateTo, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string search, string yearData)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var queueTypeIdParameter = queueTypeId.HasValue ?
                new ObjectParameter("QueueTypeId", queueTypeId) :
                new ObjectParameter("QueueTypeId", typeof(int));
    
            var queueStatusIdParameter = queueStatusId.HasValue ?
                new ObjectParameter("QueueStatusId", queueStatusId) :
                new ObjectParameter("QueueStatusId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var createDateFromParameter = createDateFrom.HasValue ?
                new ObjectParameter("CreateDateFrom", createDateFrom) :
                new ObjectParameter("CreateDateFrom", typeof(System.DateTime));
    
            var createDateToParameter = createDateTo.HasValue ?
                new ObjectParameter("CreateDateTo", createDateTo) :
                new ObjectParameter("CreateDateTo", typeof(System.DateTime));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var yearDataParameter = yearData != null ?
                new ObjectParameter("YearData", yearData) :
                new ObjectParameter("YearData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueUnderwrite_Select_Result>("usp_QueueUnderwrite_Select", queueIdParameter, queueTypeIdParameter, queueStatusIdParameter, assignToUserIdParameter, createDateFromParameter, createDateToParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter, yearDataParameter);
        }
    
        public virtual ObjectResult<usp_UdwQ2_InsertOrUpdate_Result> usp_UdwQ2_InsertOrUpdate(Nullable<int> underwriteId, Nullable<int> underwriteStatusId, Nullable<double> corruptAmount, string remark, Nullable<int> createdByUserId, Nullable<bool> a2, string a3, Nullable<bool> a4, string a5, Nullable<bool> a6, Nullable<bool> a7, Nullable<bool> a8, Nullable<System.DateTime> a9, Nullable<bool> a10, string a11)
        {
            var underwriteIdParameter = underwriteId.HasValue ?
                new ObjectParameter("UnderwriteId", underwriteId) :
                new ObjectParameter("UnderwriteId", typeof(int));
    
            var underwriteStatusIdParameter = underwriteStatusId.HasValue ?
                new ObjectParameter("UnderwriteStatusId", underwriteStatusId) :
                new ObjectParameter("UnderwriteStatusId", typeof(int));
    
            var corruptAmountParameter = corruptAmount.HasValue ?
                new ObjectParameter("CorruptAmount", corruptAmount) :
                new ObjectParameter("CorruptAmount", typeof(double));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            var a2Parameter = a2.HasValue ?
                new ObjectParameter("A2", a2) :
                new ObjectParameter("A2", typeof(bool));
    
            var a3Parameter = a3 != null ?
                new ObjectParameter("A3", a3) :
                new ObjectParameter("A3", typeof(string));
    
            var a4Parameter = a4.HasValue ?
                new ObjectParameter("A4", a4) :
                new ObjectParameter("A4", typeof(bool));
    
            var a5Parameter = a5 != null ?
                new ObjectParameter("A5", a5) :
                new ObjectParameter("A5", typeof(string));
    
            var a6Parameter = a6.HasValue ?
                new ObjectParameter("A6", a6) :
                new ObjectParameter("A6", typeof(bool));
    
            var a7Parameter = a7.HasValue ?
                new ObjectParameter("A7", a7) :
                new ObjectParameter("A7", typeof(bool));
    
            var a8Parameter = a8.HasValue ?
                new ObjectParameter("A8", a8) :
                new ObjectParameter("A8", typeof(bool));
    
            var a9Parameter = a9.HasValue ?
                new ObjectParameter("A9", a9) :
                new ObjectParameter("A9", typeof(System.DateTime));
    
            var a10Parameter = a10.HasValue ?
                new ObjectParameter("A10", a10) :
                new ObjectParameter("A10", typeof(bool));
    
            var a11Parameter = a11 != null ?
                new ObjectParameter("A11", a11) :
                new ObjectParameter("A11", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UdwQ2_InsertOrUpdate_Result>("usp_UdwQ2_InsertOrUpdate", underwriteIdParameter, underwriteStatusIdParameter, corruptAmountParameter, remarkParameter, createdByUserIdParameter, a2Parameter, a3Parameter, a4Parameter, a5Parameter, a6Parameter, a7Parameter, a8Parameter, a9Parameter, a10Parameter, a11Parameter);
        }
    
        public virtual ObjectResult<usp_UdwQ2_Select_Result> usp_UdwQ2_Select(Nullable<int> underwriteId)
        {
            var underwriteIdParameter = underwriteId.HasValue ?
                new ObjectParameter("UnderwriteId", underwriteId) :
                new ObjectParameter("UnderwriteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UdwQ2_Select_Result>("usp_UdwQ2_Select", underwriteIdParameter);
        }
    
        public virtual ObjectResult<usp_UdwQ3_InsertOrUpdate_Result> usp_UdwQ3_InsertOrUpdate(Nullable<int> underwriteId, Nullable<int> underwriteStatusId, Nullable<double> corruptAmount, string remark, Nullable<int> createdByUserId, Nullable<bool> a12, string a13, Nullable<bool> a14, string a15, Nullable<bool> a16, Nullable<bool> a17, Nullable<bool> a18, string a19)
        {
            var underwriteIdParameter = underwriteId.HasValue ?
                new ObjectParameter("UnderwriteId", underwriteId) :
                new ObjectParameter("UnderwriteId", typeof(int));
    
            var underwriteStatusIdParameter = underwriteStatusId.HasValue ?
                new ObjectParameter("UnderwriteStatusId", underwriteStatusId) :
                new ObjectParameter("UnderwriteStatusId", typeof(int));
    
            var corruptAmountParameter = corruptAmount.HasValue ?
                new ObjectParameter("CorruptAmount", corruptAmount) :
                new ObjectParameter("CorruptAmount", typeof(double));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            var a12Parameter = a12.HasValue ?
                new ObjectParameter("A12", a12) :
                new ObjectParameter("A12", typeof(bool));
    
            var a13Parameter = a13 != null ?
                new ObjectParameter("A13", a13) :
                new ObjectParameter("A13", typeof(string));
    
            var a14Parameter = a14.HasValue ?
                new ObjectParameter("A14", a14) :
                new ObjectParameter("A14", typeof(bool));
    
            var a15Parameter = a15 != null ?
                new ObjectParameter("A15", a15) :
                new ObjectParameter("A15", typeof(string));
    
            var a16Parameter = a16.HasValue ?
                new ObjectParameter("A16", a16) :
                new ObjectParameter("A16", typeof(bool));
    
            var a17Parameter = a17.HasValue ?
                new ObjectParameter("A17", a17) :
                new ObjectParameter("A17", typeof(bool));
    
            var a18Parameter = a18.HasValue ?
                new ObjectParameter("A18", a18) :
                new ObjectParameter("A18", typeof(bool));
    
            var a19Parameter = a19 != null ?
                new ObjectParameter("A19", a19) :
                new ObjectParameter("A19", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UdwQ3_InsertOrUpdate_Result>("usp_UdwQ3_InsertOrUpdate", underwriteIdParameter, underwriteStatusIdParameter, corruptAmountParameter, remarkParameter, createdByUserIdParameter, a12Parameter, a13Parameter, a14Parameter, a15Parameter, a16Parameter, a17Parameter, a18Parameter, a19Parameter);
        }
    
        public virtual ObjectResult<usp_UdwQ3_Select_Result> usp_UdwQ3_Select(Nullable<int> underwriteId)
        {
            var underwriteIdParameter = underwriteId.HasValue ?
                new ObjectParameter("UnderwriteId", underwriteId) :
                new ObjectParameter("UnderwriteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UdwQ3_Select_Result>("usp_UdwQ3_Select", underwriteIdParameter);
        }
    
        public virtual ObjectResult<usp_UdwQ4_InsertOrUpdate_Result> usp_UdwQ4_InsertOrUpdate(Nullable<int> underwriteId, Nullable<int> underwriteStatusId, Nullable<double> corruptAmount, string remark, Nullable<int> createdByUserId, Nullable<bool> a20, Nullable<bool> a21, Nullable<bool> a22, string a23, Nullable<bool> a24, string a25, Nullable<bool> a26, string a27, Nullable<bool> a28, string a29, Nullable<bool> a30, Nullable<System.DateTime> a31, string a32)
        {
            var underwriteIdParameter = underwriteId.HasValue ?
                new ObjectParameter("UnderwriteId", underwriteId) :
                new ObjectParameter("UnderwriteId", typeof(int));
    
            var underwriteStatusIdParameter = underwriteStatusId.HasValue ?
                new ObjectParameter("UnderwriteStatusId", underwriteStatusId) :
                new ObjectParameter("UnderwriteStatusId", typeof(int));
    
            var corruptAmountParameter = corruptAmount.HasValue ?
                new ObjectParameter("CorruptAmount", corruptAmount) :
                new ObjectParameter("CorruptAmount", typeof(double));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            var a20Parameter = a20.HasValue ?
                new ObjectParameter("A20", a20) :
                new ObjectParameter("A20", typeof(bool));
    
            var a21Parameter = a21.HasValue ?
                new ObjectParameter("A21", a21) :
                new ObjectParameter("A21", typeof(bool));
    
            var a22Parameter = a22.HasValue ?
                new ObjectParameter("A22", a22) :
                new ObjectParameter("A22", typeof(bool));
    
            var a23Parameter = a23 != null ?
                new ObjectParameter("A23", a23) :
                new ObjectParameter("A23", typeof(string));
    
            var a24Parameter = a24.HasValue ?
                new ObjectParameter("A24", a24) :
                new ObjectParameter("A24", typeof(bool));
    
            var a25Parameter = a25 != null ?
                new ObjectParameter("A25", a25) :
                new ObjectParameter("A25", typeof(string));
    
            var a26Parameter = a26.HasValue ?
                new ObjectParameter("A26", a26) :
                new ObjectParameter("A26", typeof(bool));
    
            var a27Parameter = a27 != null ?
                new ObjectParameter("A27", a27) :
                new ObjectParameter("A27", typeof(string));
    
            var a28Parameter = a28.HasValue ?
                new ObjectParameter("A28", a28) :
                new ObjectParameter("A28", typeof(bool));
    
            var a29Parameter = a29 != null ?
                new ObjectParameter("A29", a29) :
                new ObjectParameter("A29", typeof(string));
    
            var a30Parameter = a30.HasValue ?
                new ObjectParameter("A30", a30) :
                new ObjectParameter("A30", typeof(bool));
    
            var a31Parameter = a31.HasValue ?
                new ObjectParameter("A31", a31) :
                new ObjectParameter("A31", typeof(System.DateTime));
    
            var a32Parameter = a32 != null ?
                new ObjectParameter("A32", a32) :
                new ObjectParameter("A32", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UdwQ4_InsertOrUpdate_Result>("usp_UdwQ4_InsertOrUpdate", underwriteIdParameter, underwriteStatusIdParameter, corruptAmountParameter, remarkParameter, createdByUserIdParameter, a20Parameter, a21Parameter, a22Parameter, a23Parameter, a24Parameter, a25Parameter, a26Parameter, a27Parameter, a28Parameter, a29Parameter, a30Parameter, a31Parameter, a32Parameter);
        }
    
        public virtual ObjectResult<usp_UdwQ4_Select_Result> usp_UdwQ4_Select(Nullable<int> underwriteId)
        {
            var underwriteIdParameter = underwriteId.HasValue ?
                new ObjectParameter("UnderwriteId", underwriteId) :
                new ObjectParameter("UnderwriteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UdwQ4_Select_Result>("usp_UdwQ4_Select", underwriteIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_Underwrite_Insert(Nullable<int> queueId, Nullable<int> createdByUserId)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_Underwrite_Insert", queueIdParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_Underwrite_Select_Result> usp_Underwrite_Select(Nullable<int> underwriteId)
        {
            var underwriteIdParameter = underwriteId.HasValue ?
                new ObjectParameter("UnderwriteId", underwriteId) :
                new ObjectParameter("UnderwriteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Underwrite_Select_Result>("usp_Underwrite_Select", underwriteIdParameter);
        }
    
        public virtual ObjectResult<usp_UnderwriteLog_Select_Result> usp_UnderwriteLog_Select(Nullable<int> referrenceCode, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var referrenceCodeParameter = referrenceCode.HasValue ?
                new ObjectParameter("ReferrenceCode", referrenceCode) :
                new ObjectParameter("ReferrenceCode", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UnderwriteLog_Select_Result>("usp_UnderwriteLog_Select", referrenceCodeParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual ObjectResult<usp_UnderWriteHistoryBySchoolId_Select_Result> usp_UnderWriteHistoryBySchoolId_Select(string schoolId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var schoolIdParameter = schoolId != null ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UnderWriteHistoryBySchoolId_Select_Result>("usp_UnderWriteHistoryBySchoolId_Select", schoolIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual ObjectResult<usp_QueueGroup_Select_Result> usp_QueueGroup_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueGroup_Select_Result>("usp_QueueGroup_Select");
        }
    
        public virtual ObjectResult<usp_QueueTypeV1_Select_Result> usp_QueueTypeV1_Select(Nullable<int> queueGroupId)
        {
            var queueGroupIdParameter = queueGroupId.HasValue ?
                new ObjectParameter("QueueGroupId", queueGroupId) :
                new ObjectParameter("QueueGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueTypeV1_Select_Result>("usp_QueueTypeV1_Select", queueGroupIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_ImportQueueHeader_Insert(Nullable<int> queueTypeId, Nullable<int> year, Nullable<int> createdByUSerId)
        {
            var queueTypeIdParameter = queueTypeId.HasValue ?
                new ObjectParameter("QueueTypeId", queueTypeId) :
                new ObjectParameter("QueueTypeId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var createdByUSerIdParameter = createdByUSerId.HasValue ?
                new ObjectParameter("CreatedByUSerId", createdByUSerId) :
                new ObjectParameter("CreatedByUSerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_ImportQueueHeader_Insert", queueTypeIdParameter, yearParameter, createdByUSerIdParameter);
        }
    
        public virtual ObjectResult<usp_ImportQueueOverView_Select_Result> usp_ImportQueueOverView_Select(Nullable<int> importQueueHeaderId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var importQueueHeaderIdParameter = importQueueHeaderId.HasValue ?
                new ObjectParameter("ImportQueueHeaderId", importQueueHeaderId) :
                new ObjectParameter("ImportQueueHeaderId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ImportQueueOverView_Select_Result>("usp_ImportQueueOverView_Select", importQueueHeaderIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual ObjectResult<usp_ImportQueueSubmit_Result> usp_ImportQueueSubmit(Nullable<int> importQueueHeaderId, Nullable<int> createdByUserId)
        {
            var importQueueHeaderIdParameter = importQueueHeaderId.HasValue ?
                new ObjectParameter("ImportQueueHeaderId", importQueueHeaderId) :
                new ObjectParameter("ImportQueueHeaderId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ImportQueueSubmit_Result>("usp_ImportQueueSubmit", importQueueHeaderIdParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_ImportQueueTemplate_Select_Result> usp_ImportQueueTemplate_Select(Nullable<int> queueTypeId)
        {
            var queueTypeIdParameter = queueTypeId.HasValue ?
                new ObjectParameter("QueueTypeId", queueTypeId) :
                new ObjectParameter("QueueTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ImportQueueTemplate_Select_Result>("usp_ImportQueueTemplate_Select", queueTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_ImportQueueValidate_Select_Result> usp_ImportQueueValidate_Select(Nullable<int> importQueueHeaderId)
        {
            var importQueueHeaderIdParameter = importQueueHeaderId.HasValue ?
                new ObjectParameter("ImportQueueHeaderId", importQueueHeaderId) :
                new ObjectParameter("ImportQueueHeaderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ImportQueueValidate_Select_Result>("usp_ImportQueueValidate_Select", importQueueHeaderIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueMonitor_Select_Result> usp_QueueMonitor_Select(Nullable<int> queueTypeId, Nullable<int> assignToUserId, Nullable<System.DateTime> createdDateFrom, Nullable<System.DateTime> createdDateTo)
        {
            var queueTypeIdParameter = queueTypeId.HasValue ?
                new ObjectParameter("QueueTypeId", queueTypeId) :
                new ObjectParameter("QueueTypeId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var createdDateFromParameter = createdDateFrom.HasValue ?
                new ObjectParameter("CreatedDateFrom", createdDateFrom) :
                new ObjectParameter("CreatedDateFrom", typeof(System.DateTime));
    
            var createdDateToParameter = createdDateTo.HasValue ?
                new ObjectParameter("CreatedDateTo", createdDateTo) :
                new ObjectParameter("CreatedDateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMonitor_Select_Result>("usp_QueueMonitor_Select", queueTypeIdParameter, assignToUserIdParameter, createdDateFromParameter, createdDateToParameter);
        }
    
        public virtual ObjectResult<usp_QueueMonitorV2_Select_Result> usp_QueueMonitorV2_Select(Nullable<int> queueTypeId, Nullable<int> assignToUserId, Nullable<System.DateTime> createdDateFrom, Nullable<System.DateTime> createdDateTo)
        {
            var queueTypeIdParameter = queueTypeId.HasValue ?
                new ObjectParameter("QueueTypeId", queueTypeId) :
                new ObjectParameter("QueueTypeId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var createdDateFromParameter = createdDateFrom.HasValue ?
                new ObjectParameter("CreatedDateFrom", createdDateFrom) :
                new ObjectParameter("CreatedDateFrom", typeof(System.DateTime));
    
            var createdDateToParameter = createdDateTo.HasValue ?
                new ObjectParameter("CreatedDateTo", createdDateTo) :
                new ObjectParameter("CreatedDateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueMonitorV2_Select_Result>("usp_QueueMonitorV2_Select", queueTypeIdParameter, assignToUserIdParameter, createdDateFromParameter, createdDateToParameter);
        }
    
        public virtual ObjectResult<usp_ImportQueueOverViewResult_Select_Result> usp_ImportQueueOverViewResult_Select(Nullable<int> importQueueHeaderId)
        {
            var importQueueHeaderIdParameter = importQueueHeaderId.HasValue ?
                new ObjectParameter("ImportQueueHeaderId", importQueueHeaderId) :
                new ObjectParameter("ImportQueueHeaderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ImportQueueOverViewResult_Select_Result>("usp_ImportQueueOverViewResult_Select", importQueueHeaderIdParameter);
        }
    
        public virtual ObjectResult<usp_UnderwriteRemark_Update_Result> usp_UnderwriteRemark_Update(Nullable<int> underwriteId, string remark, Nullable<int> createdByUserId)
        {
            var underwriteIdParameter = underwriteId.HasValue ?
                new ObjectParameter("UnderwriteId", underwriteId) :
                new ObjectParameter("UnderwriteId", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UnderwriteRemark_Update_Result>("usp_UnderwriteRemark_Update", underwriteIdParameter, remarkParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_InsuranceForUdw_Select_Result> usp_InsuranceForUdw_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_InsuranceForUdw_Select_Result>("usp_InsuranceForUdw_Select");
        }
    
        public virtual ObjectResult<usp_ReceiveTimeLine_Select_Result> usp_ReceiveTimeLine_Select(string applicationCode)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ReceiveTimeLine_Select_Result>("usp_ReceiveTimeLine_Select", applicationCodeParameter);
        }
    
        public virtual ObjectResult<usp_Branch_Select_Result> usp_Branch_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Branch_Select_Result>("usp_Branch_Select");
        }
    
        public virtual ObjectResult<usp_Queue_SelectV2_Result> usp_Queue_SelectV2(Nullable<int> queueId, Nullable<int> queueTypeId, Nullable<int> queueStatusId, Nullable<int> assignToUserId, Nullable<System.DateTime> createDateFrom, Nullable<System.DateTime> createDateTo, Nullable<System.DateTime> assignDateFrom, Nullable<System.DateTime> assignDateTo, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string search, string branch_ID)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var queueTypeIdParameter = queueTypeId.HasValue ?
                new ObjectParameter("QueueTypeId", queueTypeId) :
                new ObjectParameter("QueueTypeId", typeof(int));
    
            var queueStatusIdParameter = queueStatusId.HasValue ?
                new ObjectParameter("QueueStatusId", queueStatusId) :
                new ObjectParameter("QueueStatusId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var createDateFromParameter = createDateFrom.HasValue ?
                new ObjectParameter("CreateDateFrom", createDateFrom) :
                new ObjectParameter("CreateDateFrom", typeof(System.DateTime));
    
            var createDateToParameter = createDateTo.HasValue ?
                new ObjectParameter("CreateDateTo", createDateTo) :
                new ObjectParameter("CreateDateTo", typeof(System.DateTime));
    
            var assignDateFromParameter = assignDateFrom.HasValue ?
                new ObjectParameter("AssignDateFrom", assignDateFrom) :
                new ObjectParameter("AssignDateFrom", typeof(System.DateTime));
    
            var assignDateToParameter = assignDateTo.HasValue ?
                new ObjectParameter("AssignDateTo", assignDateTo) :
                new ObjectParameter("AssignDateTo", typeof(System.DateTime));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var branch_IDParameter = branch_ID != null ?
                new ObjectParameter("Branch_ID", branch_ID) :
                new ObjectParameter("Branch_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Queue_SelectV2_Result>("usp_Queue_SelectV2", queueIdParameter, queueTypeIdParameter, queueStatusIdParameter, assignToUserIdParameter, createDateFromParameter, createDateToParameter, assignDateFromParameter, assignDateToParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter, branch_IDParameter);
        }
    
        public virtual ObjectResult<usp_AssignQueueList_Result> usp_AssignQueueList(Nullable<int> queueTotal, Nullable<int> queueTypeId, Nullable<int> queueStatusId, Nullable<int> assignToUserId, Nullable<int> createdByUserId, string branch_ID)
        {
            var queueTotalParameter = queueTotal.HasValue ?
                new ObjectParameter("QueueTotal", queueTotal) :
                new ObjectParameter("QueueTotal", typeof(int));
    
            var queueTypeIdParameter = queueTypeId.HasValue ?
                new ObjectParameter("QueueTypeId", queueTypeId) :
                new ObjectParameter("QueueTypeId", typeof(int));
    
            var queueStatusIdParameter = queueStatusId.HasValue ?
                new ObjectParameter("QueueStatusId", queueStatusId) :
                new ObjectParameter("QueueStatusId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            var branch_IDParameter = branch_ID != null ?
                new ObjectParameter("Branch_ID", branch_ID) :
                new ObjectParameter("Branch_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AssignQueueList_Result>("usp_AssignQueueList", queueTotalParameter, queueTypeIdParameter, queueStatusIdParameter, assignToUserIdParameter, createdByUserIdParameter, branch_IDParameter);
        }
    
        public virtual ObjectResult<usp_AssignQueueListV2_Result> usp_AssignQueueListV2(Nullable<int> queueId, Nullable<int> queueTypeId, Nullable<int> queueStatusId, Nullable<System.DateTime> createDateFrom, Nullable<System.DateTime> createDateTo, Nullable<System.DateTime> assignDateFrom, Nullable<System.DateTime> assignDateTo, string branch_ID, Nullable<int> assignUserlist, Nullable<int> createdByUserId, Nullable<int> queueTotal)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var queueTypeIdParameter = queueTypeId.HasValue ?
                new ObjectParameter("QueueTypeId", queueTypeId) :
                new ObjectParameter("QueueTypeId", typeof(int));
    
            var queueStatusIdParameter = queueStatusId.HasValue ?
                new ObjectParameter("QueueStatusId", queueStatusId) :
                new ObjectParameter("QueueStatusId", typeof(int));
    
            var createDateFromParameter = createDateFrom.HasValue ?
                new ObjectParameter("CreateDateFrom", createDateFrom) :
                new ObjectParameter("CreateDateFrom", typeof(System.DateTime));
    
            var createDateToParameter = createDateTo.HasValue ?
                new ObjectParameter("CreateDateTo", createDateTo) :
                new ObjectParameter("CreateDateTo", typeof(System.DateTime));
    
            var assignDateFromParameter = assignDateFrom.HasValue ?
                new ObjectParameter("AssignDateFrom", assignDateFrom) :
                new ObjectParameter("AssignDateFrom", typeof(System.DateTime));
    
            var assignDateToParameter = assignDateTo.HasValue ?
                new ObjectParameter("AssignDateTo", assignDateTo) :
                new ObjectParameter("AssignDateTo", typeof(System.DateTime));
    
            var branch_IDParameter = branch_ID != null ?
                new ObjectParameter("Branch_ID", branch_ID) :
                new ObjectParameter("Branch_ID", typeof(string));
    
            var assignUserlistParameter = assignUserlist.HasValue ?
                new ObjectParameter("assignUserlist", assignUserlist) :
                new ObjectParameter("assignUserlist", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            var queueTotalParameter = queueTotal.HasValue ?
                new ObjectParameter("QueueTotal", queueTotal) :
                new ObjectParameter("QueueTotal", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AssignQueueListV2_Result>("usp_AssignQueueListV2", queueIdParameter, queueTypeIdParameter, queueStatusIdParameter, createDateFromParameter, createDateToParameter, assignDateFromParameter, assignDateToParameter, branch_IDParameter, assignUserlistParameter, createdByUserIdParameter, queueTotalParameter);
        }
    
        [DbFunction("UnderwriteDBContext", "func_DT_ImportQueueDetail")]
        public virtual IQueryable<func_DT_ImportQueueDetail_Result> func_DT_ImportQueueDetail(Nullable<int> importQueueHeaderId)
        {
            var importQueueHeaderIdParameter = importQueueHeaderId.HasValue ?
                new ObjectParameter("ImportQueueHeaderId", importQueueHeaderId) :
                new ObjectParameter("ImportQueueHeaderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_DT_ImportQueueDetail_Result>("[UnderwriteDBContext].[func_DT_ImportQueueDetail](@ImportQueueHeaderId)", importQueueHeaderIdParameter);
        }
    
        public virtual int SP_GenerateDictionary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GenerateDictionary");
        }
    
        public virtual int usp_GenerateCode(string transactionCodeControlTypeDetail, Nullable<int> runningLenght, ObjectParameter result)
        {
            var transactionCodeControlTypeDetailParameter = transactionCodeControlTypeDetail != null ?
                new ObjectParameter("TransactionCodeControlTypeDetail", transactionCodeControlTypeDetail) :
                new ObjectParameter("TransactionCodeControlTypeDetail", typeof(string));
    
            var runningLenghtParameter = runningLenght.HasValue ?
                new ObjectParameter("RunningLenght", runningLenght) :
                new ObjectParameter("RunningLenght", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GenerateCode", transactionCodeControlTypeDetailParameter, runningLenghtParameter, result);
        }
    
        public virtual ObjectResult<usp_ImportQueueOverView_SelectV2_Result> usp_ImportQueueOverView_SelectV2(Nullable<int> importQueueHeaderId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var importQueueHeaderIdParameter = importQueueHeaderId.HasValue ?
                new ObjectParameter("ImportQueueHeaderId", importQueueHeaderId) :
                new ObjectParameter("ImportQueueHeaderId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ImportQueueOverView_SelectV2_Result>("usp_ImportQueueOverView_SelectV2", importQueueHeaderIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual int usp_N01_CloseAndCreateQueue_UdwPA()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_N01_CloseAndCreateQueue_UdwPA");
        }
    
        public virtual int usp_N01Sub10_QueueClosed(Nullable<int> queueGroupId, Nullable<int> updatedByUserId)
        {
            var queueGroupIdParameter = queueGroupId.HasValue ?
                new ObjectParameter("QueueGroupId", queueGroupId) :
                new ObjectParameter("QueueGroupId", typeof(int));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_N01Sub10_QueueClosed", queueGroupIdParameter, updatedByUserIdParameter);
        }
    
        public virtual int usp_N01Sub20_QueueCreated(Nullable<int> year, Nullable<int> queueTypeId, Nullable<int> assignToUserId, string genarateCode, Nullable<int> createdByUSerId)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var queueTypeIdParameter = queueTypeId.HasValue ?
                new ObjectParameter("QueueTypeId", queueTypeId) :
                new ObjectParameter("QueueTypeId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var genarateCodeParameter = genarateCode != null ?
                new ObjectParameter("GenarateCode", genarateCode) :
                new ObjectParameter("GenarateCode", typeof(string));
    
            var createdByUSerIdParameter = createdByUSerId.HasValue ?
                new ObjectParameter("CreatedByUSerId", createdByUSerId) :
                new ObjectParameter("CreatedByUSerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_N01Sub20_QueueCreated", yearParameter, queueTypeIdParameter, assignToUserIdParameter, genarateCodeParameter, createdByUSerIdParameter);
        }
    
        public virtual int usp_N01Sub30_DeleteTmpCreateQueue(string genarateCode)
        {
            var genarateCodeParameter = genarateCode != null ?
                new ObjectParameter("GenarateCode", genarateCode) :
                new ObjectParameter("GenarateCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_N01Sub30_DeleteTmpCreateQueue", genarateCodeParameter);
        }
    
        public virtual int usp_N02_CloseAndInsertQueue_UdwPA()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_N02_CloseAndInsertQueue_UdwPA");
        }
    
        public virtual int usp_N02Sub20_CloseAndInsertQueue_UdwPA()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_N02Sub20_CloseAndInsertQueue_UdwPA");
        }
    
        public virtual int usp_N02Sub25_CloseQueue_ApplcaitonCancel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_N02Sub25_CloseQueue_ApplcaitonCancel");
        }
    
        public virtual ObjectResult<usp_PHCallRound_Select_Result> usp_PHCallRound_Select(Nullable<System.DateTime> period, Nullable<int> pageStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var pageStartParameter = pageStart.HasValue ?
                new ObjectParameter("PageStart", pageStart) :
                new ObjectParameter("PageStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PHCallRound_Select_Result>("usp_PHCallRound_Select", periodParameter, pageStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual int usp_PHQueue_Insert(string applicationCode, string assignToEmployeeCode, string createdByEmployeeCode)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var assignToEmployeeCodeParameter = assignToEmployeeCode != null ?
                new ObjectParameter("AssignToEmployeeCode", assignToEmployeeCode) :
                new ObjectParameter("AssignToEmployeeCode", typeof(string));
    
            var createdByEmployeeCodeParameter = createdByEmployeeCode != null ?
                new ObjectParameter("CreatedByEmployeeCode", createdByEmployeeCode) :
                new ObjectParameter("CreatedByEmployeeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PHQueue_Insert", applicationCodeParameter, assignToEmployeeCodeParameter, createdByEmployeeCodeParameter);
        }
    
        public virtual ObjectResult<usp_PHQueue_Select_Result> usp_PHQueue_Select(Nullable<int> userId, Nullable<int> schoolAreaId, Nullable<int> durationDays, Nullable<System.DateTime> period, Nullable<int> pHQueueStatusId, string criteria, Nullable<int> pageStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var schoolAreaIdParameter = schoolAreaId.HasValue ?
                new ObjectParameter("SchoolAreaId", schoolAreaId) :
                new ObjectParameter("SchoolAreaId", typeof(int));
    
            var durationDaysParameter = durationDays.HasValue ?
                new ObjectParameter("DurationDays", durationDays) :
                new ObjectParameter("DurationDays", typeof(int));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var pHQueueStatusIdParameter = pHQueueStatusId.HasValue ?
                new ObjectParameter("PHQueueStatusId", pHQueueStatusId) :
                new ObjectParameter("PHQueueStatusId", typeof(int));
    
            var criteriaParameter = criteria != null ?
                new ObjectParameter("Criteria", criteria) :
                new ObjectParameter("Criteria", typeof(string));
    
            var pageStartParameter = pageStart.HasValue ?
                new ObjectParameter("PageStart", pageStart) :
                new ObjectParameter("PageStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PHQueue_Select_Result>("usp_PHQueue_Select", userIdParameter, schoolAreaIdParameter, durationDaysParameter, periodParameter, pHQueueStatusIdParameter, criteriaParameter, pageStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_PHQueueByQueueId_Select_Result> usp_PHQueueByQueueId_Select(Nullable<int> pHQueueId)
        {
            var pHQueueIdParameter = pHQueueId.HasValue ?
                new ObjectParameter("PHQueueId", pHQueueId) :
                new ObjectParameter("PHQueueId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PHQueueByQueueId_Select_Result>("usp_PHQueueByQueueId_Select", pHQueueIdParameter);
        }
    
        public virtual ObjectResult<usp_PHQueueConfig_Select_Result> usp_PHQueueConfig_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PHQueueConfig_Select_Result>("usp_PHQueueConfig_Select");
        }
    
        public virtual ObjectResult<usp_PHQueueStatusCountByStudyAreaId_Select_Result> usp_PHQueueStatusCountByStudyAreaId_Select(Nullable<int> studyAreaId, Nullable<int> durationDays, Nullable<System.DateTime> period)
        {
            var studyAreaIdParameter = studyAreaId.HasValue ?
                new ObjectParameter("StudyAreaId", studyAreaId) :
                new ObjectParameter("StudyAreaId", typeof(int));
    
            var durationDaysParameter = durationDays.HasValue ?
                new ObjectParameter("DurationDays", durationDays) :
                new ObjectParameter("DurationDays", typeof(int));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PHQueueStatusCountByStudyAreaId_Select_Result>("usp_PHQueueStatusCountByStudyAreaId_Select", studyAreaIdParameter, durationDaysParameter, periodParameter);
        }
    
        public virtual int usp_PHQueueStatusUpdateByQueueId_Update(Nullable<int> pHQueueId, Nullable<int> pHQueueStatusId, Nullable<int> userId)
        {
            var pHQueueIdParameter = pHQueueId.HasValue ?
                new ObjectParameter("PHQueueId", pHQueueId) :
                new ObjectParameter("PHQueueId", typeof(int));
    
            var pHQueueStatusIdParameter = pHQueueStatusId.HasValue ?
                new ObjectParameter("PHQueueStatusId", pHQueueStatusId) :
                new ObjectParameter("PHQueueStatusId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PHQueueStatusUpdateByQueueId_Update", pHQueueIdParameter, pHQueueStatusIdParameter, userIdParameter);
        }
    
        public virtual int usp_ReceiveTimeLine_InsertOrUpdate(string applicationCode)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ReceiveTimeLine_InsertOrUpdate", applicationCodeParameter);
        }
    
        public virtual ObjectResult<usp_StudyAreaUserConfigByUserId_Select_Result> usp_StudyAreaUserConfigByUserId_Select(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_StudyAreaUserConfigByUserId_Select_Result>("usp_StudyAreaUserConfigByUserId_Select", userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_pvQueueIssuesCountByUserId_Select(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_pvQueueIssuesCountByUserId_Select", userIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueIssues_Select_Result> usp_QueueIssues_Select(Nullable<int> assignToUserId, Nullable<int> queueTypeId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var queueTypeIdParameter = queueTypeId.HasValue ?
                new ObjectParameter("QueueTypeId", queueTypeId) :
                new ObjectParameter("QueueTypeId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueIssues_Select_Result>("usp_QueueIssues_Select", assignToUserIdParameter, queueTypeIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_pvQueueStatus_Select_Result> usp_pvQueueStatus_Select(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> queueTypeId, string yearData)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var queueTypeIdParameter = queueTypeId.HasValue ?
                new ObjectParameter("QueueTypeId", queueTypeId) :
                new ObjectParameter("QueueTypeId", typeof(int));
    
            var yearDataParameter = yearData != null ?
                new ObjectParameter("YearData", yearData) :
                new ObjectParameter("YearData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pvQueueStatus_Select_Result>("usp_pvQueueStatus_Select", dateFromParameter, dateToParameter, queueTypeIdParameter, yearDataParameter);
        }
    
        public virtual ObjectResult<usp_pvQueueStatusByUser_Select_Result> usp_pvQueueStatusByUser_Select(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> queueTypeId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail, string yearData)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var queueTypeIdParameter = queueTypeId.HasValue ?
                new ObjectParameter("QueueTypeId", queueTypeId) :
                new ObjectParameter("QueueTypeId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            var yearDataParameter = yearData != null ?
                new ObjectParameter("YearData", yearData) :
                new ObjectParameter("YearData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pvQueueStatusByUser_Select_Result>("usp_pvQueueStatusByUser_Select", dateFromParameter, dateToParameter, queueTypeIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter, yearDataParameter);
        }
    
        public virtual ObjectResult<usp_UnderwriteRemarkV2_Update_Result> usp_UnderwriteRemarkV2_Update(Nullable<int> underwriteId, Nullable<int> underwriteStatusId, Nullable<double> corruptAmount, string remark, Nullable<int> createdByUserId)
        {
            var underwriteIdParameter = underwriteId.HasValue ?
                new ObjectParameter("UnderwriteId", underwriteId) :
                new ObjectParameter("UnderwriteId", typeof(int));
    
            var underwriteStatusIdParameter = underwriteStatusId.HasValue ?
                new ObjectParameter("UnderwriteStatusId", underwriteStatusId) :
                new ObjectParameter("UnderwriteStatusId", typeof(int));
    
            var corruptAmountParameter = corruptAmount.HasValue ?
                new ObjectParameter("CorruptAmount", corruptAmount) :
                new ObjectParameter("CorruptAmount", typeof(double));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UnderwriteRemarkV2_Update_Result>("usp_UnderwriteRemarkV2_Update", underwriteIdParameter, underwriteStatusIdParameter, corruptAmountParameter, remarkParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_UnderwriteCorrupt_Update_Result> usp_UnderwriteCorrupt_Update(Nullable<int> underwriteId, Nullable<int> underwriteStatusId, string remark, Nullable<int> createdByUserId)
        {
            var underwriteIdParameter = underwriteId.HasValue ?
                new ObjectParameter("UnderwriteId", underwriteId) :
                new ObjectParameter("UnderwriteId", typeof(int));
    
            var underwriteStatusIdParameter = underwriteStatusId.HasValue ?
                new ObjectParameter("UnderwriteStatusId", underwriteStatusId) :
                new ObjectParameter("UnderwriteStatusId", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UnderwriteCorrupt_Update_Result>("usp_UnderwriteCorrupt_Update", underwriteIdParameter, underwriteStatusIdParameter, remarkParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_Document_Select_Result> usp_Document_Select(Nullable<int> documentId, Nullable<int> queueId, Nullable<int> referenceId, string documentTypeIdList, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(int));
    
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var referenceIdParameter = referenceId.HasValue ?
                new ObjectParameter("ReferenceId", referenceId) :
                new ObjectParameter("ReferenceId", typeof(int));
    
            var documentTypeIdListParameter = documentTypeIdList != null ?
                new ObjectParameter("DocumentTypeIdList", documentTypeIdList) :
                new ObjectParameter("DocumentTypeIdList", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Document_Select_Result>("usp_Document_Select", documentIdParameter, queueIdParameter, referenceIdParameter, documentTypeIdListParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_DocumentByQueue_Insert_Result> usp_DocumentByQueue_Insert(Nullable<int> queueId, string documentTypeIdList)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var documentTypeIdListParameter = documentTypeIdList != null ?
                new ObjectParameter("DocumentTypeIdList", documentTypeIdList) :
                new ObjectParameter("DocumentTypeIdList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DocumentByQueue_Insert_Result>("usp_DocumentByQueue_Insert", queueIdParameter, documentTypeIdListParameter);
        }
    
        public virtual ObjectResult<usp_Queue_Select_Result1> usp_Queue_Select(Nullable<int> queueId, Nullable<int> queueTypeId, Nullable<int> queueStatusId, Nullable<int> assignToUserId, Nullable<System.DateTime> createDateFrom, Nullable<System.DateTime> createDateTo, Nullable<System.DateTime> assignDateFrom, Nullable<System.DateTime> assignDateTo, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string search, string yearData)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var queueTypeIdParameter = queueTypeId.HasValue ?
                new ObjectParameter("QueueTypeId", queueTypeId) :
                new ObjectParameter("QueueTypeId", typeof(int));
    
            var queueStatusIdParameter = queueStatusId.HasValue ?
                new ObjectParameter("QueueStatusId", queueStatusId) :
                new ObjectParameter("QueueStatusId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var createDateFromParameter = createDateFrom.HasValue ?
                new ObjectParameter("CreateDateFrom", createDateFrom) :
                new ObjectParameter("CreateDateFrom", typeof(System.DateTime));
    
            var createDateToParameter = createDateTo.HasValue ?
                new ObjectParameter("CreateDateTo", createDateTo) :
                new ObjectParameter("CreateDateTo", typeof(System.DateTime));
    
            var assignDateFromParameter = assignDateFrom.HasValue ?
                new ObjectParameter("AssignDateFrom", assignDateFrom) :
                new ObjectParameter("AssignDateFrom", typeof(System.DateTime));
    
            var assignDateToParameter = assignDateTo.HasValue ?
                new ObjectParameter("AssignDateTo", assignDateTo) :
                new ObjectParameter("AssignDateTo", typeof(System.DateTime));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var yearDataParameter = yearData != null ?
                new ObjectParameter("YearData", yearData) :
                new ObjectParameter("YearData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Queue_Select_Result1>("usp_Queue_Select", queueIdParameter, queueTypeIdParameter, queueStatusIdParameter, assignToUserIdParameter, createDateFromParameter, createDateToParameter, assignDateFromParameter, assignDateToParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter, yearDataParameter);
        }
    
        public virtual ObjectResult<usp_UnderWriteHistoryBySchoolId_SelectV2_Result> usp_UnderWriteHistoryBySchoolId_SelectV2(string schoolId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var schoolIdParameter = schoolId != null ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UnderWriteHistoryBySchoolId_SelectV2_Result>("usp_UnderWriteHistoryBySchoolId_SelectV2", schoolIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    }
}
