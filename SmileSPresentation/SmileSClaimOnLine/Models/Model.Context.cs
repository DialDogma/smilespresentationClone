//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmileSClaimOnLine.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ClaimOnLineDBContext : DbContext
    {
        public ClaimOnLineDBContext()
            : base("name=ClaimOnLineDBContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<vw_ICD10> vw_ICD10 { get; set; }
        public virtual DbSet<BankAccount> BankAccount { get; set; }
        public virtual DbSet<ClaimOnLine> ClaimOnLine { get; set; }
        public virtual DbSet<TmpClaimOnLinePayAuto_Transaction> TmpClaimOnLinePayAuto_Transaction { get; set; }
        public virtual DbSet<TransferAmountLimit> TransferAmountLimit { get; set; }
        public virtual DbSet<EmployeeXTransferAmountLimit> EmployeeXTransferAmountLimit { get; set; }
        public virtual DbSet<PremiumSourceStatus> PremiumSourceStatus { get; set; }
        public virtual DbSet<WhiteList> WhiteList { get; set; }
        public virtual DbSet<ExployeeXAllowClaimAI> ExployeeXAllowClaimAI { get; set; }
        public virtual DbSet<TmpClaimOnLineTransfer> TmpClaimOnLineTransfer { get; set; }
        public virtual DbSet<ClaimOnLineTransfer> ClaimOnLineTransfer { get; set; }
    
        public virtual ObjectResult<usp_ClaimOnLine_Insert_Result> usp_ClaimOnLine_Insert(Nullable<int> productTypeId, string detail, Nullable<int> claimCount, Nullable<int> branchId, Nullable<int> serviceByUserId, Nullable<int> noticeByUserId, Nullable<int> noticeByEmpId, Nullable<int> payeeTypeId, Nullable<int> payeeBankId, string payeeAccountNo, string payeeAccountName, Nullable<int> createdByUserId, Nullable<int> zebraCarOwnerByEmpId)
        {
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            var detailParameter = detail != null ?
                new ObjectParameter("Detail", detail) :
                new ObjectParameter("Detail", typeof(string));
    
            var claimCountParameter = claimCount.HasValue ?
                new ObjectParameter("ClaimCount", claimCount) :
                new ObjectParameter("ClaimCount", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var serviceByUserIdParameter = serviceByUserId.HasValue ?
                new ObjectParameter("ServiceByUserId", serviceByUserId) :
                new ObjectParameter("ServiceByUserId", typeof(int));
    
            var noticeByUserIdParameter = noticeByUserId.HasValue ?
                new ObjectParameter("NoticeByUserId", noticeByUserId) :
                new ObjectParameter("NoticeByUserId", typeof(int));
    
            var noticeByEmpIdParameter = noticeByEmpId.HasValue ?
                new ObjectParameter("NoticeByEmpId", noticeByEmpId) :
                new ObjectParameter("NoticeByEmpId", typeof(int));
    
            var payeeTypeIdParameter = payeeTypeId.HasValue ?
                new ObjectParameter("PayeeTypeId", payeeTypeId) :
                new ObjectParameter("PayeeTypeId", typeof(int));
    
            var payeeBankIdParameter = payeeBankId.HasValue ?
                new ObjectParameter("PayeeBankId", payeeBankId) :
                new ObjectParameter("PayeeBankId", typeof(int));
    
            var payeeAccountNoParameter = payeeAccountNo != null ?
                new ObjectParameter("PayeeAccountNo", payeeAccountNo) :
                new ObjectParameter("PayeeAccountNo", typeof(string));
    
            var payeeAccountNameParameter = payeeAccountName != null ?
                new ObjectParameter("PayeeAccountName", payeeAccountName) :
                new ObjectParameter("PayeeAccountName", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            var zebraCarOwnerByEmpIdParameter = zebraCarOwnerByEmpId.HasValue ?
                new ObjectParameter("ZebraCarOwnerByEmpId", zebraCarOwnerByEmpId) :
                new ObjectParameter("ZebraCarOwnerByEmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLine_Insert_Result>("usp_ClaimOnLine_Insert", productTypeIdParameter, detailParameter, claimCountParameter, branchIdParameter, serviceByUserIdParameter, noticeByUserIdParameter, noticeByEmpIdParameter, payeeTypeIdParameter, payeeBankIdParameter, payeeAccountNoParameter, payeeAccountNameParameter, createdByUserIdParameter, zebraCarOwnerByEmpIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLine_Select_Result> usp_ClaimOnLine_Select(Nullable<int> claimOnLineId, Nullable<bool> isActive)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLine_Select_Result>("usp_ClaimOnLine_Select", claimOnLineIdParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineAccount_Select_Result> usp_ClaimOnLineAccount_Select(Nullable<int> claimOnLineAccountId, Nullable<int> employeeId, Nullable<bool> isActive)
        {
            var claimOnLineAccountIdParameter = claimOnLineAccountId.HasValue ?
                new ObjectParameter("ClaimOnLineAccountId", claimOnLineAccountId) :
                new ObjectParameter("ClaimOnLineAccountId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineAccount_Select_Result>("usp_ClaimOnLineAccount_Select", claimOnLineAccountIdParameter, employeeIdParameter, isActiveParameter);
        }
    
        public virtual int usp_ClaimOnLineCancel_Update(Nullable<int> claimOnLineId, Nullable<int> cancelCauseId, string remark, Nullable<int> updateByUserId)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var cancelCauseIdParameter = cancelCauseId.HasValue ?
                new ObjectParameter("CancelCauseId", cancelCauseId) :
                new ObjectParameter("CancelCauseId", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var updateByUserIdParameter = updateByUserId.HasValue ?
                new ObjectParameter("UpdateByUserId", updateByUserId) :
                new ObjectParameter("UpdateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ClaimOnLineCancel_Update", claimOnLineIdParameter, cancelCauseIdParameter, remarkParameter, updateByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineMonitor_Select_Result> usp_ClaimOnLineMonitor_Select(Nullable<int> claimOnLineId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> zoneId, Nullable<int> branchId, Nullable<bool> isActive, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var zoneIdParameter = zoneId.HasValue ?
                new ObjectParameter("ZoneId", zoneId) :
                new ObjectParameter("ZoneId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineMonitor_Select_Result>("usp_ClaimOnLineMonitor_Select", claimOnLineIdParameter, dateFromParameter, dateToParameter, zoneIdParameter, branchIdParameter, isActiveParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineTransfer_Insert_Result> usp_ClaimOnLineTransfer_Insert(Nullable<int> claimOnLineId, Nullable<int> transferTypeId, Nullable<int> payerTypeId, Nullable<int> fromBankId, string fromAccountNo, string fromAccountName, Nullable<int> payeeTypeId, Nullable<int> toBankId, string toAccountNo, string toAccountName, Nullable<System.DateTime> transferDate, Nullable<double> amount, Nullable<int> claimOnLineAccountId, Nullable<bool> isActive, Nullable<int> createByUserId, string claimHeaderGroupCodeList)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var transferTypeIdParameter = transferTypeId.HasValue ?
                new ObjectParameter("TransferTypeId", transferTypeId) :
                new ObjectParameter("TransferTypeId", typeof(int));
    
            var payerTypeIdParameter = payerTypeId.HasValue ?
                new ObjectParameter("PayerTypeId", payerTypeId) :
                new ObjectParameter("PayerTypeId", typeof(int));
    
            var fromBankIdParameter = fromBankId.HasValue ?
                new ObjectParameter("FromBankId", fromBankId) :
                new ObjectParameter("FromBankId", typeof(int));
    
            var fromAccountNoParameter = fromAccountNo != null ?
                new ObjectParameter("FromAccountNo", fromAccountNo) :
                new ObjectParameter("FromAccountNo", typeof(string));
    
            var fromAccountNameParameter = fromAccountName != null ?
                new ObjectParameter("FromAccountName", fromAccountName) :
                new ObjectParameter("FromAccountName", typeof(string));
    
            var payeeTypeIdParameter = payeeTypeId.HasValue ?
                new ObjectParameter("PayeeTypeId", payeeTypeId) :
                new ObjectParameter("PayeeTypeId", typeof(int));
    
            var toBankIdParameter = toBankId.HasValue ?
                new ObjectParameter("ToBankId", toBankId) :
                new ObjectParameter("ToBankId", typeof(int));
    
            var toAccountNoParameter = toAccountNo != null ?
                new ObjectParameter("ToAccountNo", toAccountNo) :
                new ObjectParameter("ToAccountNo", typeof(string));
    
            var toAccountNameParameter = toAccountName != null ?
                new ObjectParameter("ToAccountName", toAccountName) :
                new ObjectParameter("ToAccountName", typeof(string));
    
            var transferDateParameter = transferDate.HasValue ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var claimOnLineAccountIdParameter = claimOnLineAccountId.HasValue ?
                new ObjectParameter("ClaimOnLineAccountId", claimOnLineAccountId) :
                new ObjectParameter("ClaimOnLineAccountId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createByUserIdParameter = createByUserId.HasValue ?
                new ObjectParameter("CreateByUserId", createByUserId) :
                new ObjectParameter("CreateByUserId", typeof(int));
    
            var claimHeaderGroupCodeListParameter = claimHeaderGroupCodeList != null ?
                new ObjectParameter("ClaimHeaderGroupCodeList", claimHeaderGroupCodeList) :
                new ObjectParameter("ClaimHeaderGroupCodeList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineTransfer_Insert_Result>("usp_ClaimOnLineTransfer_Insert", claimOnLineIdParameter, transferTypeIdParameter, payerTypeIdParameter, fromBankIdParameter, fromAccountNoParameter, fromAccountNameParameter, payeeTypeIdParameter, toBankIdParameter, toAccountNoParameter, toAccountNameParameter, transferDateParameter, amountParameter, claimOnLineAccountIdParameter, isActiveParameter, createByUserIdParameter, claimHeaderGroupCodeListParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineTransfer_Select_Result> usp_ClaimOnLineTransfer_Select(Nullable<int> claimOnLineTransferId, Nullable<int> claimOnLineId, Nullable<bool> isActive)
        {
            var claimOnLineTransferIdParameter = claimOnLineTransferId.HasValue ?
                new ObjectParameter("ClaimOnLineTransferId", claimOnLineTransferId) :
                new ObjectParameter("ClaimOnLineTransferId", typeof(int));
    
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineTransfer_Select_Result>("usp_ClaimOnLineTransfer_Select", claimOnLineTransferIdParameter, claimOnLineIdParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_PayeeType_Select_Result> usp_PayeeType_Select(Nullable<bool> isActive)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PayeeType_Select_Result>("usp_PayeeType_Select", isActiveParameter);
        }
    
        public virtual ObjectResult<usp_TransferType_Select_Result> usp_TransferType_Select(Nullable<bool> isActive)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TransferType_Select_Result>("usp_TransferType_Select", isActiveParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineAccountTransaction_Select_Result> usp_ClaimOnLineAccountTransaction_Select(Nullable<int> claimOnLineAccountTransactionId, Nullable<int> claimOnLineTransferId, Nullable<bool> isActive)
        {
            var claimOnLineAccountTransactionIdParameter = claimOnLineAccountTransactionId.HasValue ?
                new ObjectParameter("ClaimOnLineAccountTransactionId", claimOnLineAccountTransactionId) :
                new ObjectParameter("ClaimOnLineAccountTransactionId", typeof(int));
    
            var claimOnLineTransferIdParameter = claimOnLineTransferId.HasValue ?
                new ObjectParameter("ClaimOnLineTransferId", claimOnLineTransferId) :
                new ObjectParameter("ClaimOnLineTransferId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineAccountTransaction_Select_Result>("usp_ClaimOnLineAccountTransaction_Select", claimOnLineAccountTransactionIdParameter, claimOnLineTransferIdParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineReport_Select_Result> usp_ClaimOnLineReport_Select(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> branchId)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineReport_Select_Result>("usp_ClaimOnLineReport_Select", dateFromParameter, dateToParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineReportAccountStatement_Select_Result> usp_ClaimOnLineReportAccountStatement_Select(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> claimOnLineAccountId)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var claimOnLineAccountIdParameter = claimOnLineAccountId.HasValue ?
                new ObjectParameter("ClaimOnLineAccountId", claimOnLineAccountId) :
                new ObjectParameter("ClaimOnLineAccountId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineReportAccountStatement_Select_Result>("usp_ClaimOnLineReportAccountStatement_Select", dateFromParameter, dateToParameter, claimOnLineAccountIdParameter);
        }
    
        public virtual ObjectResult<usp_ProductType_Select_Result> usp_ProductType_Select(Nullable<int> productTypeId, Nullable<bool> isActive)
        {
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductType_Select_Result>("usp_ProductType_Select", productTypeIdParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_Zone_Select_Result> usp_Zone_Select(Nullable<int> zoneId, Nullable<bool> isActive)
        {
            var zoneIdParameter = zoneId.HasValue ?
                new ObjectParameter("ZoneId", zoneId) :
                new ObjectParameter("ZoneId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Zone_Select_Result>("usp_Zone_Select", zoneIdParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_ZoneXEmployee_Select_Result> usp_ZoneXEmployee_Select(Nullable<int> employeeId, Nullable<bool> isActive)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ZoneXEmployee_Select_Result>("usp_ZoneXEmployee_Select", employeeIdParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_CancelCause_Select_Result> usp_CancelCause_Select(Nullable<int> cancelCauseId, Nullable<bool> isActive)
        {
            var cancelCauseIdParameter = cancelCauseId.HasValue ?
                new ObjectParameter("CancelCauseId", cancelCauseId) :
                new ObjectParameter("CancelCauseId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CancelCause_Select_Result>("usp_CancelCause_Select", cancelCauseIdParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineCancelCause_Insert_Result> usp_ClaimOnLineCancelCause_Insert(Nullable<int> claimOnLineId, Nullable<int> cancelCauseId, string remark, Nullable<int> createdByUserId)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var cancelCauseIdParameter = cancelCauseId.HasValue ?
                new ObjectParameter("CancelCauseId", cancelCauseId) :
                new ObjectParameter("CancelCauseId", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineCancelCause_Insert_Result>("usp_ClaimOnLineCancelCause_Insert", claimOnLineIdParameter, cancelCauseIdParameter, remarkParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimAllMonitor_Select_Result1> usp_ClaimAllMonitor_Select(Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimAllMonitor_Select_Result1>("usp_ClaimAllMonitor_Select", indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLine_Update_Result> usp_ClaimOnLine_Update(Nullable<int> claimOnLineId, Nullable<int> productTypeId, string detail, Nullable<int> claimCount, Nullable<int> branchId, Nullable<int> serviceByUserId, Nullable<int> noticeByUserId, Nullable<int> noticeByEmpId, Nullable<int> payeeTypeId, Nullable<int> payeeBankId, string payeeAccountNo, string payeeAccountName, Nullable<int> createdByUserId, Nullable<int> zebraCarOwnerEmpId)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            var detailParameter = detail != null ?
                new ObjectParameter("Detail", detail) :
                new ObjectParameter("Detail", typeof(string));
    
            var claimCountParameter = claimCount.HasValue ?
                new ObjectParameter("ClaimCount", claimCount) :
                new ObjectParameter("ClaimCount", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var serviceByUserIdParameter = serviceByUserId.HasValue ?
                new ObjectParameter("ServiceByUserId", serviceByUserId) :
                new ObjectParameter("ServiceByUserId", typeof(int));
    
            var noticeByUserIdParameter = noticeByUserId.HasValue ?
                new ObjectParameter("NoticeByUserId", noticeByUserId) :
                new ObjectParameter("NoticeByUserId", typeof(int));
    
            var noticeByEmpIdParameter = noticeByEmpId.HasValue ?
                new ObjectParameter("NoticeByEmpId", noticeByEmpId) :
                new ObjectParameter("NoticeByEmpId", typeof(int));
    
            var payeeTypeIdParameter = payeeTypeId.HasValue ?
                new ObjectParameter("PayeeTypeId", payeeTypeId) :
                new ObjectParameter("PayeeTypeId", typeof(int));
    
            var payeeBankIdParameter = payeeBankId.HasValue ?
                new ObjectParameter("PayeeBankId", payeeBankId) :
                new ObjectParameter("PayeeBankId", typeof(int));
    
            var payeeAccountNoParameter = payeeAccountNo != null ?
                new ObjectParameter("PayeeAccountNo", payeeAccountNo) :
                new ObjectParameter("PayeeAccountNo", typeof(string));
    
            var payeeAccountNameParameter = payeeAccountName != null ?
                new ObjectParameter("PayeeAccountName", payeeAccountName) :
                new ObjectParameter("PayeeAccountName", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            var zebraCarOwnerEmpIdParameter = zebraCarOwnerEmpId.HasValue ?
                new ObjectParameter("ZebraCarOwnerEmpId", zebraCarOwnerEmpId) :
                new ObjectParameter("ZebraCarOwnerEmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLine_Update_Result>("usp_ClaimOnLine_Update", claimOnLineIdParameter, productTypeIdParameter, detailParameter, claimCountParameter, branchIdParameter, serviceByUserIdParameter, noticeByUserIdParameter, noticeByEmpIdParameter, payeeTypeIdParameter, payeeBankIdParameter, payeeAccountNoParameter, payeeAccountNameParameter, createdByUserIdParameter, zebraCarOwnerEmpIdParameter);
        }
    
        public virtual ObjectResult<usp_Bank_Select_Result> usp_Bank_Select(Nullable<int> bankId, string bankCode, Nullable<bool> isActive)
        {
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var bankCodeParameter = bankCode != null ?
                new ObjectParameter("BankCode", bankCode) :
                new ObjectParameter("BankCode", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Bank_Select_Result>("usp_Bank_Select", bankIdParameter, bankCodeParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineAccountTransactionMonitor_Select_Result> usp_ClaimOnLineAccountTransactionMonitor_Select(Nullable<int> claimOnLineAccountId, Nullable<int> claimOnLineAccountTransactionId, Nullable<bool> isActive, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var claimOnLineAccountIdParameter = claimOnLineAccountId.HasValue ?
                new ObjectParameter("ClaimOnLineAccountId", claimOnLineAccountId) :
                new ObjectParameter("ClaimOnLineAccountId", typeof(int));
    
            var claimOnLineAccountTransactionIdParameter = claimOnLineAccountTransactionId.HasValue ?
                new ObjectParameter("ClaimOnLineAccountTransactionId", claimOnLineAccountTransactionId) :
                new ObjectParameter("ClaimOnLineAccountTransactionId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineAccountTransactionMonitor_Select_Result>("usp_ClaimOnLineAccountTransactionMonitor_Select", claimOnLineAccountIdParameter, claimOnLineAccountTransactionIdParameter, isActiveParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineReport_ForCompensate_Select_Result> usp_ClaimOnLineReport_ForCompensate_Select(Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateFinal, Nullable<int> branchId)
        {
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var dateFinalParameter = dateFinal.HasValue ?
                new ObjectParameter("DateFinal", dateFinal) :
                new ObjectParameter("DateFinal", typeof(System.DateTime));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineReport_ForCompensate_Select_Result>("usp_ClaimOnLineReport_ForCompensate_Select", dateStartParameter, dateFinalParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineReportV2_Select_Result> usp_ClaimOnLineReportV2_Select(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> zoneId, Nullable<int> branchId, Nullable<System.DateTime> dateFinal)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var zoneIdParameter = zoneId.HasValue ?
                new ObjectParameter("ZoneId", zoneId) :
                new ObjectParameter("ZoneId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var dateFinalParameter = dateFinal.HasValue ?
                new ObjectParameter("DateFinal", dateFinal) :
                new ObjectParameter("DateFinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineReportV2_Select_Result>("usp_ClaimOnLineReportV2_Select", dateFromParameter, dateToParameter, zoneIdParameter, branchIdParameter, dateFinalParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineReport_FollowClaimBranch_Select_Result2> usp_ClaimOnLineReport_FollowClaimBranch_Select(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> branchId)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineReport_FollowClaimBranch_Select_Result2>("usp_ClaimOnLineReport_FollowClaimBranch_Select", dateFromParameter, dateToParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineTransfer_Amount_Update_Result> usp_ClaimOnLineTransfer_Amount_Update(Nullable<int> claimOnLineTransferId, Nullable<double> newAmount, Nullable<int> updateByUserId)
        {
            var claimOnLineTransferIdParameter = claimOnLineTransferId.HasValue ?
                new ObjectParameter("ClaimOnLineTransferId", claimOnLineTransferId) :
                new ObjectParameter("ClaimOnLineTransferId", typeof(int));
    
            var newAmountParameter = newAmount.HasValue ?
                new ObjectParameter("NewAmount", newAmount) :
                new ObjectParameter("NewAmount", typeof(double));
    
            var updateByUserIdParameter = updateByUserId.HasValue ?
                new ObjectParameter("UpdateByUserId", updateByUserId) :
                new ObjectParameter("UpdateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineTransfer_Amount_Update_Result>("usp_ClaimOnLineTransfer_Amount_Update", claimOnLineTransferIdParameter, newAmountParameter, updateByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineTransfer_Delete_Result> usp_ClaimOnLineTransfer_Delete(Nullable<int> claimOnLineTransferId, Nullable<int> updateByUserId)
        {
            var claimOnLineTransferIdParameter = claimOnLineTransferId.HasValue ?
                new ObjectParameter("ClaimOnLineTransferId", claimOnLineTransferId) :
                new ObjectParameter("ClaimOnLineTransferId", typeof(int));
    
            var updateByUserIdParameter = updateByUserId.HasValue ?
                new ObjectParameter("UpdateByUserId", updateByUserId) :
                new ObjectParameter("UpdateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineTransfer_Delete_Result>("usp_ClaimOnLineTransfer_Delete", claimOnLineTransferIdParameter, updateByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineTransferItem_Delete_Result> usp_ClaimOnLineTransferItem_Delete(string claimHeaderGroupCode, Nullable<int> updateByUserId)
        {
            var claimHeaderGroupCodeParameter = claimHeaderGroupCode != null ?
                new ObjectParameter("ClaimHeaderGroupCode", claimHeaderGroupCode) :
                new ObjectParameter("ClaimHeaderGroupCode", typeof(string));
    
            var updateByUserIdParameter = updateByUserId.HasValue ?
                new ObjectParameter("UpdateByUserId", updateByUserId) :
                new ObjectParameter("UpdateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineTransferItem_Delete_Result>("usp_ClaimOnLineTransferItem_Delete", claimHeaderGroupCodeParameter, updateByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineTransferItem_Select_Result> usp_ClaimOnLineTransferItem_Select(string claimOnLineCode, string claimHeaderGroupCode, Nullable<bool> isActive)
        {
            var claimOnLineCodeParameter = claimOnLineCode != null ?
                new ObjectParameter("ClaimOnLineCode", claimOnLineCode) :
                new ObjectParameter("ClaimOnLineCode", typeof(string));
    
            var claimHeaderGroupCodeParameter = claimHeaderGroupCode != null ?
                new ObjectParameter("ClaimHeaderGroupCode", claimHeaderGroupCode) :
                new ObjectParameter("ClaimHeaderGroupCode", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineTransferItem_Select_Result>("usp_ClaimOnLineTransferItem_Select", claimOnLineCodeParameter, claimHeaderGroupCodeParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_Endorse_ClaimOnlineCodeinClaim_Update_Result> usp_Endorse_ClaimOnlineCodeinClaim_Update(string claimHeaderGroupCode, string oldClaimOnlineCode, string newClaimOnlineCode, Nullable<int> updateByUserId)
        {
            var claimHeaderGroupCodeParameter = claimHeaderGroupCode != null ?
                new ObjectParameter("ClaimHeaderGroupCode", claimHeaderGroupCode) :
                new ObjectParameter("ClaimHeaderGroupCode", typeof(string));
    
            var oldClaimOnlineCodeParameter = oldClaimOnlineCode != null ?
                new ObjectParameter("OldClaimOnlineCode", oldClaimOnlineCode) :
                new ObjectParameter("OldClaimOnlineCode", typeof(string));
    
            var newClaimOnlineCodeParameter = newClaimOnlineCode != null ?
                new ObjectParameter("NewClaimOnlineCode", newClaimOnlineCode) :
                new ObjectParameter("NewClaimOnlineCode", typeof(string));
    
            var updateByUserIdParameter = updateByUserId.HasValue ?
                new ObjectParameter("UpdateByUserId", updateByUserId) :
                new ObjectParameter("UpdateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Endorse_ClaimOnlineCodeinClaim_Update_Result>("usp_Endorse_ClaimOnlineCodeinClaim_Update", claimHeaderGroupCodeParameter, oldClaimOnlineCodeParameter, newClaimOnlineCodeParameter, updateByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_CreateClaimOnLine_Select_Result> usp_CreateClaimOnLine_Select(string claimOnLineCode, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var claimOnLineCodeParameter = claimOnLineCode != null ?
                new ObjectParameter("ClaimOnLineCode", claimOnLineCode) :
                new ObjectParameter("ClaimOnLineCode", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CreateClaimOnLine_Select_Result>("usp_CreateClaimOnLine_Select", claimOnLineCodeParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_CreateClaimOnLineforPA_Select_Result> usp_CreateClaimOnLineforPA_Select(string customerDetailCode, Nullable<int> year, string provinceId, string schoolId, string firstName, string lastName, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var customerDetailCodeParameter = customerDetailCode != null ?
                new ObjectParameter("CustomerDetailCode", customerDetailCode) :
                new ObjectParameter("CustomerDetailCode", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var provinceIdParameter = provinceId != null ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(string));
    
            var schoolIdParameter = schoolId != null ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CreateClaimOnLineforPA_Select_Result>("usp_CreateClaimOnLineforPA_Select", customerDetailCodeParameter, yearParameter, provinceIdParameter, schoolIdParameter, firstNameParameter, lastNameParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_CreateClaimOnLineforPH_Select_Result> usp_CreateClaimOnLineforPH_Select(string application_ID, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var application_IDParameter = application_ID != null ?
                new ObjectParameter("Application_ID", application_ID) :
                new ObjectParameter("Application_ID", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CreateClaimOnLineforPH_Select_Result>("usp_CreateClaimOnLineforPH_Select", application_IDParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ChiefComplain_Select_Result> usp_ChiefComplain_Select(Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ChiefComplain_Select_Result>("usp_ChiefComplain_Select", indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimAdmitType_Select_Result> usp_ClaimAdmitType_Select(string claimType_id, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var claimType_idParameter = claimType_id != null ?
                new ObjectParameter("ClaimType_id", claimType_id) :
                new ObjectParameter("ClaimType_id", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimAdmitType_Select_Result>("usp_ClaimAdmitType_Select", claimType_idParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimType_Select_Result> usp_ClaimType_Select(Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimType_Select_Result>("usp_ClaimType_Select", indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_CompanyGroupHospital_Select_Result> usp_CompanyGroupHospital_Select(string province_id, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var province_idParameter = province_id != null ?
                new ObjectParameter("Province_id", province_id) :
                new ObjectParameter("Province_id", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CompanyGroupHospital_Select_Result>("usp_CompanyGroupHospital_Select", province_idParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_Province_Select_Result> usp_Province_Select(Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Province_Select_Result>("usp_Province_Select", indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_StatusGroup_Select_Result> usp_StatusGroup_Select(string statusGroup_id, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var statusGroup_idParameter = statusGroup_id != null ?
                new ObjectParameter("StatusGroup_id", statusGroup_id) :
                new ObjectParameter("StatusGroup_id", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_StatusGroup_Select_Result>("usp_StatusGroup_Select", statusGroup_idParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_StatusGroupClaim_Select_Result> usp_StatusGroupClaim_Select(Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_StatusGroupClaim_Select_Result>("usp_StatusGroupClaim_Select", indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_CodeGroup_Select_Result> usp_CodeGroup_Select(string codeGroup_id, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var codeGroup_idParameter = codeGroup_id != null ?
                new ObjectParameter("CodeGroup_id", codeGroup_id) :
                new ObjectParameter("CodeGroup_id", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CodeGroup_Select_Result>("usp_CodeGroup_Select", codeGroup_idParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_GetEmployeeDetail_Select_Result> usp_GetEmployeeDetail_Select(Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetEmployeeDetail_Select_Result>("usp_GetEmployeeDetail_Select", indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimHeaderForPH_Insert_Result> usp_ClaimHeaderForPH_Insert(string app_id, string hospital_id, string claimType_id, string claimAdmitType_id, Nullable<System.DateTime> dateHappen, Nullable<System.DateTime> dateNotice, string chiefComplain_id, string status_id, string createdByEmpCode, string claimPayBy_id, string claimOnLineCode, string denyCause_id, string remark)
        {
            var app_idParameter = app_id != null ?
                new ObjectParameter("App_id", app_id) :
                new ObjectParameter("App_id", typeof(string));
    
            var hospital_idParameter = hospital_id != null ?
                new ObjectParameter("Hospital_id", hospital_id) :
                new ObjectParameter("Hospital_id", typeof(string));
    
            var claimType_idParameter = claimType_id != null ?
                new ObjectParameter("ClaimType_id", claimType_id) :
                new ObjectParameter("ClaimType_id", typeof(string));
    
            var claimAdmitType_idParameter = claimAdmitType_id != null ?
                new ObjectParameter("ClaimAdmitType_id", claimAdmitType_id) :
                new ObjectParameter("ClaimAdmitType_id", typeof(string));
    
            var dateHappenParameter = dateHappen.HasValue ?
                new ObjectParameter("DateHappen", dateHappen) :
                new ObjectParameter("DateHappen", typeof(System.DateTime));
    
            var dateNoticeParameter = dateNotice.HasValue ?
                new ObjectParameter("DateNotice", dateNotice) :
                new ObjectParameter("DateNotice", typeof(System.DateTime));
    
            var chiefComplain_idParameter = chiefComplain_id != null ?
                new ObjectParameter("ChiefComplain_id", chiefComplain_id) :
                new ObjectParameter("ChiefComplain_id", typeof(string));
    
            var status_idParameter = status_id != null ?
                new ObjectParameter("Status_id", status_id) :
                new ObjectParameter("Status_id", typeof(string));
    
            var createdByEmpCodeParameter = createdByEmpCode != null ?
                new ObjectParameter("CreatedByEmpCode", createdByEmpCode) :
                new ObjectParameter("CreatedByEmpCode", typeof(string));
    
            var claimPayBy_idParameter = claimPayBy_id != null ?
                new ObjectParameter("ClaimPayBy_id", claimPayBy_id) :
                new ObjectParameter("ClaimPayBy_id", typeof(string));
    
            var claimOnLineCodeParameter = claimOnLineCode != null ?
                new ObjectParameter("ClaimOnLineCode", claimOnLineCode) :
                new ObjectParameter("ClaimOnLineCode", typeof(string));
    
            var denyCause_idParameter = denyCause_id != null ?
                new ObjectParameter("DenyCause_id", denyCause_id) :
                new ObjectParameter("DenyCause_id", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimHeaderForPH_Insert_Result>("usp_ClaimHeaderForPH_Insert", app_idParameter, hospital_idParameter, claimType_idParameter, claimAdmitType_idParameter, dateHappenParameter, dateNoticeParameter, chiefComplain_idParameter, status_idParameter, createdByEmpCodeParameter, claimPayBy_idParameter, claimOnLineCodeParameter, denyCause_idParameter, remarkParameter);
        }
    
        public virtual ObjectResult<usp_CountOPDByAppForPH_Select_Result> usp_CountOPDByAppForPH_Select(string appID, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var appIDParameter = appID != null ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CountOPDByAppForPH_Select_Result>("usp_CountOPDByAppForPH_Select", appIDParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_CodeGroupPAYear_Select_Result> usp_CodeGroupPAYear_Select(Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CodeGroupPAYear_Select_Result>("usp_CodeGroupPAYear_Select", indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_SchoolDetail_Select_Result> usp_SchoolDetail_Select(Nullable<int> year, string province_id, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var province_idParameter = province_id != null ?
                new ObjectParameter("Province_id", province_id) :
                new ObjectParameter("Province_id", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SchoolDetail_Select_Result>("usp_SchoolDetail_Select", yearParameter, province_idParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimStyle_Select_Result> usp_ClaimStyle_Select(Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimStyle_Select_Result>("usp_ClaimStyle_Select", indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_AccidentCause_Select_Result> usp_AccidentCause_Select(Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AccidentCause_Select_Result>("usp_AccidentCause_Select", indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimTypeXProductCategory_Select_Result> usp_ClaimTypeXProductCategory_Select(string productCategory_id, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var productCategory_idParameter = productCategory_id != null ?
                new ObjectParameter("ProductCategory_id", productCategory_id) :
                new ObjectParameter("ProductCategory_id", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimTypeXProductCategory_Select_Result>("usp_ClaimTypeXProductCategory_Select", productCategory_idParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimHeaderForPA_Insert_Result> usp_ClaimHeaderForPA_Insert(string customerID, string hospital_id, string claimType_id, string claimStyle_id, Nullable<System.DateTime> dateHappen, Nullable<System.DateTime> dateNotice, Nullable<System.DateTime> dateIn, Nullable<System.DateTime> dateOut, string accidentCause_id, string status_id, string createdByEmpCode, string createdByBranch_id, string claimPayBy_id, string claimOnLineCode, string denyCause_id, string chiefComplain_id, string accidentDetail, string remark)
        {
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var hospital_idParameter = hospital_id != null ?
                new ObjectParameter("Hospital_id", hospital_id) :
                new ObjectParameter("Hospital_id", typeof(string));
    
            var claimType_idParameter = claimType_id != null ?
                new ObjectParameter("ClaimType_id", claimType_id) :
                new ObjectParameter("ClaimType_id", typeof(string));
    
            var claimStyle_idParameter = claimStyle_id != null ?
                new ObjectParameter("ClaimStyle_id", claimStyle_id) :
                new ObjectParameter("ClaimStyle_id", typeof(string));
    
            var dateHappenParameter = dateHappen.HasValue ?
                new ObjectParameter("DateHappen", dateHappen) :
                new ObjectParameter("DateHappen", typeof(System.DateTime));
    
            var dateNoticeParameter = dateNotice.HasValue ?
                new ObjectParameter("DateNotice", dateNotice) :
                new ObjectParameter("DateNotice", typeof(System.DateTime));
    
            var dateInParameter = dateIn.HasValue ?
                new ObjectParameter("DateIn", dateIn) :
                new ObjectParameter("DateIn", typeof(System.DateTime));
    
            var dateOutParameter = dateOut.HasValue ?
                new ObjectParameter("DateOut", dateOut) :
                new ObjectParameter("DateOut", typeof(System.DateTime));
    
            var accidentCause_idParameter = accidentCause_id != null ?
                new ObjectParameter("AccidentCause_id", accidentCause_id) :
                new ObjectParameter("AccidentCause_id", typeof(string));
    
            var status_idParameter = status_id != null ?
                new ObjectParameter("Status_id", status_id) :
                new ObjectParameter("Status_id", typeof(string));
    
            var createdByEmpCodeParameter = createdByEmpCode != null ?
                new ObjectParameter("CreatedByEmpCode", createdByEmpCode) :
                new ObjectParameter("CreatedByEmpCode", typeof(string));
    
            var createdByBranch_idParameter = createdByBranch_id != null ?
                new ObjectParameter("CreatedByBranch_id", createdByBranch_id) :
                new ObjectParameter("CreatedByBranch_id", typeof(string));
    
            var claimPayBy_idParameter = claimPayBy_id != null ?
                new ObjectParameter("ClaimPayBy_id", claimPayBy_id) :
                new ObjectParameter("ClaimPayBy_id", typeof(string));
    
            var claimOnLineCodeParameter = claimOnLineCode != null ?
                new ObjectParameter("ClaimOnLineCode", claimOnLineCode) :
                new ObjectParameter("ClaimOnLineCode", typeof(string));
    
            var denyCause_idParameter = denyCause_id != null ?
                new ObjectParameter("DenyCause_id", denyCause_id) :
                new ObjectParameter("DenyCause_id", typeof(string));
    
            var chiefComplain_idParameter = chiefComplain_id != null ?
                new ObjectParameter("ChiefComplain_id", chiefComplain_id) :
                new ObjectParameter("ChiefComplain_id", typeof(string));
    
            var accidentDetailParameter = accidentDetail != null ?
                new ObjectParameter("AccidentDetail", accidentDetail) :
                new ObjectParameter("AccidentDetail", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimHeaderForPA_Insert_Result>("usp_ClaimHeaderForPA_Insert", customerIDParameter, hospital_idParameter, claimType_idParameter, claimStyle_idParameter, dateHappenParameter, dateNoticeParameter, dateInParameter, dateOutParameter, accidentCause_idParameter, status_idParameter, createdByEmpCodeParameter, createdByBranch_idParameter, claimPayBy_idParameter, claimOnLineCodeParameter, denyCause_idParameter, chiefComplain_idParameter, accidentDetailParameter, remarkParameter);
        }
    
        public virtual ObjectResult<usp_ClaimHeaderMonitorAllReport_Select_Result> usp_ClaimHeaderMonitorAllReport_Select(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> productGroup_ID, Nullable<int> branchId, Nullable<int> zoneId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var productGroup_IDParameter = productGroup_ID.HasValue ?
                new ObjectParameter("ProductGroup_ID", productGroup_ID) :
                new ObjectParameter("ProductGroup_ID", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var zoneIdParameter = zoneId.HasValue ?
                new ObjectParameter("ZoneId", zoneId) :
                new ObjectParameter("ZoneId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimHeaderMonitorAllReport_Select_Result>("usp_ClaimHeaderMonitorAllReport_Select", dateFromParameter, dateToParameter, productGroup_IDParameter, branchIdParameter, zoneIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimHeaderMonitorAll_Select_Result> usp_ClaimHeaderMonitorAll_Select(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> productGroup_ID, Nullable<int> branchId, Nullable<int> zoneId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var productGroup_IDParameter = productGroup_ID.HasValue ?
                new ObjectParameter("ProductGroup_ID", productGroup_ID) :
                new ObjectParameter("ProductGroup_ID", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var zoneIdParameter = zoneId.HasValue ?
                new ObjectParameter("ZoneId", zoneId) :
                new ObjectParameter("ZoneId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimHeaderMonitorAll_Select_Result>("usp_ClaimHeaderMonitorAll_Select", dateFromParameter, dateToParameter, productGroup_IDParameter, branchIdParameter, zoneIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ProductGroup_Select_Result> usp_ProductGroup_Select(Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductGroup_Select_Result>("usp_ProductGroup_Select", indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineRemark_Insert_Result> usp_ClaimOnLineRemark_Insert(Nullable<int> claimOnLineId, string remark, Nullable<int> remarkByUserId, Nullable<int> createByUserId)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var remarkByUserIdParameter = remarkByUserId.HasValue ?
                new ObjectParameter("RemarkByUserId", remarkByUserId) :
                new ObjectParameter("RemarkByUserId", typeof(int));
    
            var createByUserIdParameter = createByUserId.HasValue ?
                new ObjectParameter("CreateByUserId", createByUserId) :
                new ObjectParameter("CreateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineRemark_Insert_Result>("usp_ClaimOnLineRemark_Insert", claimOnLineIdParameter, remarkParameter, remarkByUserIdParameter, createByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineRemark_Select_Result> usp_ClaimOnLineRemark_Select(Nullable<int> claimOnLineId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineRemark_Select_Result>("usp_ClaimOnLineRemark_Select", claimOnLineIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_GetEmployeeDetailAll_Select_Result> usp_GetEmployeeDetailAll_Select(Nullable<int> user_ID, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetEmployeeDetailAll_Select_Result>("usp_GetEmployeeDetailAll_Select", user_IDParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineRemarkReport_Select_Result> usp_ClaimOnLineRemarkReport_Select(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> branchId, Nullable<int> zoneId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var zoneIdParameter = zoneId.HasValue ?
                new ObjectParameter("ZoneId", zoneId) :
                new ObjectParameter("ZoneId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineRemarkReport_Select_Result>("usp_ClaimOnLineRemarkReport_Select", dateFromParameter, dateToParameter, branchIdParameter, zoneIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineReportAll_Ensemble_Select_Result> usp_ClaimOnLineReportAll_Ensemble_Select(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> productGroupId)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var productGroupIdParameter = productGroupId.HasValue ?
                new ObjectParameter("ProductGroupId", productGroupId) :
                new ObjectParameter("ProductGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineReportAll_Ensemble_Select_Result>("usp_ClaimOnLineReportAll_Ensemble_Select", dateFromParameter, dateToParameter, productGroupIdParameter);
        }
    
        public virtual ObjectResult<usp_GetEmployeeDetailINZebraCar_Select_Result> usp_GetEmployeeDetailINZebraCar_Select(Nullable<int> user_ID, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetEmployeeDetailINZebraCar_Select_Result>("usp_GetEmployeeDetailINZebraCar_Select", user_IDParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineRawdataHeader_Select_Result> usp_ClaimOnLineRawdataHeader_Select(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineRawdataHeader_Select_Result>("usp_ClaimOnLineRawdataHeader_Select", dateFromParameter, dateToParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineRawdataHeader_Update_Result> usp_ClaimOnLineRawdataHeader_Update(Nullable<int> rawdataHeaderId, Nullable<int> updateByUserId, Nullable<bool> isActive)
        {
            var rawdataHeaderIdParameter = rawdataHeaderId.HasValue ?
                new ObjectParameter("RawdataHeaderId", rawdataHeaderId) :
                new ObjectParameter("RawdataHeaderId", typeof(int));
    
            var updateByUserIdParameter = updateByUserId.HasValue ?
                new ObjectParameter("UpdateByUserId", updateByUserId) :
                new ObjectParameter("UpdateByUserId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineRawdataHeader_Update_Result>("usp_ClaimOnLineRawdataHeader_Update", rawdataHeaderIdParameter, updateByUserIdParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineRawdataSheet1Detail_Select_Result> usp_ClaimOnLineRawdataSheet1Detail_Select(Nullable<int> rawdataHeaderId)
        {
            var rawdataHeaderIdParameter = rawdataHeaderId.HasValue ?
                new ObjectParameter("RawdataHeaderId", rawdataHeaderId) :
                new ObjectParameter("RawdataHeaderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineRawdataSheet1Detail_Select_Result>("usp_ClaimOnLineRawdataSheet1Detail_Select", rawdataHeaderIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineRawdataSheet2Detail_Select_Result> usp_ClaimOnLineRawdataSheet2Detail_Select(Nullable<int> rawdataHeaderId)
        {
            var rawdataHeaderIdParameter = rawdataHeaderId.HasValue ?
                new ObjectParameter("RawdataHeaderId", rawdataHeaderId) :
                new ObjectParameter("RawdataHeaderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineRawdataSheet2Detail_Select_Result>("usp_ClaimOnLineRawdataSheet2Detail_Select", rawdataHeaderIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineRawdataHeader_Insert_Result> usp_ClaimOnLineRawdataHeader_Insert(Nullable<System.DateTime> period, Nullable<int> createByUserId)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var createByUserIdParameter = createByUserId.HasValue ?
                new ObjectParameter("CreateByUserId", createByUserId) :
                new ObjectParameter("CreateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineRawdataHeader_Insert_Result>("usp_ClaimOnLineRawdataHeader_Insert", periodParameter, createByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineByCode_Select_Result> usp_ClaimOnLineByCode_Select(string claimOnlineCode)
        {
            var claimOnlineCodeParameter = claimOnlineCode != null ?
                new ObjectParameter("claimOnlineCode", claimOnlineCode) :
                new ObjectParameter("claimOnlineCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineByCode_Select_Result>("usp_ClaimOnLineByCode_Select", claimOnlineCodeParameter);
        }
    
        public virtual ObjectResult<usp_SSSPAAccountNoByApplicationCode_Result> usp_SSSPAAccountNoByApplicationCode(string applicationCode)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SSSPAAccountNoByApplicationCode_Result>("usp_SSSPAAccountNoByApplicationCode", applicationCodeParameter);
        }
    
        public virtual ObjectResult<usp_Branch_Select_Result> usp_Branch_Select(Nullable<int> branchId, Nullable<int> zoneId, Nullable<bool> isActive)
        {
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var zoneIdParameter = zoneId.HasValue ?
                new ObjectParameter("ZoneId", zoneId) :
                new ObjectParameter("ZoneId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Branch_Select_Result>("usp_Branch_Select", branchIdParameter, zoneIdParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_Area_Select_Result> usp_Area_Select(Nullable<int> areaId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Area_Select_Result>("usp_Area_Select", areaIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_BranchByAreaId_Select_Result> usp_BranchByAreaId_Select(Nullable<int> branchId, Nullable<int> areaId, Nullable<bool> isActive, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BranchByAreaId_Select_Result>("usp_BranchByAreaId_Select", branchIdParameter, areaIdParameter, isActiveParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineVersion2_Select_Result> usp_ClaimOnLineVersion2_Select(Nullable<int> claimOnLineId, Nullable<int> ownerClaimOnLineId, Nullable<int> areaid, Nullable<int> branchid, string statusIdList, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail, Nullable<int> dateSearchMode, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var ownerClaimOnLineIdParameter = ownerClaimOnLineId.HasValue ?
                new ObjectParameter("OwnerClaimOnLineId", ownerClaimOnLineId) :
                new ObjectParameter("OwnerClaimOnLineId", typeof(int));
    
            var areaidParameter = areaid.HasValue ?
                new ObjectParameter("Areaid", areaid) :
                new ObjectParameter("Areaid", typeof(int));
    
            var branchidParameter = branchid.HasValue ?
                new ObjectParameter("Branchid", branchid) :
                new ObjectParameter("Branchid", typeof(int));
    
            var statusIdListParameter = statusIdList != null ?
                new ObjectParameter("StatusIdList", statusIdList) :
                new ObjectParameter("StatusIdList", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            var dateSearchModeParameter = dateSearchMode.HasValue ?
                new ObjectParameter("DateSearchMode", dateSearchMode) :
                new ObjectParameter("DateSearchMode", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineVersion2_Select_Result>("usp_ClaimOnLineVersion2_Select", claimOnLineIdParameter, ownerClaimOnLineIdParameter, areaidParameter, branchidParameter, statusIdListParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter, dateSearchModeParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_School_Select_Result> usp_School_Select(Nullable<int> year, Nullable<int> provinceId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_School_Select_Result>("usp_School_Select", yearParameter, provinceIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_PACustomerDetail_Select_Result> usp_PACustomerDetail_Select(string applicationCode, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PACustomerDetail_Select_Result>("usp_PACustomerDetail_Select", applicationCodeParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_PAApplicationDetail_Select_Result> usp_PAApplicationDetail_Select(string applicationCode, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PAApplicationDetail_Select_Result>("usp_PAApplicationDetail_Select", applicationCodeParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_PACustomerDetailByCustomerCode_Select_Result> usp_PACustomerDetailByCustomerCode_Select(string customerCode)
        {
            var customerCodeParameter = customerCode != null ?
                new ObjectParameter("CustomerCode", customerCode) :
                new ObjectParameter("CustomerCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PACustomerDetailByCustomerCode_Select_Result>("usp_PACustomerDetailByCustomerCode_Select", customerCodeParameter);
        }
    
        public virtual ObjectResult<usp_BankAccountByApplicationCode_Select_Result> usp_BankAccountByApplicationCode_Select(Nullable<int> productGroupId, string applicationCode)
        {
            var productGroupIdParameter = productGroupId.HasValue ?
                new ObjectParameter("ProductGroupId", productGroupId) :
                new ObjectParameter("ProductGroupId", typeof(int));
    
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BankAccountByApplicationCode_Select_Result>("usp_BankAccountByApplicationCode_Select", productGroupIdParameter, applicationCodeParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineTmp_Select_Result> usp_ClaimOnLineTmp_Select(Nullable<int> claimOnLineId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineTmp_Select_Result>("usp_ClaimOnLineTmp_Select", claimOnLineIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_Document_Select_Result> usp_Document_Select(Nullable<int> claimOnLineId, string documentTypeIdList, string documentCodeList, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var documentTypeIdListParameter = documentTypeIdList != null ?
                new ObjectParameter("DocumentTypeIdList", documentTypeIdList) :
                new ObjectParameter("DocumentTypeIdList", typeof(string));
    
            var documentCodeListParameter = documentCodeList != null ?
                new ObjectParameter("DocumentCodeList", documentCodeList) :
                new ObjectParameter("DocumentCodeList", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Document_Select_Result>("usp_Document_Select", claimOnLineIdParameter, documentTypeIdListParameter, documentCodeListParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_Document_Insert_Result> usp_Document_Insert(Nullable<int> createdByUserId, string documentTypeIdList, string remark)
        {
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            var documentTypeIdListParameter = documentTypeIdList != null ?
                new ObjectParameter("DocumentTypeIdList", documentTypeIdList) :
                new ObjectParameter("DocumentTypeIdList", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Document_Insert_Result>("usp_Document_Insert", createdByUserIdParameter, documentTypeIdListParameter, remarkParameter);
        }
    
        public virtual ObjectResult<usp_Document_Update_Result> usp_Document_Update(string documentCode, Nullable<int> claimOnLineId, Nullable<int> createdByUserID)
        {
            var documentCodeParameter = documentCode != null ?
                new ObjectParameter("DocumentCode", documentCode) :
                new ObjectParameter("DocumentCode", typeof(string));
    
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Document_Update_Result>("usp_Document_Update", documentCodeParameter, claimOnLineIdParameter, createdByUserIDParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineTmp_Insert_Result> usp_ClaimOnLineTmp_Insert(Nullable<int> claimOnLineId, string claimCode, string applicationCode, string schoolName, string customerName, string payerName, Nullable<System.DateTime> appStartCoverDate, Nullable<System.DateTime> appEndCoverDate, string appStatus, Nullable<System.DateTime> dateIn, Nullable<System.DateTime> dateOut, string claimAdmitType, string hospitalProvince, string hospitalName, string claimStatus, Nullable<double> claimAmount, string claimRemark, Nullable<int> createByUserId)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var claimCodeParameter = claimCode != null ?
                new ObjectParameter("ClaimCode", claimCode) :
                new ObjectParameter("ClaimCode", typeof(string));
    
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("SchoolName", schoolName) :
                new ObjectParameter("SchoolName", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var appStartCoverDateParameter = appStartCoverDate.HasValue ?
                new ObjectParameter("AppStartCoverDate", appStartCoverDate) :
                new ObjectParameter("AppStartCoverDate", typeof(System.DateTime));
    
            var appEndCoverDateParameter = appEndCoverDate.HasValue ?
                new ObjectParameter("AppEndCoverDate", appEndCoverDate) :
                new ObjectParameter("AppEndCoverDate", typeof(System.DateTime));
    
            var appStatusParameter = appStatus != null ?
                new ObjectParameter("AppStatus", appStatus) :
                new ObjectParameter("AppStatus", typeof(string));
    
            var dateInParameter = dateIn.HasValue ?
                new ObjectParameter("DateIn", dateIn) :
                new ObjectParameter("DateIn", typeof(System.DateTime));
    
            var dateOutParameter = dateOut.HasValue ?
                new ObjectParameter("DateOut", dateOut) :
                new ObjectParameter("DateOut", typeof(System.DateTime));
    
            var claimAdmitTypeParameter = claimAdmitType != null ?
                new ObjectParameter("ClaimAdmitType", claimAdmitType) :
                new ObjectParameter("ClaimAdmitType", typeof(string));
    
            var hospitalProvinceParameter = hospitalProvince != null ?
                new ObjectParameter("HospitalProvince", hospitalProvince) :
                new ObjectParameter("HospitalProvince", typeof(string));
    
            var hospitalNameParameter = hospitalName != null ?
                new ObjectParameter("HospitalName", hospitalName) :
                new ObjectParameter("HospitalName", typeof(string));
    
            var claimStatusParameter = claimStatus != null ?
                new ObjectParameter("ClaimStatus", claimStatus) :
                new ObjectParameter("ClaimStatus", typeof(string));
    
            var claimAmountParameter = claimAmount.HasValue ?
                new ObjectParameter("ClaimAmount", claimAmount) :
                new ObjectParameter("ClaimAmount", typeof(double));
    
            var claimRemarkParameter = claimRemark != null ?
                new ObjectParameter("ClaimRemark", claimRemark) :
                new ObjectParameter("ClaimRemark", typeof(string));
    
            var createByUserIdParameter = createByUserId.HasValue ?
                new ObjectParameter("CreateByUserId", createByUserId) :
                new ObjectParameter("CreateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineTmp_Insert_Result>("usp_ClaimOnLineTmp_Insert", claimOnLineIdParameter, claimCodeParameter, applicationCodeParameter, schoolNameParameter, customerNameParameter, payerNameParameter, appStartCoverDateParameter, appEndCoverDateParameter, appStatusParameter, dateInParameter, dateOutParameter, claimAdmitTypeParameter, hospitalProvinceParameter, hospitalNameParameter, claimStatusParameter, claimAmountParameter, claimRemarkParameter, createByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineV2_Insert_Result> usp_ClaimOnLineV2_Insert(Nullable<int> productTypeId, string detail, Nullable<int> claimCount, Nullable<int> branchId, Nullable<int> serviceByUserId, Nullable<int> noticeByUserId, Nullable<int> noticeByEmpId, Nullable<int> payeeTypeId, Nullable<int> payeeBankId, string payeeAccountNo, string payeeAccountName, Nullable<int> createdByUserId, Nullable<int> zebraCarOwnerByEmpId, Nullable<int> areaId, Nullable<int> personContactTypeId, string personContactTypeOther, string personContactName, string personContactPhoneNo)
        {
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            var detailParameter = detail != null ?
                new ObjectParameter("Detail", detail) :
                new ObjectParameter("Detail", typeof(string));
    
            var claimCountParameter = claimCount.HasValue ?
                new ObjectParameter("ClaimCount", claimCount) :
                new ObjectParameter("ClaimCount", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var serviceByUserIdParameter = serviceByUserId.HasValue ?
                new ObjectParameter("ServiceByUserId", serviceByUserId) :
                new ObjectParameter("ServiceByUserId", typeof(int));
    
            var noticeByUserIdParameter = noticeByUserId.HasValue ?
                new ObjectParameter("NoticeByUserId", noticeByUserId) :
                new ObjectParameter("NoticeByUserId", typeof(int));
    
            var noticeByEmpIdParameter = noticeByEmpId.HasValue ?
                new ObjectParameter("NoticeByEmpId", noticeByEmpId) :
                new ObjectParameter("NoticeByEmpId", typeof(int));
    
            var payeeTypeIdParameter = payeeTypeId.HasValue ?
                new ObjectParameter("PayeeTypeId", payeeTypeId) :
                new ObjectParameter("PayeeTypeId", typeof(int));
    
            var payeeBankIdParameter = payeeBankId.HasValue ?
                new ObjectParameter("PayeeBankId", payeeBankId) :
                new ObjectParameter("PayeeBankId", typeof(int));
    
            var payeeAccountNoParameter = payeeAccountNo != null ?
                new ObjectParameter("PayeeAccountNo", payeeAccountNo) :
                new ObjectParameter("PayeeAccountNo", typeof(string));
    
            var payeeAccountNameParameter = payeeAccountName != null ?
                new ObjectParameter("PayeeAccountName", payeeAccountName) :
                new ObjectParameter("PayeeAccountName", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            var zebraCarOwnerByEmpIdParameter = zebraCarOwnerByEmpId.HasValue ?
                new ObjectParameter("ZebraCarOwnerByEmpId", zebraCarOwnerByEmpId) :
                new ObjectParameter("ZebraCarOwnerByEmpId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var personContactTypeIdParameter = personContactTypeId.HasValue ?
                new ObjectParameter("PersonContactTypeId", personContactTypeId) :
                new ObjectParameter("PersonContactTypeId", typeof(int));
    
            var personContactTypeOtherParameter = personContactTypeOther != null ?
                new ObjectParameter("PersonContactTypeOther", personContactTypeOther) :
                new ObjectParameter("PersonContactTypeOther", typeof(string));
    
            var personContactNameParameter = personContactName != null ?
                new ObjectParameter("PersonContactName", personContactName) :
                new ObjectParameter("PersonContactName", typeof(string));
    
            var personContactPhoneNoParameter = personContactPhoneNo != null ?
                new ObjectParameter("PersonContactPhoneNo", personContactPhoneNo) :
                new ObjectParameter("PersonContactPhoneNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineV2_Insert_Result>("usp_ClaimOnLineV2_Insert", productTypeIdParameter, detailParameter, claimCountParameter, branchIdParameter, serviceByUserIdParameter, noticeByUserIdParameter, noticeByEmpIdParameter, payeeTypeIdParameter, payeeBankIdParameter, payeeAccountNoParameter, payeeAccountNameParameter, createdByUserIdParameter, zebraCarOwnerByEmpIdParameter, areaIdParameter, personContactTypeIdParameter, personContactTypeOtherParameter, personContactNameParameter, personContactPhoneNoParameter);
        }
    
        public virtual ObjectResult<usp_ClaimPAHistory_Select_Result> usp_ClaimPAHistory_Select(string customerDetailCode, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var customerDetailCodeParameter = customerDetailCode != null ?
                new ObjectParameter("CustomerDetailCode", customerDetailCode) :
                new ObjectParameter("CustomerDetailCode", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimPAHistory_Select_Result>("usp_ClaimPAHistory_Select", customerDetailCodeParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimPHHistory_Select_Result> usp_ClaimPHHistory_Select(string applicationCode, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimPHHistory_Select_Result>("usp_ClaimPHHistory_Select", applicationCodeParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineRejectVersion2_Insert_Result> usp_ClaimOnLineRejectVersion2_Insert(Nullable<int> claimOnLineId, Nullable<int> cancelCauseId, string remark, Nullable<int> createdByUserId)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var cancelCauseIdParameter = cancelCauseId.HasValue ?
                new ObjectParameter("CancelCauseId", cancelCauseId) :
                new ObjectParameter("CancelCauseId", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineRejectVersion2_Insert_Result>("usp_ClaimOnLineRejectVersion2_Insert", claimOnLineIdParameter, cancelCauseIdParameter, remarkParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineTransferVersion2_Insert_Result> usp_ClaimOnLineTransferVersion2_Insert(Nullable<int> claimOnLineId, string reference, string toAccountNo, Nullable<System.DateTime> transferDate, Nullable<double> transferAmountTotal, string remark, Nullable<int> createByUserId, Nullable<bool> isSendSMS, string sMSReferenceId, string sMSPhoneNo, string sMSMessage)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var toAccountNoParameter = toAccountNo != null ?
                new ObjectParameter("ToAccountNo", toAccountNo) :
                new ObjectParameter("ToAccountNo", typeof(string));
    
            var transferDateParameter = transferDate.HasValue ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(System.DateTime));
    
            var transferAmountTotalParameter = transferAmountTotal.HasValue ?
                new ObjectParameter("TransferAmountTotal", transferAmountTotal) :
                new ObjectParameter("TransferAmountTotal", typeof(double));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createByUserIdParameter = createByUserId.HasValue ?
                new ObjectParameter("CreateByUserId", createByUserId) :
                new ObjectParameter("CreateByUserId", typeof(int));
    
            var isSendSMSParameter = isSendSMS.HasValue ?
                new ObjectParameter("IsSendSMS", isSendSMS) :
                new ObjectParameter("IsSendSMS", typeof(bool));
    
            var sMSReferenceIdParameter = sMSReferenceId != null ?
                new ObjectParameter("SMSReferenceId", sMSReferenceId) :
                new ObjectParameter("SMSReferenceId", typeof(string));
    
            var sMSPhoneNoParameter = sMSPhoneNo != null ?
                new ObjectParameter("SMSPhoneNo", sMSPhoneNo) :
                new ObjectParameter("SMSPhoneNo", typeof(string));
    
            var sMSMessageParameter = sMSMessage != null ?
                new ObjectParameter("SMSMessage", sMSMessage) :
                new ObjectParameter("SMSMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineTransferVersion2_Insert_Result>("usp_ClaimOnLineTransferVersion2_Insert", claimOnLineIdParameter, referenceParameter, toAccountNoParameter, transferDateParameter, transferAmountTotalParameter, remarkParameter, createByUserIdParameter, isSendSMSParameter, sMSReferenceIdParameter, sMSPhoneNoParameter, sMSMessageParameter);
        }
    
        public virtual ObjectResult<usp_AreaXEmployeeUserId_Select_Result> usp_AreaXEmployeeUserId_Select(Nullable<int> userId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AreaXEmployeeUserId_Select_Result>("usp_AreaXEmployeeUserId_Select", userIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_PersonContactType_Select_Result> usp_PersonContactType_Select(Nullable<int> productGroupId)
        {
            var productGroupIdParameter = productGroupId.HasValue ?
                new ObjectParameter("ProductGroupId", productGroupId) :
                new ObjectParameter("ProductGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonContactType_Select_Result>("usp_PersonContactType_Select", productGroupIdParameter);
        }
    
        public virtual ObjectResult<usp_PAPersonContactByApplicationCode_Select_Result> usp_PAPersonContactByApplicationCode_Select(string applicationCode)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PAPersonContactByApplicationCode_Select_Result>("usp_PAPersonContactByApplicationCode_Select", applicationCodeParameter);
        }
    
        public virtual ObjectResult<usp_ClaimHeaderForPA_Validate_Result> usp_ClaimHeaderForPA_Validate(string customerID, string hospital_id, Nullable<System.DateTime> dateHappen, Nullable<System.DateTime> dateNotice, string accidentCause_id, string chiefComplain_id)
        {
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var hospital_idParameter = hospital_id != null ?
                new ObjectParameter("Hospital_id", hospital_id) :
                new ObjectParameter("Hospital_id", typeof(string));
    
            var dateHappenParameter = dateHappen.HasValue ?
                new ObjectParameter("DateHappen", dateHappen) :
                new ObjectParameter("DateHappen", typeof(System.DateTime));
    
            var dateNoticeParameter = dateNotice.HasValue ?
                new ObjectParameter("DateNotice", dateNotice) :
                new ObjectParameter("DateNotice", typeof(System.DateTime));
    
            var accidentCause_idParameter = accidentCause_id != null ?
                new ObjectParameter("AccidentCause_id", accidentCause_id) :
                new ObjectParameter("AccidentCause_id", typeof(string));
    
            var chiefComplain_idParameter = chiefComplain_id != null ?
                new ObjectParameter("ChiefComplain_id", chiefComplain_id) :
                new ObjectParameter("ChiefComplain_id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimHeaderForPA_Validate_Result>("usp_ClaimHeaderForPA_Validate", customerIDParameter, hospital_idParameter, dateHappenParameter, dateNoticeParameter, accidentCause_idParameter, chiefComplain_idParameter);
        }
    
        public virtual ObjectResult<usp_ClaimHeaderForPH_Validate_Result> usp_ClaimHeaderForPH_Validate(string app_id, string hospital_id, string claimType_id, string claimAdmitType_id, Nullable<System.DateTime> dateHappen, Nullable<System.DateTime> dateNotice)
        {
            var app_idParameter = app_id != null ?
                new ObjectParameter("App_id", app_id) :
                new ObjectParameter("App_id", typeof(string));
    
            var hospital_idParameter = hospital_id != null ?
                new ObjectParameter("Hospital_id", hospital_id) :
                new ObjectParameter("Hospital_id", typeof(string));
    
            var claimType_idParameter = claimType_id != null ?
                new ObjectParameter("ClaimType_id", claimType_id) :
                new ObjectParameter("ClaimType_id", typeof(string));
    
            var claimAdmitType_idParameter = claimAdmitType_id != null ?
                new ObjectParameter("ClaimAdmitType_id", claimAdmitType_id) :
                new ObjectParameter("ClaimAdmitType_id", typeof(string));
    
            var dateHappenParameter = dateHappen.HasValue ?
                new ObjectParameter("DateHappen", dateHappen) :
                new ObjectParameter("DateHappen", typeof(System.DateTime));
    
            var dateNoticeParameter = dateNotice.HasValue ?
                new ObjectParameter("DateNotice", dateNotice) :
                new ObjectParameter("DateNotice", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimHeaderForPH_Validate_Result>("usp_ClaimHeaderForPH_Validate", app_idParameter, hospital_idParameter, claimType_idParameter, claimAdmitType_idParameter, dateHappenParameter, dateNoticeParameter);
        }
    
        public virtual ObjectResult<usp_ClaimHeaderForPACancel_Insert_Result> usp_ClaimHeaderForPACancel_Insert(string customerID, string hospital_id, string claimType_id, string claimStyle_id, Nullable<System.DateTime> dateHappen, Nullable<System.DateTime> dateNotice, Nullable<System.DateTime> dateIn, Nullable<System.DateTime> dateOut, string accidentCause_id, string status_id, string createdByEmpCode, string createdByBranch_id, string claimPayBy_id, string claimOnLineCode, string denyCause_id, string chiefComplain_id, string accidentDetail, string remark)
        {
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var hospital_idParameter = hospital_id != null ?
                new ObjectParameter("Hospital_id", hospital_id) :
                new ObjectParameter("Hospital_id", typeof(string));
    
            var claimType_idParameter = claimType_id != null ?
                new ObjectParameter("ClaimType_id", claimType_id) :
                new ObjectParameter("ClaimType_id", typeof(string));
    
            var claimStyle_idParameter = claimStyle_id != null ?
                new ObjectParameter("ClaimStyle_id", claimStyle_id) :
                new ObjectParameter("ClaimStyle_id", typeof(string));
    
            var dateHappenParameter = dateHappen.HasValue ?
                new ObjectParameter("DateHappen", dateHappen) :
                new ObjectParameter("DateHappen", typeof(System.DateTime));
    
            var dateNoticeParameter = dateNotice.HasValue ?
                new ObjectParameter("DateNotice", dateNotice) :
                new ObjectParameter("DateNotice", typeof(System.DateTime));
    
            var dateInParameter = dateIn.HasValue ?
                new ObjectParameter("DateIn", dateIn) :
                new ObjectParameter("DateIn", typeof(System.DateTime));
    
            var dateOutParameter = dateOut.HasValue ?
                new ObjectParameter("DateOut", dateOut) :
                new ObjectParameter("DateOut", typeof(System.DateTime));
    
            var accidentCause_idParameter = accidentCause_id != null ?
                new ObjectParameter("AccidentCause_id", accidentCause_id) :
                new ObjectParameter("AccidentCause_id", typeof(string));
    
            var status_idParameter = status_id != null ?
                new ObjectParameter("Status_id", status_id) :
                new ObjectParameter("Status_id", typeof(string));
    
            var createdByEmpCodeParameter = createdByEmpCode != null ?
                new ObjectParameter("CreatedByEmpCode", createdByEmpCode) :
                new ObjectParameter("CreatedByEmpCode", typeof(string));
    
            var createdByBranch_idParameter = createdByBranch_id != null ?
                new ObjectParameter("CreatedByBranch_id", createdByBranch_id) :
                new ObjectParameter("CreatedByBranch_id", typeof(string));
    
            var claimPayBy_idParameter = claimPayBy_id != null ?
                new ObjectParameter("ClaimPayBy_id", claimPayBy_id) :
                new ObjectParameter("ClaimPayBy_id", typeof(string));
    
            var claimOnLineCodeParameter = claimOnLineCode != null ?
                new ObjectParameter("ClaimOnLineCode", claimOnLineCode) :
                new ObjectParameter("ClaimOnLineCode", typeof(string));
    
            var denyCause_idParameter = denyCause_id != null ?
                new ObjectParameter("DenyCause_id", denyCause_id) :
                new ObjectParameter("DenyCause_id", typeof(string));
    
            var chiefComplain_idParameter = chiefComplain_id != null ?
                new ObjectParameter("ChiefComplain_id", chiefComplain_id) :
                new ObjectParameter("ChiefComplain_id", typeof(string));
    
            var accidentDetailParameter = accidentDetail != null ?
                new ObjectParameter("AccidentDetail", accidentDetail) :
                new ObjectParameter("AccidentDetail", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimHeaderForPACancel_Insert_Result>("usp_ClaimHeaderForPACancel_Insert", customerIDParameter, hospital_idParameter, claimType_idParameter, claimStyle_idParameter, dateHappenParameter, dateNoticeParameter, dateInParameter, dateOutParameter, accidentCause_idParameter, status_idParameter, createdByEmpCodeParameter, createdByBranch_idParameter, claimPayBy_idParameter, claimOnLineCodeParameter, denyCause_idParameter, chiefComplain_idParameter, accidentDetailParameter, remarkParameter);
        }
    
        public virtual ObjectResult<usp_ClaimHeaderForPHCancel_Insert_Result> usp_ClaimHeaderForPHCancel_Insert(string app_id, string hospital_id, string claimType_id, string claimAdmitType_id, Nullable<System.DateTime> dateHappen, Nullable<System.DateTime> dateNotice, Nullable<System.DateTime> dateIn, Nullable<System.DateTime> dateOut, Nullable<int> iPDDayCount, string chiefComplain_id, string status_id, string createdByEmpCode, string claimPayBy_id, string claimOnLineCode, string denyCause_id, string remark, string branchCode, string iCD10_1)
        {
            var app_idParameter = app_id != null ?
                new ObjectParameter("App_id", app_id) :
                new ObjectParameter("App_id", typeof(string));
    
            var hospital_idParameter = hospital_id != null ?
                new ObjectParameter("Hospital_id", hospital_id) :
                new ObjectParameter("Hospital_id", typeof(string));
    
            var claimType_idParameter = claimType_id != null ?
                new ObjectParameter("ClaimType_id", claimType_id) :
                new ObjectParameter("ClaimType_id", typeof(string));
    
            var claimAdmitType_idParameter = claimAdmitType_id != null ?
                new ObjectParameter("ClaimAdmitType_id", claimAdmitType_id) :
                new ObjectParameter("ClaimAdmitType_id", typeof(string));
    
            var dateHappenParameter = dateHappen.HasValue ?
                new ObjectParameter("DateHappen", dateHappen) :
                new ObjectParameter("DateHappen", typeof(System.DateTime));
    
            var dateNoticeParameter = dateNotice.HasValue ?
                new ObjectParameter("DateNotice", dateNotice) :
                new ObjectParameter("DateNotice", typeof(System.DateTime));
    
            var dateInParameter = dateIn.HasValue ?
                new ObjectParameter("DateIn", dateIn) :
                new ObjectParameter("DateIn", typeof(System.DateTime));
    
            var dateOutParameter = dateOut.HasValue ?
                new ObjectParameter("DateOut", dateOut) :
                new ObjectParameter("DateOut", typeof(System.DateTime));
    
            var iPDDayCountParameter = iPDDayCount.HasValue ?
                new ObjectParameter("IPDDayCount", iPDDayCount) :
                new ObjectParameter("IPDDayCount", typeof(int));
    
            var chiefComplain_idParameter = chiefComplain_id != null ?
                new ObjectParameter("ChiefComplain_id", chiefComplain_id) :
                new ObjectParameter("ChiefComplain_id", typeof(string));
    
            var status_idParameter = status_id != null ?
                new ObjectParameter("Status_id", status_id) :
                new ObjectParameter("Status_id", typeof(string));
    
            var createdByEmpCodeParameter = createdByEmpCode != null ?
                new ObjectParameter("CreatedByEmpCode", createdByEmpCode) :
                new ObjectParameter("CreatedByEmpCode", typeof(string));
    
            var claimPayBy_idParameter = claimPayBy_id != null ?
                new ObjectParameter("ClaimPayBy_id", claimPayBy_id) :
                new ObjectParameter("ClaimPayBy_id", typeof(string));
    
            var claimOnLineCodeParameter = claimOnLineCode != null ?
                new ObjectParameter("ClaimOnLineCode", claimOnLineCode) :
                new ObjectParameter("ClaimOnLineCode", typeof(string));
    
            var denyCause_idParameter = denyCause_id != null ?
                new ObjectParameter("DenyCause_id", denyCause_id) :
                new ObjectParameter("DenyCause_id", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var branchCodeParameter = branchCode != null ?
                new ObjectParameter("BranchCode", branchCode) :
                new ObjectParameter("BranchCode", typeof(string));
    
            var iCD10_1Parameter = iCD10_1 != null ?
                new ObjectParameter("ICD10_1", iCD10_1) :
                new ObjectParameter("ICD10_1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimHeaderForPHCancel_Insert_Result>("usp_ClaimHeaderForPHCancel_Insert", app_idParameter, hospital_idParameter, claimType_idParameter, claimAdmitType_idParameter, dateHappenParameter, dateNoticeParameter, dateInParameter, dateOutParameter, iPDDayCountParameter, chiefComplain_idParameter, status_idParameter, createdByEmpCodeParameter, claimPayBy_idParameter, claimOnLineCodeParameter, denyCause_idParameter, remarkParameter, branchCodeParameter, iCD10_1Parameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineIsActiveByClaimOnLineId_Update_Result> usp_ClaimOnLineIsActiveByClaimOnLineId_Update(Nullable<int> claimOnLineId)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineIsActiveByClaimOnLineId_Update_Result>("usp_ClaimOnLineIsActiveByClaimOnLineId_Update", claimOnLineIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineMonitorVersion1_Select_Result1> usp_ClaimOnLineMonitorVersion1_Select(Nullable<int> claimOnLineId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> zoneId, Nullable<int> branchId, Nullable<bool> isActive, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var zoneIdParameter = zoneId.HasValue ?
                new ObjectParameter("ZoneId", zoneId) :
                new ObjectParameter("ZoneId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineMonitorVersion1_Select_Result1>("usp_ClaimOnLineMonitorVersion1_Select", claimOnLineIdParameter, dateFromParameter, dateToParameter, zoneIdParameter, branchIdParameter, isActiveParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineMonitorVersion2_Select_Result2> usp_ClaimOnLineMonitorVersion2_Select(Nullable<int> claimOnLineId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> zoneId, Nullable<int> branchId, Nullable<bool> isActive, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var zoneIdParameter = zoneId.HasValue ?
                new ObjectParameter("ZoneId", zoneId) :
                new ObjectParameter("ZoneId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineMonitorVersion2_Select_Result2>("usp_ClaimOnLineMonitorVersion2_Select", claimOnLineIdParameter, dateFromParameter, dateToParameter, zoneIdParameter, branchIdParameter, isActiveParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineTransferItemVersion1_Select_Result> usp_ClaimOnLineTransferItemVersion1_Select(string claimOnLineCode, string claimHeaderGroupCode, Nullable<bool> isActive)
        {
            var claimOnLineCodeParameter = claimOnLineCode != null ?
                new ObjectParameter("ClaimOnLineCode", claimOnLineCode) :
                new ObjectParameter("ClaimOnLineCode", typeof(string));
    
            var claimHeaderGroupCodeParameter = claimHeaderGroupCode != null ?
                new ObjectParameter("ClaimHeaderGroupCode", claimHeaderGroupCode) :
                new ObjectParameter("ClaimHeaderGroupCode", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineTransferItemVersion1_Select_Result>("usp_ClaimOnLineTransferItemVersion1_Select", claimOnLineCodeParameter, claimHeaderGroupCodeParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_DocumentValidateByDocumentCode_Select_Result> usp_DocumentValidateByDocumentCode_Select(string documentCode)
        {
            var documentCodeParameter = documentCode != null ?
                new ObjectParameter("DocumentCode", documentCode) :
                new ObjectParameter("DocumentCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DocumentValidateByDocumentCode_Select_Result>("usp_DocumentValidateByDocumentCode_Select", documentCodeParameter);
        }
    
        public virtual ObjectResult<usp_CustomerBenefit_OPD_Select_Result> usp_CustomerBenefit_OPD_Select(string appCode, Nullable<System.DateTime> dateHappen)
        {
            var appCodeParameter = appCode != null ?
                new ObjectParameter("AppCode", appCode) :
                new ObjectParameter("AppCode", typeof(string));
    
            var dateHappenParameter = dateHappen.HasValue ?
                new ObjectParameter("DateHappen", dateHappen) :
                new ObjectParameter("DateHappen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerBenefit_OPD_Select_Result>("usp_CustomerBenefit_OPD_Select", appCodeParameter, dateHappenParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> usp_OPDByProductCode_Select(string productCode)
        {
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("usp_OPDByProductCode_Select", productCodeParameter);
        }
    
        public virtual ObjectResult<usp_PHPersonContactByApplicationCode_Select_Result> usp_PHPersonContactByApplicationCode_Select(string applicationCode)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PHPersonContactByApplicationCode_Select_Result>("usp_PHPersonContactByApplicationCode_Select", applicationCodeParameter);
        }
    
        public virtual ObjectResult<usp_CreateClaimOnLineforPASearch_Select_Result> usp_CreateClaimOnLineforPASearch_Select(Nullable<int> year, Nullable<int> provinceId, string schoolId, string firstName, string lastName, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            var schoolIdParameter = schoolId != null ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CreateClaimOnLineforPASearch_Select_Result>("usp_CreateClaimOnLineforPASearch_Select", yearParameter, provinceIdParameter, schoolIdParameter, firstNameParameter, lastNameParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_CreateClaimOnLineforPHSearch_Select_Result> usp_CreateClaimOnLineforPHSearch_Select(string applicationCode, string firstName, string lastName, string cardDetail, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var cardDetailParameter = cardDetail != null ?
                new ObjectParameter("CardDetail", cardDetail) :
                new ObjectParameter("CardDetail", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CreateClaimOnLineforPHSearch_Select_Result>("usp_CreateClaimOnLineforPHSearch_Select", applicationCodeParameter, firstNameParameter, lastNameParameter, cardDetailParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_GetCreateClaimOnLineforPA_Select_Result> usp_GetCreateClaimOnLineforPA_Select(string customerDetailCode)
        {
            var customerDetailCodeParameter = customerDetailCode != null ?
                new ObjectParameter("CustomerDetailCode", customerDetailCode) :
                new ObjectParameter("CustomerDetailCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCreateClaimOnLineforPA_Select_Result>("usp_GetCreateClaimOnLineforPA_Select", customerDetailCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetCreateClaimOnLineforPH_Select_Result> usp_GetCreateClaimOnLineforPH_Select(string applicationCode)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCreateClaimOnLineforPH_Select_Result>("usp_GetCreateClaimOnLineforPH_Select", applicationCodeParameter);
        }
    
        public virtual ObjectResult<usp_ClaimAllMonitor_New_Select_Result> usp_ClaimAllMonitor_New_Select(string claimHeaderGroupCode, string claimOnLineCode, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var claimHeaderGroupCodeParameter = claimHeaderGroupCode != null ?
                new ObjectParameter("ClaimHeaderGroupCode", claimHeaderGroupCode) :
                new ObjectParameter("ClaimHeaderGroupCode", typeof(string));
    
            var claimOnLineCodeParameter = claimOnLineCode != null ?
                new ObjectParameter("ClaimOnLineCode", claimOnLineCode) :
                new ObjectParameter("ClaimOnLineCode", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimAllMonitor_New_Select_Result>("usp_ClaimAllMonitor_New_Select", claimHeaderGroupCodeParameter, claimOnLineCodeParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineMonitorVersion1_New_Select_Result> usp_ClaimOnLineMonitorVersion1_New_Select(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> zoneId, Nullable<int> branchId, string claimOnLineCode, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var zoneIdParameter = zoneId.HasValue ?
                new ObjectParameter("ZoneId", zoneId) :
                new ObjectParameter("ZoneId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var claimOnLineCodeParameter = claimOnLineCode != null ?
                new ObjectParameter("ClaimOnLineCode", claimOnLineCode) :
                new ObjectParameter("ClaimOnLineCode", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineMonitorVersion1_New_Select_Result>("usp_ClaimOnLineMonitorVersion1_New_Select", dateFromParameter, dateToParameter, zoneIdParameter, branchIdParameter, claimOnLineCodeParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_pivotClaimOnlineStatusVersion2_Select_Result> usp_pivotClaimOnlineStatusVersion2_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pivotClaimOnlineStatusVersion2_Select_Result>("usp_pivotClaimOnlineStatusVersion2_Select");
        }
    
        public virtual ObjectResult<usp_ClaimOnLineDateNotTranfer_Select_Result> usp_ClaimOnLineDateNotTranfer_Select(Nullable<int> zoneId, Nullable<int> branchId)
        {
            var zoneIdParameter = zoneId.HasValue ?
                new ObjectParameter("ZoneId", zoneId) :
                new ObjectParameter("ZoneId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineDateNotTranfer_Select_Result>("usp_ClaimOnLineDateNotTranfer_Select", zoneIdParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_DuplicateClaimOnLineCountByApplicationCode_Select(Nullable<int> productGroupId, string applicationCode, Nullable<System.DateTime> claimOnLineDate)
        {
            var productGroupIdParameter = productGroupId.HasValue ?
                new ObjectParameter("ProductGroupId", productGroupId) :
                new ObjectParameter("ProductGroupId", typeof(int));
    
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var claimOnLineDateParameter = claimOnLineDate.HasValue ?
                new ObjectParameter("ClaimOnLineDate", claimOnLineDate) :
                new ObjectParameter("ClaimOnLineDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_DuplicateClaimOnLineCountByApplicationCode_Select", productGroupIdParameter, applicationCodeParameter, claimOnLineDateParameter);
        }
    
        public virtual ObjectResult<usp_PACustomerBenefitByCustomerCode_Select_Result> usp_PACustomerBenefitByCustomerCode_Select(string customerCode)
        {
            var customerCodeParameter = customerCode != null ?
                new ObjectParameter("CustomerCode", customerCode) :
                new ObjectParameter("CustomerCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PACustomerBenefitByCustomerCode_Select_Result>("usp_PACustomerBenefitByCustomerCode_Select", customerCodeParameter);
        }
    
        public virtual ObjectResult<usp_PersonContactPhoneNoById_Select_Result> usp_PersonContactPhoneNoById_Select(Nullable<int> claimOnlineId)
        {
            var claimOnlineIdParameter = claimOnlineId.HasValue ?
                new ObjectParameter("ClaimOnlineId", claimOnlineId) :
                new ObjectParameter("ClaimOnlineId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonContactPhoneNoById_Select_Result>("usp_PersonContactPhoneNoById_Select", claimOnlineIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineTransferValidate_Select_Result> usp_ClaimOnLineTransferValidate_Select(Nullable<int> claimOnLineId, string reference, string toAccountNo, Nullable<System.DateTime> transferDate, Nullable<double> transferAmountTotal, string remark, Nullable<int> createByUserId)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var toAccountNoParameter = toAccountNo != null ?
                new ObjectParameter("ToAccountNo", toAccountNo) :
                new ObjectParameter("ToAccountNo", typeof(string));
    
            var transferDateParameter = transferDate.HasValue ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(System.DateTime));
    
            var transferAmountTotalParameter = transferAmountTotal.HasValue ?
                new ObjectParameter("TransferAmountTotal", transferAmountTotal) :
                new ObjectParameter("TransferAmountTotal", typeof(double));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createByUserIdParameter = createByUserId.HasValue ?
                new ObjectParameter("CreateByUserId", createByUserId) :
                new ObjectParameter("CreateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineTransferValidate_Select_Result>("usp_ClaimOnLineTransferValidate_Select", claimOnLineIdParameter, referenceParameter, toAccountNoParameter, transferDateParameter, transferAmountTotalParameter, remarkParameter, createByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineReportArea_Select_Result1> usp_ClaimOnLineReportArea_Select(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> areaId, Nullable<int> branchId, Nullable<System.DateTime> dateFinal)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var dateFinalParameter = dateFinal.HasValue ?
                new ObjectParameter("DateFinal", dateFinal) :
                new ObjectParameter("DateFinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineReportArea_Select_Result1>("usp_ClaimOnLineReportArea_Select", dateFromParameter, dateToParameter, areaIdParameter, branchIdParameter, dateFinalParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineReserveBranch_Select_Result> usp_ClaimOnLineReserveBranch_Select(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> productType_ID, Nullable<int> branchId)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var productType_IDParameter = productType_ID.HasValue ?
                new ObjectParameter("ProductType_ID", productType_ID) :
                new ObjectParameter("ProductType_ID", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineReserveBranch_Select_Result>("usp_ClaimOnLineReserveBranch_Select", dateFromParameter, dateToParameter, productType_IDParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineHeaderGroup_Select_Result> usp_ClaimOnLineHeaderGroup_Select(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> productType_ID, Nullable<int> branchId)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var productType_IDParameter = productType_ID.HasValue ?
                new ObjectParameter("ProductType_ID", productType_ID) :
                new ObjectParameter("ProductType_ID", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineHeaderGroup_Select_Result>("usp_ClaimOnLineHeaderGroup_Select", dateFromParameter, dateToParameter, productType_IDParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<usp_ProgramConfig_Select_Result> usp_ProgramConfig_Select(string parameterName, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var parameterNameParameter = parameterName != null ?
                new ObjectParameter("ParameterName", parameterName) :
                new ObjectParameter("ParameterName", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProgramConfig_Select_Result>("usp_ProgramConfig_Select", parameterNameParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLinePayment_Select_Result> usp_ClaimOnLinePayment_Select(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLinePayment_Select_Result>("usp_ClaimOnLinePayment_Select", dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_Branch_Select1_Result> usp_Branch_Select1(Nullable<int> branchId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Branch_Select1_Result>("usp_Branch_Select1", branchIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineVersion2_Select_V2_Result> usp_ClaimOnLineVersion2_Select_V2(Nullable<int> claimOnLineId, Nullable<int> ownerClaimOnLineId, Nullable<int> areaid, Nullable<int> branchid, Nullable<int> bankid, string statusIdList, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail, Nullable<int> dateSearchMode, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var ownerClaimOnLineIdParameter = ownerClaimOnLineId.HasValue ?
                new ObjectParameter("OwnerClaimOnLineId", ownerClaimOnLineId) :
                new ObjectParameter("OwnerClaimOnLineId", typeof(int));
    
            var areaidParameter = areaid.HasValue ?
                new ObjectParameter("Areaid", areaid) :
                new ObjectParameter("Areaid", typeof(int));
    
            var branchidParameter = branchid.HasValue ?
                new ObjectParameter("Branchid", branchid) :
                new ObjectParameter("Branchid", typeof(int));
    
            var bankidParameter = bankid.HasValue ?
                new ObjectParameter("Bankid", bankid) :
                new ObjectParameter("Bankid", typeof(int));
    
            var statusIdListParameter = statusIdList != null ?
                new ObjectParameter("StatusIdList", statusIdList) :
                new ObjectParameter("StatusIdList", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            var dateSearchModeParameter = dateSearchMode.HasValue ?
                new ObjectParameter("DateSearchMode", dateSearchMode) :
                new ObjectParameter("DateSearchMode", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineVersion2_Select_V2_Result>("usp_ClaimOnLineVersion2_Select_V2", claimOnLineIdParameter, ownerClaimOnLineIdParameter, areaidParameter, branchidParameter, bankidParameter, statusIdListParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter, dateSearchModeParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineDateNotTranfer_Select_Result> usp_ClaimOnLineDateNotTranfer_Select_V2(Nullable<int> zoneId, Nullable<int> branchId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var zoneIdParameter = zoneId.HasValue ?
                new ObjectParameter("ZoneId", zoneId) :
                new ObjectParameter("ZoneId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineDateNotTranfer_Select_Result>("usp_ClaimOnLineDateNotTranfer_Select_V2", zoneIdParameter, branchIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_GetCustomerGUIDbyClaimOnLineId_Result> usp_GetCustomerGUIDbyClaimOnLineId(Nullable<int> claimOnLineId)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCustomerGUIDbyClaimOnLineId_Result>("usp_GetCustomerGUIDbyClaimOnLineId", claimOnLineIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineVersion2_1_Select_Result> usp_ClaimOnLineVersion2_1_Select(Nullable<int> dateSearchMode, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string statusIdList, Nullable<int> branchId, Nullable<int> areaId, Nullable<int> bankId, Nullable<int> ownerClaimOnLineId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var dateSearchModeParameter = dateSearchMode.HasValue ?
                new ObjectParameter("DateSearchMode", dateSearchMode) :
                new ObjectParameter("DateSearchMode", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var statusIdListParameter = statusIdList != null ?
                new ObjectParameter("StatusIdList", statusIdList) :
                new ObjectParameter("StatusIdList", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var ownerClaimOnLineIdParameter = ownerClaimOnLineId.HasValue ?
                new ObjectParameter("ownerClaimOnLineId", ownerClaimOnLineId) :
                new ObjectParameter("ownerClaimOnLineId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineVersion2_1_Select_Result>("usp_ClaimOnLineVersion2_1_Select", dateSearchModeParameter, dateFromParameter, dateToParameter, statusIdListParameter, branchIdParameter, areaIdParameter, bankIdParameter, ownerClaimOnLineIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineVersion2_2_Select_Result> usp_ClaimOnLineVersion2_2_Select(Nullable<int> dateSearchMode, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string statusIdList, Nullable<int> branchId, Nullable<int> areaId, Nullable<int> bankId, Nullable<int> ownerClaimOnLineId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var dateSearchModeParameter = dateSearchMode.HasValue ?
                new ObjectParameter("DateSearchMode", dateSearchMode) :
                new ObjectParameter("DateSearchMode", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var statusIdListParameter = statusIdList != null ?
                new ObjectParameter("StatusIdList", statusIdList) :
                new ObjectParameter("StatusIdList", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var ownerClaimOnLineIdParameter = ownerClaimOnLineId.HasValue ?
                new ObjectParameter("ownerClaimOnLineId", ownerClaimOnLineId) :
                new ObjectParameter("ownerClaimOnLineId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineVersion2_2_Select_Result>("usp_ClaimOnLineVersion2_2_Select", dateSearchModeParameter, dateFromParameter, dateToParameter, statusIdListParameter, branchIdParameter, areaIdParameter, bankIdParameter, ownerClaimOnLineIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineRejectClaimReport_Result> usp_ClaimOnLineRejectClaimReport(Nullable<System.DateTime> transactionDateTimeFrom, Nullable<System.DateTime> transactionDateTimeTo)
        {
            var transactionDateTimeFromParameter = transactionDateTimeFrom.HasValue ?
                new ObjectParameter("TransactionDateTimeFrom", transactionDateTimeFrom) :
                new ObjectParameter("TransactionDateTimeFrom", typeof(System.DateTime));
    
            var transactionDateTimeToParameter = transactionDateTimeTo.HasValue ?
                new ObjectParameter("TransactionDateTimeTo", transactionDateTimeTo) :
                new ObjectParameter("TransactionDateTimeTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineRejectClaimReport_Result>("usp_ClaimOnLineRejectClaimReport", transactionDateTimeFromParameter, transactionDateTimeToParameter);
        }
    
        public virtual ObjectResult<usp_RefundCause_Select_Result> usp_RefundCause_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RefundCause_Select_Result>("usp_RefundCause_Select");
        }
    
        public virtual ObjectResult<usp_ClaimOnLineTransfer_InsertV2_Result> usp_ClaimOnLineTransfer_InsertV2(Nullable<int> claimOnLineId, Nullable<int> transferTypeId, Nullable<int> payerTypeId, Nullable<int> fromBankId, string fromAccountNo, string fromAccountName, Nullable<int> payeeTypeId, Nullable<int> toBankId, string toAccountNo, string toAccountName, Nullable<System.DateTime> transferDate, Nullable<double> amount, Nullable<int> claimOnLineAccountId, Nullable<bool> isActive, Nullable<int> createByUserId, string claimHeaderGroupCodeList, Nullable<int> refundCauseId, string remark)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var transferTypeIdParameter = transferTypeId.HasValue ?
                new ObjectParameter("TransferTypeId", transferTypeId) :
                new ObjectParameter("TransferTypeId", typeof(int));
    
            var payerTypeIdParameter = payerTypeId.HasValue ?
                new ObjectParameter("PayerTypeId", payerTypeId) :
                new ObjectParameter("PayerTypeId", typeof(int));
    
            var fromBankIdParameter = fromBankId.HasValue ?
                new ObjectParameter("FromBankId", fromBankId) :
                new ObjectParameter("FromBankId", typeof(int));
    
            var fromAccountNoParameter = fromAccountNo != null ?
                new ObjectParameter("FromAccountNo", fromAccountNo) :
                new ObjectParameter("FromAccountNo", typeof(string));
    
            var fromAccountNameParameter = fromAccountName != null ?
                new ObjectParameter("FromAccountName", fromAccountName) :
                new ObjectParameter("FromAccountName", typeof(string));
    
            var payeeTypeIdParameter = payeeTypeId.HasValue ?
                new ObjectParameter("PayeeTypeId", payeeTypeId) :
                new ObjectParameter("PayeeTypeId", typeof(int));
    
            var toBankIdParameter = toBankId.HasValue ?
                new ObjectParameter("ToBankId", toBankId) :
                new ObjectParameter("ToBankId", typeof(int));
    
            var toAccountNoParameter = toAccountNo != null ?
                new ObjectParameter("ToAccountNo", toAccountNo) :
                new ObjectParameter("ToAccountNo", typeof(string));
    
            var toAccountNameParameter = toAccountName != null ?
                new ObjectParameter("ToAccountName", toAccountName) :
                new ObjectParameter("ToAccountName", typeof(string));
    
            var transferDateParameter = transferDate.HasValue ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var claimOnLineAccountIdParameter = claimOnLineAccountId.HasValue ?
                new ObjectParameter("ClaimOnLineAccountId", claimOnLineAccountId) :
                new ObjectParameter("ClaimOnLineAccountId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createByUserIdParameter = createByUserId.HasValue ?
                new ObjectParameter("CreateByUserId", createByUserId) :
                new ObjectParameter("CreateByUserId", typeof(int));
    
            var claimHeaderGroupCodeListParameter = claimHeaderGroupCodeList != null ?
                new ObjectParameter("ClaimHeaderGroupCodeList", claimHeaderGroupCodeList) :
                new ObjectParameter("ClaimHeaderGroupCodeList", typeof(string));
    
            var refundCauseIdParameter = refundCauseId.HasValue ?
                new ObjectParameter("RefundCauseId", refundCauseId) :
                new ObjectParameter("RefundCauseId", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineTransfer_InsertV2_Result>("usp_ClaimOnLineTransfer_InsertV2", claimOnLineIdParameter, transferTypeIdParameter, payerTypeIdParameter, fromBankIdParameter, fromAccountNoParameter, fromAccountNameParameter, payeeTypeIdParameter, toBankIdParameter, toAccountNoParameter, toAccountNameParameter, transferDateParameter, amountParameter, claimOnLineAccountIdParameter, isActiveParameter, createByUserIdParameter, claimHeaderGroupCodeListParameter, refundCauseIdParameter, remarkParameter);
        }
    
        public virtual ObjectResult<usp_RefundTransferReport_Result> usp_RefundTransferReport(Nullable<System.DateTime> transactionDateTimeFrom, Nullable<System.DateTime> transactionDateTimeTo)
        {
            var transactionDateTimeFromParameter = transactionDateTimeFrom.HasValue ?
                new ObjectParameter("TransactionDateTimeFrom", transactionDateTimeFrom) :
                new ObjectParameter("TransactionDateTimeFrom", typeof(System.DateTime));
    
            var transactionDateTimeToParameter = transactionDateTimeTo.HasValue ?
                new ObjectParameter("TransactionDateTimeTo", transactionDateTimeTo) :
                new ObjectParameter("TransactionDateTimeTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RefundTransferReport_Result>("usp_RefundTransferReport", transactionDateTimeFromParameter, transactionDateTimeToParameter);
        }
    
        public virtual ObjectResult<usp_ClaimHeaderForPH_Validate_New_Result> usp_ClaimHeaderForPH_Validate_New(string app_id, string hospital_id, string claimType_id, string claimAdmitType_id, Nullable<System.DateTime> dateHappen, Nullable<System.DateTime> dateNotice, Nullable<System.DateTime> dateIn, Nullable<System.DateTime> dateOut)
        {
            var app_idParameter = app_id != null ?
                new ObjectParameter("App_id", app_id) :
                new ObjectParameter("App_id", typeof(string));
    
            var hospital_idParameter = hospital_id != null ?
                new ObjectParameter("Hospital_id", hospital_id) :
                new ObjectParameter("Hospital_id", typeof(string));
    
            var claimType_idParameter = claimType_id != null ?
                new ObjectParameter("ClaimType_id", claimType_id) :
                new ObjectParameter("ClaimType_id", typeof(string));
    
            var claimAdmitType_idParameter = claimAdmitType_id != null ?
                new ObjectParameter("ClaimAdmitType_id", claimAdmitType_id) :
                new ObjectParameter("ClaimAdmitType_id", typeof(string));
    
            var dateHappenParameter = dateHappen.HasValue ?
                new ObjectParameter("DateHappen", dateHappen) :
                new ObjectParameter("DateHappen", typeof(System.DateTime));
    
            var dateNoticeParameter = dateNotice.HasValue ?
                new ObjectParameter("DateNotice", dateNotice) :
                new ObjectParameter("DateNotice", typeof(System.DateTime));
    
            var dateInParameter = dateIn.HasValue ?
                new ObjectParameter("DateIn", dateIn) :
                new ObjectParameter("DateIn", typeof(System.DateTime));
    
            var dateOutParameter = dateOut.HasValue ?
                new ObjectParameter("DateOut", dateOut) :
                new ObjectParameter("DateOut", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimHeaderForPH_Validate_New_Result>("usp_ClaimHeaderForPH_Validate_New", app_idParameter, hospital_idParameter, claimType_idParameter, claimAdmitType_idParameter, dateHappenParameter, dateNoticeParameter, dateInParameter, dateOutParameter);
        }
    
        public virtual ObjectResult<usp_ClaimApprovedTransection_Insert_Result> usp_ClaimApprovedTransection_Insert(string claimHeader_id, string approvedBy_id, string applicationCode, Nullable<System.DateTime> appDateIn, Nullable<System.DateTime> appDateOut, Nullable<double> claimAmount, string provinceid, string province, string hospitalid)
        {
            var claimHeader_idParameter = claimHeader_id != null ?
                new ObjectParameter("ClaimHeader_id", claimHeader_id) :
                new ObjectParameter("ClaimHeader_id", typeof(string));
    
            var approvedBy_idParameter = approvedBy_id != null ?
                new ObjectParameter("ApprovedBy_id", approvedBy_id) :
                new ObjectParameter("ApprovedBy_id", typeof(string));
    
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var appDateInParameter = appDateIn.HasValue ?
                new ObjectParameter("AppDateIn", appDateIn) :
                new ObjectParameter("AppDateIn", typeof(System.DateTime));
    
            var appDateOutParameter = appDateOut.HasValue ?
                new ObjectParameter("AppDateOut", appDateOut) :
                new ObjectParameter("AppDateOut", typeof(System.DateTime));
    
            var claimAmountParameter = claimAmount.HasValue ?
                new ObjectParameter("ClaimAmount", claimAmount) :
                new ObjectParameter("ClaimAmount", typeof(double));
    
            var provinceidParameter = provinceid != null ?
                new ObjectParameter("Provinceid", provinceid) :
                new ObjectParameter("Provinceid", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var hospitalidParameter = hospitalid != null ?
                new ObjectParameter("Hospitalid", hospitalid) :
                new ObjectParameter("Hospitalid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimApprovedTransection_Insert_Result>("usp_ClaimApprovedTransection_Insert", claimHeader_idParameter, approvedBy_idParameter, applicationCodeParameter, appDateInParameter, appDateOutParameter, claimAmountParameter, provinceidParameter, provinceParameter, hospitalidParameter);
        }
    
        public virtual ObjectResult<usp_GetEmployeeByAreaOrBranch_Select_Result> usp_GetEmployeeByAreaOrBranch_Select(Nullable<int> areaId, Nullable<int> branchId)
        {
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetEmployeeByAreaOrBranch_Select_Result>("usp_GetEmployeeByAreaOrBranch_Select", areaIdParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<usp_ConsiderTransferPremiumReport_Result> usp_ConsiderTransferPremiumReport(Nullable<int> branchId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ConsiderTransferPremiumReport_Result>("usp_ConsiderTransferPremiumReport", branchIdParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLinePayAuto_Transaction_Select_Result> usp_ClaimOnLinePayAuto_Transaction_Select(Nullable<int> claimOnLineId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLinePayAuto_Transaction_Select_Result>("usp_ClaimOnLinePayAuto_Transaction_Select", claimOnLineIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_TmpFundTransferImport_Validate_Result> usp_TmpFundTransferImport_Validate(string tmpCode, Nullable<System.DateTime> payDate)
        {
            var tmpCodeParameter = tmpCode != null ?
                new ObjectParameter("TmpCode", tmpCode) :
                new ObjectParameter("TmpCode", typeof(string));
    
            var payDateParameter = payDate.HasValue ?
                new ObjectParameter("PayDate", payDate) :
                new ObjectParameter("PayDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TmpFundTransferImport_Validate_Result>("usp_TmpFundTransferImport_Validate", tmpCodeParameter, payDateParameter);
        }
    
        public virtual ObjectResult<usp_TmpFundTransferImportCount_Select_Result> usp_TmpFundTransferImportCount_Select(string tmpCode)
        {
            var tmpCodeParameter = tmpCode != null ?
                new ObjectParameter("TmpCode", tmpCode) :
                new ObjectParameter("TmpCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TmpFundTransferImportCount_Select_Result>("usp_TmpFundTransferImportCount_Select", tmpCodeParameter);
        }
    
        public virtual int usp_GenerateCode(string transactionCodeControlTypeDetail, Nullable<int> runningLenght, ObjectParameter result)
        {
            var transactionCodeControlTypeDetailParameter = transactionCodeControlTypeDetail != null ?
                new ObjectParameter("TransactionCodeControlTypeDetail", transactionCodeControlTypeDetail) :
                new ObjectParameter("TransactionCodeControlTypeDetail", typeof(string));
    
            var runningLenghtParameter = runningLenght.HasValue ?
                new ObjectParameter("RunningLenght", runningLenght) :
                new ObjectParameter("RunningLenght", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GenerateCode", transactionCodeControlTypeDetailParameter, runningLenghtParameter, result);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineTransferImport_Insert_Result> usp_ClaimOnLineTransferImport_Insert(string tmpCode, Nullable<int> createByUserId)
        {
            var tmpCodeParameter = tmpCode != null ?
                new ObjectParameter("tmpCode", tmpCode) :
                new ObjectParameter("tmpCode", typeof(string));
    
            var createByUserIdParameter = createByUserId.HasValue ?
                new ObjectParameter("CreateByUserId", createByUserId) :
                new ObjectParameter("CreateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineTransferImport_Insert_Result>("usp_ClaimOnLineTransferImport_Insert", tmpCodeParameter, createByUserIdParameter);
        }
    
        public virtual ObjectResult<string> usp_ClaimOnlineSMSReference_Select(Nullable<int> claimonLineId)
        {
            var claimonLineIdParameter = claimonLineId.HasValue ?
                new ObjectParameter("claimonLineId", claimonLineId) :
                new ObjectParameter("claimonLineId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_ClaimOnlineSMSReference_Select", claimonLineIdParameter);
        }
    
        public virtual ObjectResult<usp_BankAccountBalance_Insert_Result> usp_BankAccountBalance_Insert(string accountNo, string bankId, string bankName, Nullable<decimal> balance, string createdByUserId)
        {
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var bankIdParameter = bankId != null ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            var createdByUserIdParameter = createdByUserId != null ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BankAccountBalance_Insert_Result>("usp_BankAccountBalance_Insert", accountNoParameter, bankIdParameter, bankNameParameter, balanceParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_TmpFundTransferImport_Preview_Result> usp_TmpFundTransferImport_Preview(string tmpCode, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var tmpCodeParameter = tmpCode != null ?
                new ObjectParameter("TmpCode", tmpCode) :
                new ObjectParameter("TmpCode", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TmpFundTransferImport_Preview_Result>("usp_TmpFundTransferImport_Preview", tmpCodeParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_TmpFundTransferImport_Insert_Result> usp_TmpFundTransferImport_Insert(string tmpCode, string branchName, string zone, string claimHeaderGroupCode, string productGroup, Nullable<int> totalClaim, Nullable<decimal> amount, string claimType, Nullable<System.DateTime> sendDate, Nullable<System.DateTime> payDate, Nullable<int> createByUserId)
        {
            var tmpCodeParameter = tmpCode != null ?
                new ObjectParameter("TmpCode", tmpCode) :
                new ObjectParameter("TmpCode", typeof(string));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var zoneParameter = zone != null ?
                new ObjectParameter("Zone", zone) :
                new ObjectParameter("Zone", typeof(string));
    
            var claimHeaderGroupCodeParameter = claimHeaderGroupCode != null ?
                new ObjectParameter("ClaimHeaderGroupCode", claimHeaderGroupCode) :
                new ObjectParameter("ClaimHeaderGroupCode", typeof(string));
    
            var productGroupParameter = productGroup != null ?
                new ObjectParameter("ProductGroup", productGroup) :
                new ObjectParameter("ProductGroup", typeof(string));
    
            var totalClaimParameter = totalClaim.HasValue ?
                new ObjectParameter("TotalClaim", totalClaim) :
                new ObjectParameter("TotalClaim", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var claimTypeParameter = claimType != null ?
                new ObjectParameter("ClaimType", claimType) :
                new ObjectParameter("ClaimType", typeof(string));
    
            var sendDateParameter = sendDate.HasValue ?
                new ObjectParameter("SendDate", sendDate) :
                new ObjectParameter("SendDate", typeof(System.DateTime));
    
            var payDateParameter = payDate.HasValue ?
                new ObjectParameter("PayDate", payDate) :
                new ObjectParameter("PayDate", typeof(System.DateTime));
    
            var createByUserIdParameter = createByUserId.HasValue ?
                new ObjectParameter("CreateByUserId", createByUserId) :
                new ObjectParameter("CreateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TmpFundTransferImport_Insert_Result>("usp_TmpFundTransferImport_Insert", tmpCodeParameter, branchNameParameter, zoneParameter, claimHeaderGroupCodeParameter, productGroupParameter, totalClaimParameter, amountParameter, claimTypeParameter, sendDateParameter, payDateParameter, createByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnlineSurveyReport_Select_V4_Result> usp_ClaimOnlineSurveyReport_Select_V4(Nullable<int> areaId, Nullable<int> branchId, Nullable<int> serviceByUserId, Nullable<int> dateType, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var serviceByUserIdParameter = serviceByUserId.HasValue ?
                new ObjectParameter("ServiceByUserId", serviceByUserId) :
                new ObjectParameter("ServiceByUserId", typeof(int));
    
            var dateTypeParameter = dateType.HasValue ?
                new ObjectParameter("DateType", dateType) :
                new ObjectParameter("DateType", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnlineSurveyReport_Select_V4_Result>("usp_ClaimOnlineSurveyReport_Select_V4", areaIdParameter, branchIdParameter, serviceByUserIdParameter, dateTypeParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineTransferVersion3_Insert_Result> usp_ClaimOnLineTransferVersion3_Insert(Nullable<int> claimOnLineId, string reference, string toAccountNo, Nullable<System.DateTime> transferDate, Nullable<double> transferAmountTotal, string remark, Nullable<int> createByUserId, Nullable<bool> isSendSMS, string sMSReferenceId, string sMSPhoneNo, string sMSMessage, Nullable<bool> isSMSSurveyLink, string msgSurvey, string smsReference)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var toAccountNoParameter = toAccountNo != null ?
                new ObjectParameter("ToAccountNo", toAccountNo) :
                new ObjectParameter("ToAccountNo", typeof(string));
    
            var transferDateParameter = transferDate.HasValue ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(System.DateTime));
    
            var transferAmountTotalParameter = transferAmountTotal.HasValue ?
                new ObjectParameter("TransferAmountTotal", transferAmountTotal) :
                new ObjectParameter("TransferAmountTotal", typeof(double));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createByUserIdParameter = createByUserId.HasValue ?
                new ObjectParameter("CreateByUserId", createByUserId) :
                new ObjectParameter("CreateByUserId", typeof(int));
    
            var isSendSMSParameter = isSendSMS.HasValue ?
                new ObjectParameter("IsSendSMS", isSendSMS) :
                new ObjectParameter("IsSendSMS", typeof(bool));
    
            var sMSReferenceIdParameter = sMSReferenceId != null ?
                new ObjectParameter("SMSReferenceId", sMSReferenceId) :
                new ObjectParameter("SMSReferenceId", typeof(string));
    
            var sMSPhoneNoParameter = sMSPhoneNo != null ?
                new ObjectParameter("SMSPhoneNo", sMSPhoneNo) :
                new ObjectParameter("SMSPhoneNo", typeof(string));
    
            var sMSMessageParameter = sMSMessage != null ?
                new ObjectParameter("SMSMessage", sMSMessage) :
                new ObjectParameter("SMSMessage", typeof(string));
    
            var isSMSSurveyLinkParameter = isSMSSurveyLink.HasValue ?
                new ObjectParameter("IsSMSSurveyLink", isSMSSurveyLink) :
                new ObjectParameter("IsSMSSurveyLink", typeof(bool));
    
            var msgSurveyParameter = msgSurvey != null ?
                new ObjectParameter("MsgSurvey", msgSurvey) :
                new ObjectParameter("MsgSurvey", typeof(string));
    
            var smsReferenceParameter = smsReference != null ?
                new ObjectParameter("SmsReference", smsReference) :
                new ObjectParameter("SmsReference", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineTransferVersion3_Insert_Result>("usp_ClaimOnLineTransferVersion3_Insert", claimOnLineIdParameter, referenceParameter, toAccountNoParameter, transferDateParameter, transferAmountTotalParameter, remarkParameter, createByUserIdParameter, isSendSMSParameter, sMSReferenceIdParameter, sMSPhoneNoParameter, sMSMessageParameter, isSMSSurveyLinkParameter, msgSurveyParameter, smsReferenceParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnlineSurveyReport_Select_Result> usp_ClaimOnlineSurveyReport_Select(Nullable<System.DateTime> transactionDateTimeFrom, Nullable<System.DateTime> transactionDateTimeTo)
        {
            var transactionDateTimeFromParameter = transactionDateTimeFrom.HasValue ?
                new ObjectParameter("TransactionDateTimeFrom", transactionDateTimeFrom) :
                new ObjectParameter("TransactionDateTimeFrom", typeof(System.DateTime));
    
            var transactionDateTimeToParameter = transactionDateTimeTo.HasValue ?
                new ObjectParameter("TransactionDateTimeTo", transactionDateTimeTo) :
                new ObjectParameter("TransactionDateTimeTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnlineSurveyReport_Select_Result>("usp_ClaimOnlineSurveyReport_Select", transactionDateTimeFromParameter, transactionDateTimeToParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineTransferValidate2_Select_Result> usp_ClaimOnLineTransferValidate2_Select(Nullable<int> claimOnLineId, string reference, string toAccountNo, string remark, Nullable<int> createByUserId)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var toAccountNoParameter = toAccountNo != null ?
                new ObjectParameter("ToAccountNo", toAccountNo) :
                new ObjectParameter("ToAccountNo", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createByUserIdParameter = createByUserId.HasValue ?
                new ObjectParameter("CreateByUserId", createByUserId) :
                new ObjectParameter("CreateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineTransferValidate2_Select_Result>("usp_ClaimOnLineTransferValidate2_Select", claimOnLineIdParameter, referenceParameter, toAccountNoParameter, remarkParameter, createByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineVersion3_Select_Result> usp_ClaimOnLineVersion3_Select(Nullable<int> claimOnLineId, Nullable<int> ownerClaimOnLineId, Nullable<int> areaid, Nullable<int> branchid, string statusIdList, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail, Nullable<int> dateSearchMode, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var ownerClaimOnLineIdParameter = ownerClaimOnLineId.HasValue ?
                new ObjectParameter("OwnerClaimOnLineId", ownerClaimOnLineId) :
                new ObjectParameter("OwnerClaimOnLineId", typeof(int));
    
            var areaidParameter = areaid.HasValue ?
                new ObjectParameter("Areaid", areaid) :
                new ObjectParameter("Areaid", typeof(int));
    
            var branchidParameter = branchid.HasValue ?
                new ObjectParameter("Branchid", branchid) :
                new ObjectParameter("Branchid", typeof(int));
    
            var statusIdListParameter = statusIdList != null ?
                new ObjectParameter("StatusIdList", statusIdList) :
                new ObjectParameter("StatusIdList", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            var dateSearchModeParameter = dateSearchMode.HasValue ?
                new ObjectParameter("DateSearchMode", dateSearchMode) :
                new ObjectParameter("DateSearchMode", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineVersion3_Select_Result>("usp_ClaimOnLineVersion3_Select", claimOnLineIdParameter, ownerClaimOnLineIdParameter, areaidParameter, branchidParameter, statusIdListParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter, dateSearchModeParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineVersion2_Status6_Select_Result> usp_ClaimOnLineVersion2_Status6_Select(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> branchId, Nullable<bool> isShowTransferAmountLimit, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var isShowTransferAmountLimitParameter = isShowTransferAmountLimit.HasValue ?
                new ObjectParameter("isShowTransferAmountLimit", isShowTransferAmountLimit) :
                new ObjectParameter("isShowTransferAmountLimit", typeof(bool));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineVersion2_Status6_Select_Result>("usp_ClaimOnLineVersion2_Status6_Select", dateFromParameter, dateToParameter, branchIdParameter, isShowTransferAmountLimitParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_GetClaimOnLineTransfer_OutstandingTotal_Result> usp_GetClaimOnLineTransfer_OutstandingTotal(Nullable<int> dateSearchMode, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string statusIdList, Nullable<int> branchId, Nullable<int> areaId, Nullable<int> bankId, Nullable<int> ownerClaimOnLineId, Nullable<bool> isShowTransferAmountLimit, Nullable<int> indexStart, Nullable<int> pageSize, string searchDetail)
        {
            var dateSearchModeParameter = dateSearchMode.HasValue ?
                new ObjectParameter("DateSearchMode", dateSearchMode) :
                new ObjectParameter("DateSearchMode", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var statusIdListParameter = statusIdList != null ?
                new ObjectParameter("StatusIdList", statusIdList) :
                new ObjectParameter("StatusIdList", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var ownerClaimOnLineIdParameter = ownerClaimOnLineId.HasValue ?
                new ObjectParameter("ownerClaimOnLineId", ownerClaimOnLineId) :
                new ObjectParameter("ownerClaimOnLineId", typeof(int));
    
            var isShowTransferAmountLimitParameter = isShowTransferAmountLimit.HasValue ?
                new ObjectParameter("isShowTransferAmountLimit", isShowTransferAmountLimit) :
                new ObjectParameter("isShowTransferAmountLimit", typeof(bool));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetClaimOnLineTransfer_OutstandingTotal_Result>("usp_GetClaimOnLineTransfer_OutstandingTotal", dateSearchModeParameter, dateFromParameter, dateToParameter, statusIdListParameter, branchIdParameter, areaIdParameter, bankIdParameter, ownerClaimOnLineIdParameter, isShowTransferAmountLimitParameter, indexStartParameter, pageSizeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_TmpClaimOnLineTransfer_Insert_Result> usp_TmpClaimOnLineTransfer_Insert(Nullable<int> claimOnLineId, Nullable<int> transferTypeId, Nullable<int> payerTypeId, Nullable<int> payeeTypeId, Nullable<System.Guid> payListHeaderId, string reference, Nullable<double> transferAmountTotal, string remark, Nullable<int> createByUserId, string sMSPhoneNo, string sMSMessage, Nullable<bool> isSMSSurveyLink, string msgSurvey, Nullable<int> transferFromMenu, Nullable<int> claimOnLineAccountId, Nullable<int> fromBankId, string fromAccountNo, string fromAccountName)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var transferTypeIdParameter = transferTypeId.HasValue ?
                new ObjectParameter("TransferTypeId", transferTypeId) :
                new ObjectParameter("TransferTypeId", typeof(int));
    
            var payerTypeIdParameter = payerTypeId.HasValue ?
                new ObjectParameter("PayerTypeId", payerTypeId) :
                new ObjectParameter("PayerTypeId", typeof(int));
    
            var payeeTypeIdParameter = payeeTypeId.HasValue ?
                new ObjectParameter("PayeeTypeId", payeeTypeId) :
                new ObjectParameter("PayeeTypeId", typeof(int));
    
            var payListHeaderIdParameter = payListHeaderId.HasValue ?
                new ObjectParameter("PayListHeaderId", payListHeaderId) :
                new ObjectParameter("PayListHeaderId", typeof(System.Guid));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var transferAmountTotalParameter = transferAmountTotal.HasValue ?
                new ObjectParameter("TransferAmountTotal", transferAmountTotal) :
                new ObjectParameter("TransferAmountTotal", typeof(double));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createByUserIdParameter = createByUserId.HasValue ?
                new ObjectParameter("CreateByUserId", createByUserId) :
                new ObjectParameter("CreateByUserId", typeof(int));
    
            var sMSPhoneNoParameter = sMSPhoneNo != null ?
                new ObjectParameter("SMSPhoneNo", sMSPhoneNo) :
                new ObjectParameter("SMSPhoneNo", typeof(string));
    
            var sMSMessageParameter = sMSMessage != null ?
                new ObjectParameter("SMSMessage", sMSMessage) :
                new ObjectParameter("SMSMessage", typeof(string));
    
            var isSMSSurveyLinkParameter = isSMSSurveyLink.HasValue ?
                new ObjectParameter("IsSMSSurveyLink", isSMSSurveyLink) :
                new ObjectParameter("IsSMSSurveyLink", typeof(bool));
    
            var msgSurveyParameter = msgSurvey != null ?
                new ObjectParameter("MsgSurvey", msgSurvey) :
                new ObjectParameter("MsgSurvey", typeof(string));
    
            var transferFromMenuParameter = transferFromMenu.HasValue ?
                new ObjectParameter("TransferFromMenu", transferFromMenu) :
                new ObjectParameter("TransferFromMenu", typeof(int));
    
            var claimOnLineAccountIdParameter = claimOnLineAccountId.HasValue ?
                new ObjectParameter("ClaimOnLineAccountId", claimOnLineAccountId) :
                new ObjectParameter("ClaimOnLineAccountId", typeof(int));
    
            var fromBankIdParameter = fromBankId.HasValue ?
                new ObjectParameter("FromBankId", fromBankId) :
                new ObjectParameter("FromBankId", typeof(int));
    
            var fromAccountNoParameter = fromAccountNo != null ?
                new ObjectParameter("FromAccountNo", fromAccountNo) :
                new ObjectParameter("FromAccountNo", typeof(string));
    
            var fromAccountNameParameter = fromAccountName != null ?
                new ObjectParameter("FromAccountName", fromAccountName) :
                new ObjectParameter("FromAccountName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TmpClaimOnLineTransfer_Insert_Result>("usp_TmpClaimOnLineTransfer_Insert", claimOnLineIdParameter, transferTypeIdParameter, payerTypeIdParameter, payeeTypeIdParameter, payListHeaderIdParameter, referenceParameter, transferAmountTotalParameter, remarkParameter, createByUserIdParameter, sMSPhoneNoParameter, sMSMessageParameter, isSMSSurveyLinkParameter, msgSurveyParameter, transferFromMenuParameter, claimOnLineAccountIdParameter, fromBankIdParameter, fromAccountNoParameter, fromAccountNameParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLinePayAuto_Transaction_Insert_Result> usp_ClaimOnLinePayAuto_Transaction_Insert(Nullable<int> type, string code, Nullable<int> payAutoTypeId, Nullable<int> createdByUserId, Nullable<System.DateTime> paymentDate, Nullable<decimal> paymentAmount, string transRefNo, string payTransferResponse, Nullable<int> claimOnLineId, Nullable<System.Guid> payListHeaderId, string statusBank)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var payAutoTypeIdParameter = payAutoTypeId.HasValue ?
                new ObjectParameter("PayAutoTypeId", payAutoTypeId) :
                new ObjectParameter("PayAutoTypeId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            var paymentAmountParameter = paymentAmount.HasValue ?
                new ObjectParameter("PaymentAmount", paymentAmount) :
                new ObjectParameter("PaymentAmount", typeof(decimal));
    
            var transRefNoParameter = transRefNo != null ?
                new ObjectParameter("TransRefNo", transRefNo) :
                new ObjectParameter("TransRefNo", typeof(string));
    
            var payTransferResponseParameter = payTransferResponse != null ?
                new ObjectParameter("PayTransferResponse", payTransferResponse) :
                new ObjectParameter("PayTransferResponse", typeof(string));
    
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var payListHeaderIdParameter = payListHeaderId.HasValue ?
                new ObjectParameter("PayListHeaderId", payListHeaderId) :
                new ObjectParameter("PayListHeaderId", typeof(System.Guid));
    
            var statusBankParameter = statusBank != null ?
                new ObjectParameter("StatusBank", statusBank) :
                new ObjectParameter("StatusBank", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLinePayAuto_Transaction_Insert_Result>("usp_ClaimOnLinePayAuto_Transaction_Insert", typeParameter, codeParameter, payAutoTypeIdParameter, createdByUserIdParameter, paymentDateParameter, paymentAmountParameter, transRefNoParameter, payTransferResponseParameter, claimOnLineIdParameter, payListHeaderIdParameter, statusBankParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineTransfer_PayAuto_Insert_Result> usp_ClaimOnLineTransfer_PayAuto_Insert(Nullable<int> claimOnLineId, Nullable<System.DateTime> transferDate, Nullable<double> transferAmountTotal, Nullable<int> createByUserId, Nullable<bool> isSendSMS, string sMSReferenceId, string sMSPhoneNo, string msgSurvey, Nullable<System.Guid> payListHeaderId, Nullable<int> claimOnLineStatusId, string statusBank, Nullable<int> transferFormMenu, Nullable<bool> isSuccessTmpPayList)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var transferDateParameter = transferDate.HasValue ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(System.DateTime));
    
            var transferAmountTotalParameter = transferAmountTotal.HasValue ?
                new ObjectParameter("TransferAmountTotal", transferAmountTotal) :
                new ObjectParameter("TransferAmountTotal", typeof(double));
    
            var createByUserIdParameter = createByUserId.HasValue ?
                new ObjectParameter("CreateByUserId", createByUserId) :
                new ObjectParameter("CreateByUserId", typeof(int));
    
            var isSendSMSParameter = isSendSMS.HasValue ?
                new ObjectParameter("IsSendSMS", isSendSMS) :
                new ObjectParameter("IsSendSMS", typeof(bool));
    
            var sMSReferenceIdParameter = sMSReferenceId != null ?
                new ObjectParameter("SMSReferenceId", sMSReferenceId) :
                new ObjectParameter("SMSReferenceId", typeof(string));
    
            var sMSPhoneNoParameter = sMSPhoneNo != null ?
                new ObjectParameter("SMSPhoneNo", sMSPhoneNo) :
                new ObjectParameter("SMSPhoneNo", typeof(string));
    
            var msgSurveyParameter = msgSurvey != null ?
                new ObjectParameter("MsgSurvey", msgSurvey) :
                new ObjectParameter("MsgSurvey", typeof(string));
    
            var payListHeaderIdParameter = payListHeaderId.HasValue ?
                new ObjectParameter("PayListHeaderId", payListHeaderId) :
                new ObjectParameter("PayListHeaderId", typeof(System.Guid));
    
            var claimOnLineStatusIdParameter = claimOnLineStatusId.HasValue ?
                new ObjectParameter("ClaimOnLineStatusId", claimOnLineStatusId) :
                new ObjectParameter("ClaimOnLineStatusId", typeof(int));
    
            var statusBankParameter = statusBank != null ?
                new ObjectParameter("StatusBank", statusBank) :
                new ObjectParameter("StatusBank", typeof(string));
    
            var transferFormMenuParameter = transferFormMenu.HasValue ?
                new ObjectParameter("TransferFormMenu", transferFormMenu) :
                new ObjectParameter("TransferFormMenu", typeof(int));
    
            var isSuccessTmpPayListParameter = isSuccessTmpPayList.HasValue ?
                new ObjectParameter("IsSuccessTmpPayList", isSuccessTmpPayList) :
                new ObjectParameter("IsSuccessTmpPayList", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineTransfer_PayAuto_Insert_Result>("usp_ClaimOnLineTransfer_PayAuto_Insert", claimOnLineIdParameter, transferDateParameter, transferAmountTotalParameter, createByUserIdParameter, isSendSMSParameter, sMSReferenceIdParameter, sMSPhoneNoParameter, msgSurveyParameter, payListHeaderIdParameter, claimOnLineStatusIdParameter, statusBankParameter, transferFormMenuParameter, isSuccessTmpPayListParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineTransfer_PayAuto_Update_Result> usp_ClaimOnLineTransfer_PayAuto_Update(Nullable<int> claimOnLineTransferId, Nullable<int> claimOnLineId, Nullable<System.Guid> payListHeaderId, Nullable<System.DateTime> updateDate, Nullable<bool> isSendSMS, string sMSReferenceId, string statusBank, Nullable<System.DateTime> paymentDate)
        {
            var claimOnLineTransferIdParameter = claimOnLineTransferId.HasValue ?
                new ObjectParameter("ClaimOnLineTransferId", claimOnLineTransferId) :
                new ObjectParameter("ClaimOnLineTransferId", typeof(int));
    
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var payListHeaderIdParameter = payListHeaderId.HasValue ?
                new ObjectParameter("PayListHeaderId", payListHeaderId) :
                new ObjectParameter("PayListHeaderId", typeof(System.Guid));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var isSendSMSParameter = isSendSMS.HasValue ?
                new ObjectParameter("IsSendSMS", isSendSMS) :
                new ObjectParameter("IsSendSMS", typeof(bool));
    
            var sMSReferenceIdParameter = sMSReferenceId != null ?
                new ObjectParameter("SMSReferenceId", sMSReferenceId) :
                new ObjectParameter("SMSReferenceId", typeof(string));
    
            var statusBankParameter = statusBank != null ?
                new ObjectParameter("StatusBank", statusBank) :
                new ObjectParameter("StatusBank", typeof(string));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineTransfer_PayAuto_Update_Result>("usp_ClaimOnLineTransfer_PayAuto_Update", claimOnLineTransferIdParameter, claimOnLineIdParameter, payListHeaderIdParameter, updateDateParameter, isSendSMSParameter, sMSReferenceIdParameter, statusBankParameter, paymentDateParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineVersion3_1_Select_Result> usp_ClaimOnLineVersion3_1_Select(Nullable<int> dateSearchMode, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string statusIdList, Nullable<int> branchId, Nullable<int> areaId, Nullable<int> bankId, Nullable<int> ownerClaimOnLineId, Nullable<bool> isShowTransferAmountLimit, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var dateSearchModeParameter = dateSearchMode.HasValue ?
                new ObjectParameter("DateSearchMode", dateSearchMode) :
                new ObjectParameter("DateSearchMode", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var statusIdListParameter = statusIdList != null ?
                new ObjectParameter("StatusIdList", statusIdList) :
                new ObjectParameter("StatusIdList", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var ownerClaimOnLineIdParameter = ownerClaimOnLineId.HasValue ?
                new ObjectParameter("ownerClaimOnLineId", ownerClaimOnLineId) :
                new ObjectParameter("ownerClaimOnLineId", typeof(int));
    
            var isShowTransferAmountLimitParameter = isShowTransferAmountLimit.HasValue ?
                new ObjectParameter("isShowTransferAmountLimit", isShowTransferAmountLimit) :
                new ObjectParameter("isShowTransferAmountLimit", typeof(bool));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineVersion3_1_Select_Result>("usp_ClaimOnLineVersion3_1_Select", dateSearchModeParameter, dateFromParameter, dateToParameter, statusIdListParameter, branchIdParameter, areaIdParameter, bankIdParameter, ownerClaimOnLineIdParameter, isShowTransferAmountLimitParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ConsiderTransferPremiumDailyReport_Result> usp_ConsiderTransferPremiumDailyReport(Nullable<int> branchId, Nullable<System.DateTime> transferDate)
        {
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var transferDateParameter = transferDate.HasValue ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ConsiderTransferPremiumDailyReport_Result>("usp_ConsiderTransferPremiumDailyReport", branchIdParameter, transferDateParameter);
        }
    
        public virtual ObjectResult<usp_GetOverAndUnderTransferAmountCount_Result> usp_GetOverAndUnderTransferAmountCount(Nullable<int> zoneId, Nullable<int> branchId, Nullable<int> bankId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> claimOnLineStatusId)
        {
            var zoneIdParameter = zoneId.HasValue ?
                new ObjectParameter("ZoneId", zoneId) :
                new ObjectParameter("ZoneId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var claimOnLineStatusIdParameter = claimOnLineStatusId.HasValue ?
                new ObjectParameter("ClaimOnLineStatusId", claimOnLineStatusId) :
                new ObjectParameter("ClaimOnLineStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetOverAndUnderTransferAmountCount_Result>("usp_GetOverAndUnderTransferAmountCount", zoneIdParameter, branchIdParameter, bankIdParameter, dateFromParameter, dateToParameter, claimOnLineStatusIdParameter);
        }
    
        public virtual ObjectResult<usp_TmpClaimOnLineTransfer_Insert_v2_Result> usp_TmpClaimOnLineTransfer_Insert_v2(Nullable<int> claimOnLineId, Nullable<int> transferTypeId, Nullable<int> payerTypeId, Nullable<int> payeeTypeId, Nullable<System.Guid> payListHeaderId, string reference, Nullable<double> transferAmountTotal, string remark, Nullable<int> createByUserId, string createdByCode, string sMSPhoneNo, string sMSMessage, Nullable<bool> isSMSSurveyLink, string msgSurvey, Nullable<int> transferFromMenu, Nullable<int> claimOnLineAccountId, Nullable<int> fromBankId, string fromAccountNo, string fromAccountName, Nullable<int> payAutoTypeId)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var transferTypeIdParameter = transferTypeId.HasValue ?
                new ObjectParameter("TransferTypeId", transferTypeId) :
                new ObjectParameter("TransferTypeId", typeof(int));
    
            var payerTypeIdParameter = payerTypeId.HasValue ?
                new ObjectParameter("PayerTypeId", payerTypeId) :
                new ObjectParameter("PayerTypeId", typeof(int));
    
            var payeeTypeIdParameter = payeeTypeId.HasValue ?
                new ObjectParameter("PayeeTypeId", payeeTypeId) :
                new ObjectParameter("PayeeTypeId", typeof(int));
    
            var payListHeaderIdParameter = payListHeaderId.HasValue ?
                new ObjectParameter("PayListHeaderId", payListHeaderId) :
                new ObjectParameter("PayListHeaderId", typeof(System.Guid));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var transferAmountTotalParameter = transferAmountTotal.HasValue ?
                new ObjectParameter("TransferAmountTotal", transferAmountTotal) :
                new ObjectParameter("TransferAmountTotal", typeof(double));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createByUserIdParameter = createByUserId.HasValue ?
                new ObjectParameter("CreateByUserId", createByUserId) :
                new ObjectParameter("CreateByUserId", typeof(int));
    
            var createdByCodeParameter = createdByCode != null ?
                new ObjectParameter("CreatedByCode", createdByCode) :
                new ObjectParameter("CreatedByCode", typeof(string));
    
            var sMSPhoneNoParameter = sMSPhoneNo != null ?
                new ObjectParameter("SMSPhoneNo", sMSPhoneNo) :
                new ObjectParameter("SMSPhoneNo", typeof(string));
    
            var sMSMessageParameter = sMSMessage != null ?
                new ObjectParameter("SMSMessage", sMSMessage) :
                new ObjectParameter("SMSMessage", typeof(string));
    
            var isSMSSurveyLinkParameter = isSMSSurveyLink.HasValue ?
                new ObjectParameter("IsSMSSurveyLink", isSMSSurveyLink) :
                new ObjectParameter("IsSMSSurveyLink", typeof(bool));
    
            var msgSurveyParameter = msgSurvey != null ?
                new ObjectParameter("MsgSurvey", msgSurvey) :
                new ObjectParameter("MsgSurvey", typeof(string));
    
            var transferFromMenuParameter = transferFromMenu.HasValue ?
                new ObjectParameter("TransferFromMenu", transferFromMenu) :
                new ObjectParameter("TransferFromMenu", typeof(int));
    
            var claimOnLineAccountIdParameter = claimOnLineAccountId.HasValue ?
                new ObjectParameter("ClaimOnLineAccountId", claimOnLineAccountId) :
                new ObjectParameter("ClaimOnLineAccountId", typeof(int));
    
            var fromBankIdParameter = fromBankId.HasValue ?
                new ObjectParameter("FromBankId", fromBankId) :
                new ObjectParameter("FromBankId", typeof(int));
    
            var fromAccountNoParameter = fromAccountNo != null ?
                new ObjectParameter("FromAccountNo", fromAccountNo) :
                new ObjectParameter("FromAccountNo", typeof(string));
    
            var fromAccountNameParameter = fromAccountName != null ?
                new ObjectParameter("FromAccountName", fromAccountName) :
                new ObjectParameter("FromAccountName", typeof(string));
    
            var payAutoTypeIdParameter = payAutoTypeId.HasValue ?
                new ObjectParameter("PayAutoTypeId", payAutoTypeId) :
                new ObjectParameter("PayAutoTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TmpClaimOnLineTransfer_Insert_v2_Result>("usp_TmpClaimOnLineTransfer_Insert_v2", claimOnLineIdParameter, transferTypeIdParameter, payerTypeIdParameter, payeeTypeIdParameter, payListHeaderIdParameter, referenceParameter, transferAmountTotalParameter, remarkParameter, createByUserIdParameter, createdByCodeParameter, sMSPhoneNoParameter, sMSMessageParameter, isSMSSurveyLinkParameter, msgSurveyParameter, transferFromMenuParameter, claimOnLineAccountIdParameter, fromBankIdParameter, fromAccountNoParameter, fromAccountNameParameter, payAutoTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_RetryToTransfer_Update_Result> usp_RetryToTransfer_Update(Nullable<int> claimOnLineTransferId, Nullable<System.Guid> payListHeaderId, Nullable<int> updateByUserId, Nullable<int> claimOnLineId)
        {
            var claimOnLineTransferIdParameter = claimOnLineTransferId.HasValue ?
                new ObjectParameter("ClaimOnLineTransferId", claimOnLineTransferId) :
                new ObjectParameter("ClaimOnLineTransferId", typeof(int));
    
            var payListHeaderIdParameter = payListHeaderId.HasValue ?
                new ObjectParameter("PayListHeaderId", payListHeaderId) :
                new ObjectParameter("PayListHeaderId", typeof(System.Guid));
    
            var updateByUserIdParameter = updateByUserId.HasValue ?
                new ObjectParameter("UpdateByUserId", updateByUserId) :
                new ObjectParameter("UpdateByUserId", typeof(int));
    
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RetryToTransfer_Update_Result>("usp_RetryToTransfer_Update", claimOnLineTransferIdParameter, payListHeaderIdParameter, updateByUserIdParameter, claimOnLineIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineVersion3_1_Status5_Select_Result> usp_ClaimOnLineVersion3_1_Status5_Select(Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineVersion3_1_Status5_Select_Result>("usp_ClaimOnLineVersion3_1_Status5_Select", indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> usp_GetClaimOnLineTransfer_OutstandingAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("usp_GetClaimOnLineTransfer_OutstandingAll");
        }
    
        public virtual ObjectResult<usp_WhiteList_Insert_Result> usp_WhiteList_Insert(string tmpCode, string employeeCode, Nullable<int> createByUserId)
        {
            var tmpCodeParameter = tmpCode != null ?
                new ObjectParameter("TmpCode", tmpCode) :
                new ObjectParameter("TmpCode", typeof(string));
    
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var createByUserIdParameter = createByUserId.HasValue ?
                new ObjectParameter("CreateByUserId", createByUserId) :
                new ObjectParameter("CreateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_WhiteList_Insert_Result>("usp_WhiteList_Insert", tmpCodeParameter, employeeCodeParameter, createByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_WhiteList_Select_Result> usp_WhiteList_Select(Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_WhiteList_Select_Result>("usp_WhiteList_Select", indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_TmpWhiteList_Insert_Result> usp_TmpWhiteList_Insert(string tmpCode, string employeeCode, Nullable<int> createByUserId)
        {
            var tmpCodeParameter = tmpCode != null ?
                new ObjectParameter("TmpCode", tmpCode) :
                new ObjectParameter("TmpCode", typeof(string));
    
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var createByUserIdParameter = createByUserId.HasValue ?
                new ObjectParameter("CreateByUserId", createByUserId) :
                new ObjectParameter("CreateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TmpWhiteList_Insert_Result>("usp_TmpWhiteList_Insert", tmpCodeParameter, employeeCodeParameter, createByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_TmpWhiteList_Preview_Result> usp_TmpWhiteList_Preview(string tmpCode, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var tmpCodeParameter = tmpCode != null ?
                new ObjectParameter("TmpCode", tmpCode) :
                new ObjectParameter("TmpCode", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TmpWhiteList_Preview_Result>("usp_TmpWhiteList_Preview", tmpCodeParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_TmpWhiteList_Validate_Result> usp_TmpWhiteList_Validate(string tmpCode)
        {
            var tmpCodeParameter = tmpCode != null ?
                new ObjectParameter("TmpCode", tmpCode) :
                new ObjectParameter("TmpCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TmpWhiteList_Validate_Result>("usp_TmpWhiteList_Validate", tmpCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetDataClaimByCodeForClaimAI_Select_Result> usp_GetDataClaimByCodeForClaimAI_Select(string claimCode)
        {
            var claimCodeParameter = claimCode != null ?
                new ObjectParameter("ClaimCode", claimCode) :
                new ObjectParameter("ClaimCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDataClaimByCodeForClaimAI_Select_Result>("usp_GetDataClaimByCodeForClaimAI_Select", claimCodeParameter);
        }
    
        public virtual ObjectResult<usp_ClaimAIAuditResult_Insert_Result> usp_ClaimAIAuditResult_Insert(Nullable<int> claimOnLineId, string claimAIRequest, string claimAIResponse, Nullable<int> createdByUserId, Nullable<bool> isvalid, string errorMessage)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var claimAIRequestParameter = claimAIRequest != null ?
                new ObjectParameter("ClaimAIRequest", claimAIRequest) :
                new ObjectParameter("ClaimAIRequest", typeof(string));
    
            var claimAIResponseParameter = claimAIResponse != null ?
                new ObjectParameter("ClaimAIResponse", claimAIResponse) :
                new ObjectParameter("ClaimAIResponse", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            var isvalidParameter = isvalid.HasValue ?
                new ObjectParameter("Isvalid", isvalid) :
                new ObjectParameter("Isvalid", typeof(bool));
    
            var errorMessageParameter = errorMessage != null ?
                new ObjectParameter("ErrorMessage", errorMessage) :
                new ObjectParameter("ErrorMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimAIAuditResult_Insert_Result>("usp_ClaimAIAuditResult_Insert", claimOnLineIdParameter, claimAIRequestParameter, claimAIResponseParameter, createdByUserIdParameter, isvalidParameter, errorMessageParameter);
        }
    
        public virtual ObjectResult<usp_GetClaimAIAuditResultByClaimOnLineId_Select_Result> usp_GetClaimAIAuditResultByClaimOnLineId_Select(Nullable<int> claimOnLineId)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetClaimAIAuditResultByClaimOnLineId_Select_Result>("usp_GetClaimAIAuditResultByClaimOnLineId_Select", claimOnLineIdParameter);
        }
    
        public virtual ObjectResult<usp_RevertClaimOnLineStatusToStatus2_Update_Result> usp_RevertClaimOnLineStatusToStatus2_Update(Nullable<int> claimOnLineId, Nullable<int> updateByUserId)
        {
            var claimOnLineIdParameter = claimOnLineId.HasValue ?
                new ObjectParameter("ClaimOnLineId", claimOnLineId) :
                new ObjectParameter("ClaimOnLineId", typeof(int));
    
            var updateByUserIdParameter = updateByUserId.HasValue ?
                new ObjectParameter("UpdateByUserId", updateByUserId) :
                new ObjectParameter("UpdateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RevertClaimOnLineStatusToStatus2_Update_Result>("usp_RevertClaimOnLineStatusToStatus2_Update", claimOnLineIdParameter, updateByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineValidateForPostClaimAI_Select_Result> usp_ClaimOnLineValidateForPostClaimAI_Select(Nullable<int> productGroupId, string applicationCode, Nullable<int> bankId, string accountNo, string claimAdmitType, string employeeCode, string hospitalCode, Nullable<decimal> amount)
        {
            var productGroupIdParameter = productGroupId.HasValue ?
                new ObjectParameter("ProductGroupId", productGroupId) :
                new ObjectParameter("ProductGroupId", typeof(int));
    
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var claimAdmitTypeParameter = claimAdmitType != null ?
                new ObjectParameter("ClaimAdmitType", claimAdmitType) :
                new ObjectParameter("ClaimAdmitType", typeof(string));
    
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var hospitalCodeParameter = hospitalCode != null ?
                new ObjectParameter("HospitalCode", hospitalCode) :
                new ObjectParameter("HospitalCode", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineValidateForPostClaimAI_Select_Result>("usp_ClaimOnLineValidateForPostClaimAI_Select", productGroupIdParameter, applicationCodeParameter, bankIdParameter, accountNoParameter, claimAdmitTypeParameter, employeeCodeParameter, hospitalCodeParameter, amountParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnlineOfficeHours_Insert_Result> usp_ClaimOnlineOfficeHours_Insert(Nullable<bool> allow, Nullable<int> createdByUserId)
        {
            var allowParameter = allow.HasValue ?
                new ObjectParameter("allow", allow) :
                new ObjectParameter("allow", typeof(bool));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnlineOfficeHours_Insert_Result>("usp_ClaimOnlineOfficeHours_Insert", allowParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnlineOfficeHours_Select_Result> usp_ClaimOnlineOfficeHours_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnlineOfficeHours_Select_Result>("usp_ClaimOnlineOfficeHours_Select");
        }
    
        public virtual ObjectResult<usp_ClaimAIReviewReport_Result> usp_ClaimAIReviewReport(Nullable<System.DateTime> dateForm, Nullable<System.DateTime> dateTo)
        {
            var dateFormParameter = dateForm.HasValue ?
                new ObjectParameter("dateForm", dateForm) :
                new ObjectParameter("dateForm", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimAIReviewReport_Result>("usp_ClaimAIReviewReport", dateFormParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_TmpClaimOnLineTransfer_Select_Result> usp_TmpClaimOnLineTransfer_Select(Nullable<System.Guid> payListHeaderId)
        {
            var payListHeaderIdParameter = payListHeaderId.HasValue ?
                new ObjectParameter("PayListHeaderId", payListHeaderId) :
                new ObjectParameter("PayListHeaderId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TmpClaimOnLineTransfer_Select_Result>("usp_TmpClaimOnLineTransfer_Select", payListHeaderIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnLineReserveBranchDetailPA_Select_Result> usp_ClaimOnLineReserveBranchDetailPA_Select(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> productType_ID, Nullable<int> branchId)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var productType_IDParameter = productType_ID.HasValue ?
                new ObjectParameter("ProductType_ID", productType_ID) :
                new ObjectParameter("ProductType_ID", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnLineReserveBranchDetailPA_Select_Result>("usp_ClaimOnLineReserveBranchDetailPA_Select", dateFromParameter, dateToParameter, productType_IDParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnlineTransferReconcileGetSumAmount_Select_Result> usp_ClaimOnlineTransferReconcileGetSumAmount_Select(Nullable<System.DateTime> searchDete)
        {
            var searchDeteParameter = searchDete.HasValue ?
                new ObjectParameter("SearchDete", searchDete) :
                new ObjectParameter("SearchDete", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnlineTransferReconcileGetSumAmount_Select_Result>("usp_ClaimOnlineTransferReconcileGetSumAmount_Select", searchDeteParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnlineTransferReconcileMonitor_Select_Result> usp_ClaimOnlineTransferReconcileMonitor_Select(Nullable<int> indexStart, Nullable<int> pageSize, Nullable<System.DateTime> searchDete, string sortField, string orderType, string searchDetail)
        {
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var searchDeteParameter = searchDete.HasValue ?
                new ObjectParameter("SearchDete", searchDete) :
                new ObjectParameter("SearchDete", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnlineTransferReconcileMonitor_Select_Result>("usp_ClaimOnlineTransferReconcileMonitor_Select", indexStartParameter, pageSizeParameter, searchDeteParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimOnlineCheckClaimPolicy_Select_Result> usp_ClaimOnlineCheckClaimPolicy_Select(string claimCode, Nullable<decimal> payAmount)
        {
            var claimCodeParameter = claimCode != null ?
                new ObjectParameter("ClaimCode", claimCode) :
                new ObjectParameter("ClaimCode", typeof(string));
    
            var payAmountParameter = payAmount.HasValue ?
                new ObjectParameter("PayAmount", payAmount) :
                new ObjectParameter("PayAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimOnlineCheckClaimPolicy_Select_Result>("usp_ClaimOnlineCheckClaimPolicy_Select", claimCodeParameter, payAmountParameter);
        }
    }
}
