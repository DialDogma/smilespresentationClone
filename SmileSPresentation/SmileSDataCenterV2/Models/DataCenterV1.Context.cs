//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmileSDataCenterV2.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DataCenterV1Entities1 : DbContext
    {
        public DataCenterV1Entities1()
            : base("name=DataCenterV1Entities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<usp_Person_Upsert_Result> usp_Person_Upsert(Nullable<int> personTypeId, Nullable<int> cardTypeId, string cardDetail, Nullable<System.DateTime> birthDate, Nullable<int> titleId, string firstName, string lastName, Nullable<int> occupationLevelId, string primaryPhone, string secondaryPhone, Nullable<int> h_WorkPlaceId, string h_BuildingName, string h_No, string h_AddressDetail1, string h_AddressDetail2, string h_SubDistrictId, Nullable<int> c_WorkPlaceId, string c_BuildingName, string c_No, string c_AddressDetail1, string c_AddressDetail2, string c_SubDistrictId, Nullable<int> w_WorkPlaceId, string w_BuildingName, string w_No, string w_AddressDetail1, string w_AddressDetail2, string w_SubDistrictId, Nullable<int> createdByUserId, string policyCode, Nullable<int> cusdtomerTypeId, string condition1)
        {
            var personTypeIdParameter = personTypeId.HasValue ?
                new ObjectParameter("PersonTypeId", personTypeId) :
                new ObjectParameter("PersonTypeId", typeof(int));
    
            var cardTypeIdParameter = cardTypeId.HasValue ?
                new ObjectParameter("CardTypeId", cardTypeId) :
                new ObjectParameter("CardTypeId", typeof(int));
    
            var cardDetailParameter = cardDetail != null ?
                new ObjectParameter("CardDetail", cardDetail) :
                new ObjectParameter("CardDetail", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var titleIdParameter = titleId.HasValue ?
                new ObjectParameter("TitleId", titleId) :
                new ObjectParameter("TitleId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var occupationLevelIdParameter = occupationLevelId.HasValue ?
                new ObjectParameter("OccupationLevelId", occupationLevelId) :
                new ObjectParameter("OccupationLevelId", typeof(int));
    
            var primaryPhoneParameter = primaryPhone != null ?
                new ObjectParameter("PrimaryPhone", primaryPhone) :
                new ObjectParameter("PrimaryPhone", typeof(string));
    
            var secondaryPhoneParameter = secondaryPhone != null ?
                new ObjectParameter("SecondaryPhone", secondaryPhone) :
                new ObjectParameter("SecondaryPhone", typeof(string));
    
            var h_WorkPlaceIdParameter = h_WorkPlaceId.HasValue ?
                new ObjectParameter("H_WorkPlaceId", h_WorkPlaceId) :
                new ObjectParameter("H_WorkPlaceId", typeof(int));
    
            var h_BuildingNameParameter = h_BuildingName != null ?
                new ObjectParameter("H_BuildingName", h_BuildingName) :
                new ObjectParameter("H_BuildingName", typeof(string));
    
            var h_NoParameter = h_No != null ?
                new ObjectParameter("H_No", h_No) :
                new ObjectParameter("H_No", typeof(string));
    
            var h_AddressDetail1Parameter = h_AddressDetail1 != null ?
                new ObjectParameter("H_AddressDetail1", h_AddressDetail1) :
                new ObjectParameter("H_AddressDetail1", typeof(string));
    
            var h_AddressDetail2Parameter = h_AddressDetail2 != null ?
                new ObjectParameter("H_AddressDetail2", h_AddressDetail2) :
                new ObjectParameter("H_AddressDetail2", typeof(string));
    
            var h_SubDistrictIdParameter = h_SubDistrictId != null ?
                new ObjectParameter("H_SubDistrictId", h_SubDistrictId) :
                new ObjectParameter("H_SubDistrictId", typeof(string));
    
            var c_WorkPlaceIdParameter = c_WorkPlaceId.HasValue ?
                new ObjectParameter("C_WorkPlaceId", c_WorkPlaceId) :
                new ObjectParameter("C_WorkPlaceId", typeof(int));
    
            var c_BuildingNameParameter = c_BuildingName != null ?
                new ObjectParameter("C_BuildingName", c_BuildingName) :
                new ObjectParameter("C_BuildingName", typeof(string));
    
            var c_NoParameter = c_No != null ?
                new ObjectParameter("C_No", c_No) :
                new ObjectParameter("C_No", typeof(string));
    
            var c_AddressDetail1Parameter = c_AddressDetail1 != null ?
                new ObjectParameter("C_AddressDetail1", c_AddressDetail1) :
                new ObjectParameter("C_AddressDetail1", typeof(string));
    
            var c_AddressDetail2Parameter = c_AddressDetail2 != null ?
                new ObjectParameter("C_AddressDetail2", c_AddressDetail2) :
                new ObjectParameter("C_AddressDetail2", typeof(string));
    
            var c_SubDistrictIdParameter = c_SubDistrictId != null ?
                new ObjectParameter("C_SubDistrictId", c_SubDistrictId) :
                new ObjectParameter("C_SubDistrictId", typeof(string));
    
            var w_WorkPlaceIdParameter = w_WorkPlaceId.HasValue ?
                new ObjectParameter("W_WorkPlaceId", w_WorkPlaceId) :
                new ObjectParameter("W_WorkPlaceId", typeof(int));
    
            var w_BuildingNameParameter = w_BuildingName != null ?
                new ObjectParameter("W_BuildingName", w_BuildingName) :
                new ObjectParameter("W_BuildingName", typeof(string));
    
            var w_NoParameter = w_No != null ?
                new ObjectParameter("W_No", w_No) :
                new ObjectParameter("W_No", typeof(string));
    
            var w_AddressDetail1Parameter = w_AddressDetail1 != null ?
                new ObjectParameter("W_AddressDetail1", w_AddressDetail1) :
                new ObjectParameter("W_AddressDetail1", typeof(string));
    
            var w_AddressDetail2Parameter = w_AddressDetail2 != null ?
                new ObjectParameter("W_AddressDetail2", w_AddressDetail2) :
                new ObjectParameter("W_AddressDetail2", typeof(string));
    
            var w_SubDistrictIdParameter = w_SubDistrictId != null ?
                new ObjectParameter("W_SubDistrictId", w_SubDistrictId) :
                new ObjectParameter("W_SubDistrictId", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            var policyCodeParameter = policyCode != null ?
                new ObjectParameter("PolicyCode", policyCode) :
                new ObjectParameter("PolicyCode", typeof(string));
    
            var cusdtomerTypeIdParameter = cusdtomerTypeId.HasValue ?
                new ObjectParameter("CusdtomerTypeId", cusdtomerTypeId) :
                new ObjectParameter("CusdtomerTypeId", typeof(int));
    
            var condition1Parameter = condition1 != null ?
                new ObjectParameter("Condition1", condition1) :
                new ObjectParameter("Condition1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Person_Upsert_Result>("usp_Person_Upsert", personTypeIdParameter, cardTypeIdParameter, cardDetailParameter, birthDateParameter, titleIdParameter, firstNameParameter, lastNameParameter, occupationLevelIdParameter, primaryPhoneParameter, secondaryPhoneParameter, h_WorkPlaceIdParameter, h_BuildingNameParameter, h_NoParameter, h_AddressDetail1Parameter, h_AddressDetail2Parameter, h_SubDistrictIdParameter, c_WorkPlaceIdParameter, c_BuildingNameParameter, c_NoParameter, c_AddressDetail1Parameter, c_AddressDetail2Parameter, c_SubDistrictIdParameter, w_WorkPlaceIdParameter, w_BuildingNameParameter, w_NoParameter, w_AddressDetail1Parameter, w_AddressDetail2Parameter, w_SubDistrictIdParameter, createdByUserIdParameter, policyCodeParameter, cusdtomerTypeIdParameter, condition1Parameter);
        }
    
        public virtual ObjectResult<usp_GetPersonDetailForUpdate_Result> usp_GetPersonDetailForUpdate(Nullable<int> personId)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPersonDetailForUpdate_Result>("usp_GetPersonDetailForUpdate", personIdParameter);
        }
    
        public virtual ObjectResult<usp_API_AllocateInsuranceCompany_Select_Result> usp_API_AllocateInsuranceCompany_Select(Nullable<System.Guid> personGuid, Nullable<int> productPackageId, Nullable<int> periodTypeId, Nullable<int> cardTypeId, string cardDetail, string firstName, string lastName)
        {
            var personGuidParameter = personGuid.HasValue ?
                new ObjectParameter("PersonGuid", personGuid) :
                new ObjectParameter("PersonGuid", typeof(System.Guid));
    
            var productPackageIdParameter = productPackageId.HasValue ?
                new ObjectParameter("ProductPackageId", productPackageId) :
                new ObjectParameter("ProductPackageId", typeof(int));
    
            var periodTypeIdParameter = periodTypeId.HasValue ?
                new ObjectParameter("PeriodTypeId", periodTypeId) :
                new ObjectParameter("PeriodTypeId", typeof(int));
    
            var cardTypeIdParameter = cardTypeId.HasValue ?
                new ObjectParameter("CardTypeId", cardTypeId) :
                new ObjectParameter("CardTypeId", typeof(int));
    
            var cardDetailParameter = cardDetail != null ?
                new ObjectParameter("CardDetail", cardDetail) :
                new ObjectParameter("CardDetail", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_API_AllocateInsuranceCompany_Select_Result>("usp_API_AllocateInsuranceCompany_Select", personGuidParameter, productPackageIdParameter, periodTypeIdParameter, cardTypeIdParameter, cardDetailParameter, firstNameParameter, lastNameParameter);
        }
    
        public virtual int usp_TempPremiumDebtDetail_Consume_Upsert(Nullable<System.Guid> debtDetailId, Nullable<System.Guid> debtHeaderId, string iN, string applicationCode, string productGroupName, string productName, Nullable<decimal> premium, Nullable<int> periodTypeId, Nullable<System.DateTime> periodFrom, Nullable<System.DateTime> periodTo, Nullable<decimal> premiumSum, Nullable<decimal> discount, Nullable<decimal> totalAmount, string custName, Nullable<int> insuranceId, Nullable<int> receiveTypeId, string detail1, string detail2, string detail3, string remark, Nullable<bool> isActive, Nullable<int> productId)
        {
            var debtDetailIdParameter = debtDetailId.HasValue ?
                new ObjectParameter("DebtDetailId", debtDetailId) :
                new ObjectParameter("DebtDetailId", typeof(System.Guid));
    
            var debtHeaderIdParameter = debtHeaderId.HasValue ?
                new ObjectParameter("DebtHeaderId", debtHeaderId) :
                new ObjectParameter("DebtHeaderId", typeof(System.Guid));
    
            var iNParameter = iN != null ?
                new ObjectParameter("IN", iN) :
                new ObjectParameter("IN", typeof(string));
    
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var productGroupNameParameter = productGroupName != null ?
                new ObjectParameter("ProductGroupName", productGroupName) :
                new ObjectParameter("ProductGroupName", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var premiumParameter = premium.HasValue ?
                new ObjectParameter("Premium", premium) :
                new ObjectParameter("Premium", typeof(decimal));
    
            var periodTypeIdParameter = periodTypeId.HasValue ?
                new ObjectParameter("PeriodTypeId", periodTypeId) :
                new ObjectParameter("PeriodTypeId", typeof(int));
    
            var periodFromParameter = periodFrom.HasValue ?
                new ObjectParameter("PeriodFrom", periodFrom) :
                new ObjectParameter("PeriodFrom", typeof(System.DateTime));
    
            var periodToParameter = periodTo.HasValue ?
                new ObjectParameter("PeriodTo", periodTo) :
                new ObjectParameter("PeriodTo", typeof(System.DateTime));
    
            var premiumSumParameter = premiumSum.HasValue ?
                new ObjectParameter("PremiumSum", premiumSum) :
                new ObjectParameter("PremiumSum", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var custNameParameter = custName != null ?
                new ObjectParameter("CustName", custName) :
                new ObjectParameter("CustName", typeof(string));
    
            var insuranceIdParameter = insuranceId.HasValue ?
                new ObjectParameter("InsuranceId", insuranceId) :
                new ObjectParameter("InsuranceId", typeof(int));
    
            var receiveTypeIdParameter = receiveTypeId.HasValue ?
                new ObjectParameter("ReceiveTypeId", receiveTypeId) :
                new ObjectParameter("ReceiveTypeId", typeof(int));
    
            var detail1Parameter = detail1 != null ?
                new ObjectParameter("Detail1", detail1) :
                new ObjectParameter("Detail1", typeof(string));
    
            var detail2Parameter = detail2 != null ?
                new ObjectParameter("Detail2", detail2) :
                new ObjectParameter("Detail2", typeof(string));
    
            var detail3Parameter = detail3 != null ?
                new ObjectParameter("Detail3", detail3) :
                new ObjectParameter("Detail3", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TempPremiumDebtDetail_Consume_Upsert", debtDetailIdParameter, debtHeaderIdParameter, iNParameter, applicationCodeParameter, productGroupNameParameter, productNameParameter, premiumParameter, periodTypeIdParameter, periodFromParameter, periodToParameter, premiumSumParameter, discountParameter, totalAmountParameter, custNameParameter, insuranceIdParameter, receiveTypeIdParameter, detail1Parameter, detail2Parameter, detail3Parameter, remarkParameter, isActiveParameter, productIdParameter);
        }
    
        public virtual int usp_TempPremiumDebtGroup_Consume_Upsert(Nullable<System.Guid> debtGroupId, string debtGroupCode, Nullable<System.DateTime> period, Nullable<int> sourceTypeId, Nullable<int> paymentMethodTypeId, Nullable<int> itemCount, Nullable<decimal> totalAmount, Nullable<System.DateTime> payablePeriodFrom, Nullable<System.DateTime> payablePeriodTo, Nullable<bool> isSendSMSPaySlip, Nullable<bool> isSendSMSBilling, Nullable<int> debtGroupStatusId, Nullable<int> debtGroupReferTypeId, Nullable<bool> isActive, Nullable<System.DateTime> createdDate, Nullable<int> createdByUserId, Nullable<System.DateTime> updatedDate, Nullable<int> updatedByUserId)
        {
            var debtGroupIdParameter = debtGroupId.HasValue ?
                new ObjectParameter("DebtGroupId", debtGroupId) :
                new ObjectParameter("DebtGroupId", typeof(System.Guid));
    
            var debtGroupCodeParameter = debtGroupCode != null ?
                new ObjectParameter("DebtGroupCode", debtGroupCode) :
                new ObjectParameter("DebtGroupCode", typeof(string));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var sourceTypeIdParameter = sourceTypeId.HasValue ?
                new ObjectParameter("SourceTypeId", sourceTypeId) :
                new ObjectParameter("SourceTypeId", typeof(int));
    
            var paymentMethodTypeIdParameter = paymentMethodTypeId.HasValue ?
                new ObjectParameter("PaymentMethodTypeId", paymentMethodTypeId) :
                new ObjectParameter("PaymentMethodTypeId", typeof(int));
    
            var itemCountParameter = itemCount.HasValue ?
                new ObjectParameter("ItemCount", itemCount) :
                new ObjectParameter("ItemCount", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var payablePeriodFromParameter = payablePeriodFrom.HasValue ?
                new ObjectParameter("PayablePeriodFrom", payablePeriodFrom) :
                new ObjectParameter("PayablePeriodFrom", typeof(System.DateTime));
    
            var payablePeriodToParameter = payablePeriodTo.HasValue ?
                new ObjectParameter("PayablePeriodTo", payablePeriodTo) :
                new ObjectParameter("PayablePeriodTo", typeof(System.DateTime));
    
            var isSendSMSPaySlipParameter = isSendSMSPaySlip.HasValue ?
                new ObjectParameter("IsSendSMSPaySlip", isSendSMSPaySlip) :
                new ObjectParameter("IsSendSMSPaySlip", typeof(bool));
    
            var isSendSMSBillingParameter = isSendSMSBilling.HasValue ?
                new ObjectParameter("IsSendSMSBilling", isSendSMSBilling) :
                new ObjectParameter("IsSendSMSBilling", typeof(bool));
    
            var debtGroupStatusIdParameter = debtGroupStatusId.HasValue ?
                new ObjectParameter("DebtGroupStatusId", debtGroupStatusId) :
                new ObjectParameter("DebtGroupStatusId", typeof(int));
    
            var debtGroupReferTypeIdParameter = debtGroupReferTypeId.HasValue ?
                new ObjectParameter("DebtGroupReferTypeId", debtGroupReferTypeId) :
                new ObjectParameter("DebtGroupReferTypeId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TempPremiumDebtGroup_Consume_Upsert", debtGroupIdParameter, debtGroupCodeParameter, periodParameter, sourceTypeIdParameter, paymentMethodTypeIdParameter, itemCountParameter, totalAmountParameter, payablePeriodFromParameter, payablePeriodToParameter, isSendSMSPaySlipParameter, isSendSMSBillingParameter, debtGroupStatusIdParameter, debtGroupReferTypeIdParameter, isActiveParameter, createdDateParameter, createdByUserIdParameter, updatedDateParameter, updatedByUserIdParameter);
        }
    
        public virtual int usp_TempPremiumDebtHeader_Consume_Upsert(Nullable<System.Guid> debtHeaderId, Nullable<System.Guid> debtGroupId, string b, string payerName, string phoneNo, Nullable<decimal> premiumDebt, Nullable<int> bankId, string bankAccountName, string bankAccountNo, string ref1, string ref2, string ref3, Nullable<int> paymentStatusId, Nullable<int> paymentChannelId, Nullable<System.Guid> refSummaryDetailId, Nullable<System.DateTime> transactionDatetime, Nullable<int> itemCount, Nullable<bool> isActive, Nullable<System.DateTime> updatedDate, Nullable<int> updatedByUserId)
        {
            var debtHeaderIdParameter = debtHeaderId.HasValue ?
                new ObjectParameter("DebtHeaderId", debtHeaderId) :
                new ObjectParameter("DebtHeaderId", typeof(System.Guid));
    
            var debtGroupIdParameter = debtGroupId.HasValue ?
                new ObjectParameter("DebtGroupId", debtGroupId) :
                new ObjectParameter("DebtGroupId", typeof(System.Guid));
    
            var bParameter = b != null ?
                new ObjectParameter("B", b) :
                new ObjectParameter("B", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var premiumDebtParameter = premiumDebt.HasValue ?
                new ObjectParameter("PremiumDebt", premiumDebt) :
                new ObjectParameter("PremiumDebt", typeof(decimal));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var bankAccountNameParameter = bankAccountName != null ?
                new ObjectParameter("BankAccountName", bankAccountName) :
                new ObjectParameter("BankAccountName", typeof(string));
    
            var bankAccountNoParameter = bankAccountNo != null ?
                new ObjectParameter("BankAccountNo", bankAccountNo) :
                new ObjectParameter("BankAccountNo", typeof(string));
    
            var ref1Parameter = ref1 != null ?
                new ObjectParameter("Ref1", ref1) :
                new ObjectParameter("Ref1", typeof(string));
    
            var ref2Parameter = ref2 != null ?
                new ObjectParameter("Ref2", ref2) :
                new ObjectParameter("Ref2", typeof(string));
    
            var ref3Parameter = ref3 != null ?
                new ObjectParameter("Ref3", ref3) :
                new ObjectParameter("Ref3", typeof(string));
    
            var paymentStatusIdParameter = paymentStatusId.HasValue ?
                new ObjectParameter("PaymentStatusId", paymentStatusId) :
                new ObjectParameter("PaymentStatusId", typeof(int));
    
            var paymentChannelIdParameter = paymentChannelId.HasValue ?
                new ObjectParameter("PaymentChannelId", paymentChannelId) :
                new ObjectParameter("PaymentChannelId", typeof(int));
    
            var refSummaryDetailIdParameter = refSummaryDetailId.HasValue ?
                new ObjectParameter("RefSummaryDetailId", refSummaryDetailId) :
                new ObjectParameter("RefSummaryDetailId", typeof(System.Guid));
    
            var transactionDatetimeParameter = transactionDatetime.HasValue ?
                new ObjectParameter("TransactionDatetime", transactionDatetime) :
                new ObjectParameter("TransactionDatetime", typeof(System.DateTime));
    
            var itemCountParameter = itemCount.HasValue ?
                new ObjectParameter("ItemCount", itemCount) :
                new ObjectParameter("ItemCount", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TempPremiumDebtHeader_Consume_Upsert", debtHeaderIdParameter, debtGroupIdParameter, bParameter, payerNameParameter, phoneNoParameter, premiumDebtParameter, bankIdParameter, bankAccountNameParameter, bankAccountNoParameter, ref1Parameter, ref2Parameter, ref3Parameter, paymentStatusIdParameter, paymentChannelIdParameter, refSummaryDetailIdParameter, transactionDatetimeParameter, itemCountParameter, isActiveParameter, updatedDateParameter, updatedByUserIdParameter);
        }
    }
}
