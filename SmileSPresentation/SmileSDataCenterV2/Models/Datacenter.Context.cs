//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmileSDataCenterV2.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DataCenterV1Entities : DbContext
    {
        public DataCenterV1Entities()
            : base("name=DataCenterV1Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetToken> AspNetTokens { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
    
        public virtual ObjectResult<usp_Branch_Select_Result> usp_Branch_Select(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("branchID", branchID) :
                new ObjectParameter("branchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Branch_Select_Result>("usp_Branch_Select", branchIDParameter);
        }
    
        public virtual ObjectResult<usp_District_ByProvinceID_Select_Result> usp_District_ByProvinceID_Select(Nullable<int> provinceID)
        {
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_District_ByProvinceID_Select_Result>("usp_District_ByProvinceID_Select", provinceIDParameter);
        }
    
        public virtual ObjectResult<usp_District_Select_Result> usp_District_Select(Nullable<int> districtID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_District_Select_Result>("usp_District_Select", districtIDParameter);
        }
    
        public virtual ObjectResult<usp_Province_Select_Result> usp_Province_Select(Nullable<int> province_ID)
        {
            var province_IDParameter = province_ID.HasValue ?
                new ObjectParameter("Province_ID", province_ID) :
                new ObjectParameter("Province_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Province_Select_Result>("usp_Province_Select", province_IDParameter);
        }
    
        public virtual ObjectResult<usp_Province2_Select_Result> usp_Province2_Select(Nullable<int> province_ID)
        {
            var province_IDParameter = province_ID.HasValue ?
                new ObjectParameter("Province_ID", province_ID) :
                new ObjectParameter("Province_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Province2_Select_Result>("usp_Province2_Select", province_IDParameter);
        }
    
        public virtual ObjectResult<usp_SubDistrict_ByDistrictID_Select_Result> usp_SubDistrict_ByDistrictID_Select(Nullable<int> districtID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SubDistrict_ByDistrictID_Select_Result>("usp_SubDistrict_ByDistrictID_Select", districtIDParameter);
        }
    
        public virtual ObjectResult<usp_SubDistrict_Select_Result> usp_SubDistrict_Select(Nullable<int> subDistrictID)
        {
            var subDistrictIDParameter = subDistrictID.HasValue ?
                new ObjectParameter("SubDistrictID", subDistrictID) :
                new ObjectParameter("SubDistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SubDistrict_Select_Result>("usp_SubDistrict_Select", subDistrictIDParameter);
        }
    
        public virtual ObjectResult<usp_Employee_Select_Result> usp_Employee_Select(Nullable<int> employeeId, string employeeCode, Nullable<int> teamId, Nullable<int> positionId, Nullable<int> departmentId, Nullable<int> employeeStatusId, Nullable<int> branchId, Nullable<bool> isActive, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var teamIdParameter = teamId.HasValue ?
                new ObjectParameter("TeamId", teamId) :
                new ObjectParameter("TeamId", typeof(int));
    
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("PositionId", positionId) :
                new ObjectParameter("PositionId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var employeeStatusIdParameter = employeeStatusId.HasValue ?
                new ObjectParameter("EmployeeStatusId", employeeStatusId) :
                new ObjectParameter("EmployeeStatusId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Employee_Select_Result>("usp_Employee_Select", employeeIdParameter, employeeCodeParameter, teamIdParameter, positionIdParameter, departmentIdParameter, employeeStatusIdParameter, branchIdParameter, isActiveParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual ObjectResult<usp_Employee_SelectV2_Result> usp_Employee_SelectV2(Nullable<int> employeeId, string employeeCode, Nullable<int> teamId, Nullable<int> positionId, Nullable<int> departmentId, Nullable<int> employeeStatusId, Nullable<int> branchId, Nullable<bool> isActive, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var teamIdParameter = teamId.HasValue ?
                new ObjectParameter("TeamId", teamId) :
                new ObjectParameter("TeamId", typeof(int));
    
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("PositionId", positionId) :
                new ObjectParameter("PositionId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var employeeStatusIdParameter = employeeStatusId.HasValue ?
                new ObjectParameter("EmployeeStatusId", employeeStatusId) :
                new ObjectParameter("EmployeeStatusId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Employee_SelectV2_Result>("usp_Employee_SelectV2", employeeIdParameter, employeeCodeParameter, teamIdParameter, positionIdParameter, departmentIdParameter, employeeStatusIdParameter, branchIdParameter, isActiveParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeCardByEmployeeCode_Select_Result> usp_EmployeeCardByEmployeeCode_Select(string employeeCode)
        {
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeCardByEmployeeCode_Select_Result>("usp_EmployeeCardByEmployeeCode_Select", employeeCodeParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeContactByEmployeeCode_Select_Result> usp_EmployeeContactByEmployeeCode_Select(string employeeCode)
        {
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeContactByEmployeeCode_Select_Result>("usp_EmployeeContactByEmployeeCode_Select", employeeCodeParameter);
        }
    
        public virtual ObjectResult<usp_SiamSmileCompany_Select_Result> usp_SiamSmileCompany_Select(Nullable<int> siamSmileCompany_ID)
        {
            var siamSmileCompany_IDParameter = siamSmileCompany_ID.HasValue ?
                new ObjectParameter("SiamSmileCompany_ID", siamSmileCompany_ID) :
                new ObjectParameter("SiamSmileCompany_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SiamSmileCompany_Select_Result>("usp_SiamSmileCompany_Select", siamSmileCompany_IDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_UserIDByEmployeeCode_Select(string employeeCode)
        {
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_UserIDByEmployeeCode_Select", employeeCodeParameter);
        }
    
        public virtual ObjectResult<usp_CollectSource_Select_Result> usp_CollectSource_Select(Nullable<int> organize_ID)
        {
            var organize_IDParameter = organize_ID.HasValue ?
                new ObjectParameter("Organize_ID", organize_ID) :
                new ObjectParameter("Organize_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CollectSource_Select_Result>("usp_CollectSource_Select", organize_IDParameter);
        }
    
        public virtual ObjectResult<usp_Hospital_Select_Result> usp_Hospital_Select(string keyWord, string provinceID, string districtID, string subDistrictID, Nullable<int> pageSize, Nullable<int> indexStart, string sortField, string orderType)
        {
            var keyWordParameter = keyWord != null ?
                new ObjectParameter("KeyWord", keyWord) :
                new ObjectParameter("KeyWord", typeof(string));
    
            var provinceIDParameter = provinceID != null ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(string));
    
            var districtIDParameter = districtID != null ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(string));
    
            var subDistrictIDParameter = subDistrictID != null ?
                new ObjectParameter("SubDistrictID", subDistrictID) :
                new ObjectParameter("SubDistrictID", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("indexStart", indexStart) :
                new ObjectParameter("indexStart", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Hospital_Select_Result>("usp_Hospital_Select", keyWordParameter, provinceIDParameter, districtIDParameter, subDistrictIDParameter, pageSizeParameter, indexStartParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_Insurance_Select_Result> usp_Insurance_Select(Nullable<int> insuranceId)
        {
            var insuranceIdParameter = insuranceId.HasValue ?
                new ObjectParameter("InsuranceId", insuranceId) :
                new ObjectParameter("InsuranceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Insurance_Select_Result>("usp_Insurance_Select", insuranceIdParameter);
        }
    
        public virtual ObjectResult<usp_Organize_Select_Result> usp_Organize_Select(Nullable<int> organizeTypeId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var organizeTypeIdParameter = organizeTypeId.HasValue ?
                new ObjectParameter("OrganizeTypeId", organizeTypeId) :
                new ObjectParameter("OrganizeTypeId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Organize_Select_Result>("usp_Organize_Select", organizeTypeIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual int usp_Address_ByDT_Insert(Nullable<int> addressType_ID, ObjectParameter returnAddress_ID)
        {
            var addressType_IDParameter = addressType_ID.HasValue ?
                new ObjectParameter("AddressType_ID", addressType_ID) :
                new ObjectParameter("AddressType_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Address_ByDT_Insert", addressType_IDParameter, returnAddress_ID);
        }
    
        public virtual int usp_Address_ByDT_Update(Nullable<int> address_ID, Nullable<int> addressType_ID)
        {
            var address_IDParameter = address_ID.HasValue ?
                new ObjectParameter("Address_ID", address_ID) :
                new ObjectParameter("Address_ID", typeof(int));
    
            var addressType_IDParameter = addressType_ID.HasValue ?
                new ObjectParameter("AddressType_ID", addressType_ID) :
                new ObjectParameter("AddressType_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Address_ByDT_Update", address_IDParameter, addressType_IDParameter);
        }
    
        public virtual int usp_Address_Delete(Nullable<int> address_ID, Nullable<int> deleteBy_ID)
        {
            var address_IDParameter = address_ID.HasValue ?
                new ObjectParameter("Address_ID", address_ID) :
                new ObjectParameter("Address_ID", typeof(int));
    
            var deleteBy_IDParameter = deleteBy_ID.HasValue ?
                new ObjectParameter("DeleteBy_ID", deleteBy_ID) :
                new ObjectParameter("DeleteBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Address_Delete", address_IDParameter, deleteBy_IDParameter);
        }
    
        public virtual ObjectResult<usp_Address_Insert_Result> usp_Address_Insert(string buildingName, string villageName, string no, string moo, string floor, string room, string soi, string road, string subDistrict_ID, Nullable<int> createBy_ID, ObjectParameter returnAddress_ID)
        {
            var buildingNameParameter = buildingName != null ?
                new ObjectParameter("BuildingName", buildingName) :
                new ObjectParameter("BuildingName", typeof(string));
    
            var villageNameParameter = villageName != null ?
                new ObjectParameter("VillageName", villageName) :
                new ObjectParameter("VillageName", typeof(string));
    
            var noParameter = no != null ?
                new ObjectParameter("No", no) :
                new ObjectParameter("No", typeof(string));
    
            var mooParameter = moo != null ?
                new ObjectParameter("Moo", moo) :
                new ObjectParameter("Moo", typeof(string));
    
            var floorParameter = floor != null ?
                new ObjectParameter("Floor", floor) :
                new ObjectParameter("Floor", typeof(string));
    
            var roomParameter = room != null ?
                new ObjectParameter("Room", room) :
                new ObjectParameter("Room", typeof(string));
    
            var soiParameter = soi != null ?
                new ObjectParameter("Soi", soi) :
                new ObjectParameter("Soi", typeof(string));
    
            var roadParameter = road != null ?
                new ObjectParameter("Road", road) :
                new ObjectParameter("Road", typeof(string));
    
            var subDistrict_IDParameter = subDistrict_ID != null ?
                new ObjectParameter("SubDistrict_ID", subDistrict_ID) :
                new ObjectParameter("SubDistrict_ID", typeof(string));
    
            var createBy_IDParameter = createBy_ID.HasValue ?
                new ObjectParameter("CreateBy_ID", createBy_ID) :
                new ObjectParameter("CreateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Address_Insert_Result>("usp_Address_Insert", buildingNameParameter, villageNameParameter, noParameter, mooParameter, floorParameter, roomParameter, soiParameter, roadParameter, subDistrict_IDParameter, createBy_IDParameter, returnAddress_ID);
        }
    
        public virtual ObjectResult<usp_Address_Select_Result> usp_Address_Select(Nullable<int> address_ID)
        {
            var address_IDParameter = address_ID.HasValue ?
                new ObjectParameter("Address_ID", address_ID) :
                new ObjectParameter("Address_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Address_Select_Result>("usp_Address_Select", address_IDParameter);
        }
    
        public virtual ObjectResult<usp_Address_Update_Result> usp_Address_Update(Nullable<int> address_ID, string buildingName, string villageName, string no, string moo, string floor, string room, string soi, string road, string subDistrict_ID, Nullable<int> updateBy_ID)
        {
            var address_IDParameter = address_ID.HasValue ?
                new ObjectParameter("Address_ID", address_ID) :
                new ObjectParameter("Address_ID", typeof(int));
    
            var buildingNameParameter = buildingName != null ?
                new ObjectParameter("BuildingName", buildingName) :
                new ObjectParameter("BuildingName", typeof(string));
    
            var villageNameParameter = villageName != null ?
                new ObjectParameter("VillageName", villageName) :
                new ObjectParameter("VillageName", typeof(string));
    
            var noParameter = no != null ?
                new ObjectParameter("No", no) :
                new ObjectParameter("No", typeof(string));
    
            var mooParameter = moo != null ?
                new ObjectParameter("Moo", moo) :
                new ObjectParameter("Moo", typeof(string));
    
            var floorParameter = floor != null ?
                new ObjectParameter("Floor", floor) :
                new ObjectParameter("Floor", typeof(string));
    
            var roomParameter = room != null ?
                new ObjectParameter("Room", room) :
                new ObjectParameter("Room", typeof(string));
    
            var soiParameter = soi != null ?
                new ObjectParameter("Soi", soi) :
                new ObjectParameter("Soi", typeof(string));
    
            var roadParameter = road != null ?
                new ObjectParameter("Road", road) :
                new ObjectParameter("Road", typeof(string));
    
            var subDistrict_IDParameter = subDistrict_ID != null ?
                new ObjectParameter("SubDistrict_ID", subDistrict_ID) :
                new ObjectParameter("SubDistrict_ID", typeof(string));
    
            var updateBy_IDParameter = updateBy_ID.HasValue ?
                new ObjectParameter("UpdateBy_ID", updateBy_ID) :
                new ObjectParameter("UpdateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Address_Update_Result>("usp_Address_Update", address_IDParameter, buildingNameParameter, villageNameParameter, noParameter, mooParameter, floorParameter, roomParameter, soiParameter, roadParameter, subDistrict_IDParameter, updateBy_IDParameter);
        }
    
        public virtual int usp_AddressHistory_Insert(Nullable<int> address_ID, Nullable<int> personTransaction_ID)
        {
            var address_IDParameter = address_ID.HasValue ?
                new ObjectParameter("Address_ID", address_ID) :
                new ObjectParameter("Address_ID", typeof(int));
    
            var personTransaction_IDParameter = personTransaction_ID.HasValue ?
                new ObjectParameter("PersonTransaction_ID", personTransaction_ID) :
                new ObjectParameter("PersonTransaction_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddressHistory_Insert", address_IDParameter, personTransaction_IDParameter);
        }
    
        public virtual int usp_Application_Corporate_Insert(Nullable<int> title_ID, string firstName, string personCardDetail_TaxIdentityNumber, string contactDetail_Tel, string contactDetail_Mobile, Nullable<int> createBy_ID, ObjectParameter resultPerson_ID)
        {
            var title_IDParameter = title_ID.HasValue ?
                new ObjectParameter("Title_ID", title_ID) :
                new ObjectParameter("Title_ID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var personCardDetail_TaxIdentityNumberParameter = personCardDetail_TaxIdentityNumber != null ?
                new ObjectParameter("PersonCardDetail_TaxIdentityNumber", personCardDetail_TaxIdentityNumber) :
                new ObjectParameter("PersonCardDetail_TaxIdentityNumber", typeof(string));
    
            var contactDetail_TelParameter = contactDetail_Tel != null ?
                new ObjectParameter("ContactDetail_Tel", contactDetail_Tel) :
                new ObjectParameter("ContactDetail_Tel", typeof(string));
    
            var contactDetail_MobileParameter = contactDetail_Mobile != null ?
                new ObjectParameter("ContactDetail_Mobile", contactDetail_Mobile) :
                new ObjectParameter("ContactDetail_Mobile", typeof(string));
    
            var createBy_IDParameter = createBy_ID.HasValue ?
                new ObjectParameter("CreateBy_ID", createBy_ID) :
                new ObjectParameter("CreateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Application_Corporate_Insert", title_IDParameter, firstNameParameter, personCardDetail_TaxIdentityNumberParameter, contactDetail_TelParameter, contactDetail_MobileParameter, createBy_IDParameter, resultPerson_ID);
        }
    
        public virtual int usp_Application_Corporate_Update(Nullable<int> person_ID, Nullable<int> title_ID, string firstName, string personCardDetail_TaxIdentityNumber, string contactDetail_Tel, string contactDetail_Mobile, Nullable<int> updateBy_ID)
        {
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var title_IDParameter = title_ID.HasValue ?
                new ObjectParameter("Title_ID", title_ID) :
                new ObjectParameter("Title_ID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var personCardDetail_TaxIdentityNumberParameter = personCardDetail_TaxIdentityNumber != null ?
                new ObjectParameter("PersonCardDetail_TaxIdentityNumber", personCardDetail_TaxIdentityNumber) :
                new ObjectParameter("PersonCardDetail_TaxIdentityNumber", typeof(string));
    
            var contactDetail_TelParameter = contactDetail_Tel != null ?
                new ObjectParameter("ContactDetail_Tel", contactDetail_Tel) :
                new ObjectParameter("ContactDetail_Tel", typeof(string));
    
            var contactDetail_MobileParameter = contactDetail_Mobile != null ?
                new ObjectParameter("ContactDetail_Mobile", contactDetail_Mobile) :
                new ObjectParameter("ContactDetail_Mobile", typeof(string));
    
            var updateBy_IDParameter = updateBy_ID.HasValue ?
                new ObjectParameter("UpdateBy_ID", updateBy_ID) :
                new ObjectParameter("UpdateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Application_Corporate_Update", person_IDParameter, title_IDParameter, firstNameParameter, personCardDetail_TaxIdentityNumberParameter, contactDetail_TelParameter, contactDetail_MobileParameter, updateBy_IDParameter);
        }
    
        public virtual int usp_Application_Person_Insert(Nullable<int> personType_ID, Nullable<int> title_ID, string firstName, string lastName, string nickName, Nullable<System.DateTime> birthDate, Nullable<double> weight, Nullable<double> height, Nullable<int> sex_ID, Nullable<int> maritalStatus_ID, Nullable<int> occupationLevel_ID, string personCardDetail_identityCard, string personCardDetail_Passport, string personCardDetail_TaxIdentityNumber, string contactDetail_Tel, string contactDetail_Mobile, Nullable<int> createBy_ID, ObjectParameter resultPerson_ID)
        {
            var personType_IDParameter = personType_ID.HasValue ?
                new ObjectParameter("PersonType_ID", personType_ID) :
                new ObjectParameter("PersonType_ID", typeof(int));
    
            var title_IDParameter = title_ID.HasValue ?
                new ObjectParameter("Title_ID", title_ID) :
                new ObjectParameter("Title_ID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var nickNameParameter = nickName != null ?
                new ObjectParameter("NickName", nickName) :
                new ObjectParameter("NickName", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(double));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(double));
    
            var sex_IDParameter = sex_ID.HasValue ?
                new ObjectParameter("Sex_ID", sex_ID) :
                new ObjectParameter("Sex_ID", typeof(int));
    
            var maritalStatus_IDParameter = maritalStatus_ID.HasValue ?
                new ObjectParameter("MaritalStatus_ID", maritalStatus_ID) :
                new ObjectParameter("MaritalStatus_ID", typeof(int));
    
            var occupationLevel_IDParameter = occupationLevel_ID.HasValue ?
                new ObjectParameter("OccupationLevel_ID", occupationLevel_ID) :
                new ObjectParameter("OccupationLevel_ID", typeof(int));
    
            var personCardDetail_identityCardParameter = personCardDetail_identityCard != null ?
                new ObjectParameter("PersonCardDetail_identityCard", personCardDetail_identityCard) :
                new ObjectParameter("PersonCardDetail_identityCard", typeof(string));
    
            var personCardDetail_PassportParameter = personCardDetail_Passport != null ?
                new ObjectParameter("PersonCardDetail_Passport", personCardDetail_Passport) :
                new ObjectParameter("PersonCardDetail_Passport", typeof(string));
    
            var personCardDetail_TaxIdentityNumberParameter = personCardDetail_TaxIdentityNumber != null ?
                new ObjectParameter("PersonCardDetail_TaxIdentityNumber", personCardDetail_TaxIdentityNumber) :
                new ObjectParameter("PersonCardDetail_TaxIdentityNumber", typeof(string));
    
            var contactDetail_TelParameter = contactDetail_Tel != null ?
                new ObjectParameter("ContactDetail_Tel", contactDetail_Tel) :
                new ObjectParameter("ContactDetail_Tel", typeof(string));
    
            var contactDetail_MobileParameter = contactDetail_Mobile != null ?
                new ObjectParameter("ContactDetail_Mobile", contactDetail_Mobile) :
                new ObjectParameter("ContactDetail_Mobile", typeof(string));
    
            var createBy_IDParameter = createBy_ID.HasValue ?
                new ObjectParameter("CreateBy_ID", createBy_ID) :
                new ObjectParameter("CreateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Application_Person_Insert", personType_IDParameter, title_IDParameter, firstNameParameter, lastNameParameter, nickNameParameter, birthDateParameter, weightParameter, heightParameter, sex_IDParameter, maritalStatus_IDParameter, occupationLevel_IDParameter, personCardDetail_identityCardParameter, personCardDetail_PassportParameter, personCardDetail_TaxIdentityNumberParameter, contactDetail_TelParameter, contactDetail_MobileParameter, createBy_IDParameter, resultPerson_ID);
        }
    
        public virtual int usp_Application_Person_Update(Nullable<int> person_ID, Nullable<int> personType_ID, Nullable<int> title_ID, string firstName, string lastName, string nickName, Nullable<System.DateTime> birthDate, Nullable<double> weight, Nullable<double> height, Nullable<int> sex_ID, Nullable<int> maritalStatus_ID, Nullable<int> occupationLevel_ID, string personCardDetail_identityCard, string personCardDetail_Passport, string personCardDetail_TaxIdentityNumber, string contactDetail_Tel, string contactDetail_Mobile, Nullable<int> updateBy_ID)
        {
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var personType_IDParameter = personType_ID.HasValue ?
                new ObjectParameter("PersonType_ID", personType_ID) :
                new ObjectParameter("PersonType_ID", typeof(int));
    
            var title_IDParameter = title_ID.HasValue ?
                new ObjectParameter("Title_ID", title_ID) :
                new ObjectParameter("Title_ID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var nickNameParameter = nickName != null ?
                new ObjectParameter("NickName", nickName) :
                new ObjectParameter("NickName", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(double));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(double));
    
            var sex_IDParameter = sex_ID.HasValue ?
                new ObjectParameter("Sex_ID", sex_ID) :
                new ObjectParameter("Sex_ID", typeof(int));
    
            var maritalStatus_IDParameter = maritalStatus_ID.HasValue ?
                new ObjectParameter("MaritalStatus_ID", maritalStatus_ID) :
                new ObjectParameter("MaritalStatus_ID", typeof(int));
    
            var occupationLevel_IDParameter = occupationLevel_ID.HasValue ?
                new ObjectParameter("OccupationLevel_ID", occupationLevel_ID) :
                new ObjectParameter("OccupationLevel_ID", typeof(int));
    
            var personCardDetail_identityCardParameter = personCardDetail_identityCard != null ?
                new ObjectParameter("PersonCardDetail_identityCard", personCardDetail_identityCard) :
                new ObjectParameter("PersonCardDetail_identityCard", typeof(string));
    
            var personCardDetail_PassportParameter = personCardDetail_Passport != null ?
                new ObjectParameter("PersonCardDetail_Passport", personCardDetail_Passport) :
                new ObjectParameter("PersonCardDetail_Passport", typeof(string));
    
            var personCardDetail_TaxIdentityNumberParameter = personCardDetail_TaxIdentityNumber != null ?
                new ObjectParameter("PersonCardDetail_TaxIdentityNumber", personCardDetail_TaxIdentityNumber) :
                new ObjectParameter("PersonCardDetail_TaxIdentityNumber", typeof(string));
    
            var contactDetail_TelParameter = contactDetail_Tel != null ?
                new ObjectParameter("ContactDetail_Tel", contactDetail_Tel) :
                new ObjectParameter("ContactDetail_Tel", typeof(string));
    
            var contactDetail_MobileParameter = contactDetail_Mobile != null ?
                new ObjectParameter("ContactDetail_Mobile", contactDetail_Mobile) :
                new ObjectParameter("ContactDetail_Mobile", typeof(string));
    
            var updateBy_IDParameter = updateBy_ID.HasValue ?
                new ObjectParameter("UpdateBy_ID", updateBy_ID) :
                new ObjectParameter("UpdateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Application_Person_Update", person_IDParameter, personType_IDParameter, title_IDParameter, firstNameParameter, lastNameParameter, nickNameParameter, birthDateParameter, weightParameter, heightParameter, sex_IDParameter, maritalStatus_IDParameter, occupationLevel_IDParameter, personCardDetail_identityCardParameter, personCardDetail_PassportParameter, personCardDetail_TaxIdentityNumberParameter, contactDetail_TelParameter, contactDetail_MobileParameter, updateBy_IDParameter);
        }
    
        public virtual ObjectResult<usp_Contact_Insert_Result> usp_Contact_Insert(string contactDetail, Nullable<int> contactType_ID, Nullable<int> person_ID, Nullable<int> createBy_ID)
        {
            var contactDetailParameter = contactDetail != null ?
                new ObjectParameter("ContactDetail", contactDetail) :
                new ObjectParameter("ContactDetail", typeof(string));
    
            var contactType_IDParameter = contactType_ID.HasValue ?
                new ObjectParameter("ContactType_ID", contactType_ID) :
                new ObjectParameter("ContactType_ID", typeof(int));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var createBy_IDParameter = createBy_ID.HasValue ?
                new ObjectParameter("CreateBy_ID", createBy_ID) :
                new ObjectParameter("CreateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Contact_Insert_Result>("usp_Contact_Insert", contactDetailParameter, contactType_IDParameter, person_IDParameter, createBy_IDParameter);
        }
    
        public virtual ObjectResult<usp_Contact_Update_Result> usp_Contact_Update(Nullable<int> contact_ID, string contactDetail, Nullable<int> contactType_ID, Nullable<int> person_ID, Nullable<int> updateBy_ID)
        {
            var contact_IDParameter = contact_ID.HasValue ?
                new ObjectParameter("Contact_ID", contact_ID) :
                new ObjectParameter("Contact_ID", typeof(int));
    
            var contactDetailParameter = contactDetail != null ?
                new ObjectParameter("ContactDetail", contactDetail) :
                new ObjectParameter("ContactDetail", typeof(string));
    
            var contactType_IDParameter = contactType_ID.HasValue ?
                new ObjectParameter("ContactType_ID", contactType_ID) :
                new ObjectParameter("ContactType_ID", typeof(int));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var updateBy_IDParameter = updateBy_ID.HasValue ?
                new ObjectParameter("UpdateBy_ID", updateBy_ID) :
                new ObjectParameter("UpdateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Contact_Update_Result>("usp_Contact_Update", contact_IDParameter, contactDetailParameter, contactType_IDParameter, person_IDParameter, updateBy_IDParameter);
        }
    
        public virtual ObjectResult<usp_Employee_ByBranch_Select_Result> usp_Employee_ByBranch_Select(Nullable<int> branch_ID)
        {
            var branch_IDParameter = branch_ID.HasValue ?
                new ObjectParameter("Branch_ID", branch_ID) :
                new ObjectParameter("Branch_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Employee_ByBranch_Select_Result>("usp_Employee_ByBranch_Select", branch_IDParameter);
        }
    
        public virtual ObjectResult<usp_Employee_Select1_Result> usp_Employee_Select1(Nullable<int> employee_ID)
        {
            var employee_IDParameter = employee_ID.HasValue ?
                new ObjectParameter("Employee_ID", employee_ID) :
                new ObjectParameter("Employee_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Employee_Select1_Result>("usp_Employee_Select1", employee_IDParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeByEmployeeCode_Select_Result> usp_EmployeeByEmployeeCode_Select(string employeeCode)
        {
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeByEmployeeCode_Select_Result>("usp_EmployeeByEmployeeCode_Select", employeeCodeParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeSearch_Select_Result> usp_EmployeeSearch_Select(string criteria)
        {
            var criteriaParameter = criteria != null ?
                new ObjectParameter("Criteria", criteria) :
                new ObjectParameter("Criteria", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeSearch_Select_Result>("usp_EmployeeSearch_Select", criteriaParameter);
        }
    
        public virtual ObjectResult<usp_ForImport_00_Person_Result> usp_ForImport_00_Person(Nullable<int> personType_ID, Nullable<int> title_ID, string firstName, string lastName, string nickName, Nullable<System.DateTime> birthDate, Nullable<double> weight, Nullable<double> height, Nullable<int> sex_ID, Nullable<int> maritalStatus_ID, Nullable<int> occupationLevel_ID, string personCardDetail_identityCard, string personCardDetail_Passport, string personCardDetail_TaxIdentityNumber, string contactDetail_Tel, string contactDetail_Mobile, string buildingName, string villageName, string no, string moo, string floor, string room, string soi, string road, string subDistrict_ID, Nullable<int> createBy_ID, ObjectParameter resultPerson_ID, Nullable<int> bank_ID, string personBankAccountNo, ObjectParameter resultPersonBankAccount_ID)
        {
            var personType_IDParameter = personType_ID.HasValue ?
                new ObjectParameter("PersonType_ID", personType_ID) :
                new ObjectParameter("PersonType_ID", typeof(int));
    
            var title_IDParameter = title_ID.HasValue ?
                new ObjectParameter("Title_ID", title_ID) :
                new ObjectParameter("Title_ID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var nickNameParameter = nickName != null ?
                new ObjectParameter("NickName", nickName) :
                new ObjectParameter("NickName", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(double));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(double));
    
            var sex_IDParameter = sex_ID.HasValue ?
                new ObjectParameter("Sex_ID", sex_ID) :
                new ObjectParameter("Sex_ID", typeof(int));
    
            var maritalStatus_IDParameter = maritalStatus_ID.HasValue ?
                new ObjectParameter("MaritalStatus_ID", maritalStatus_ID) :
                new ObjectParameter("MaritalStatus_ID", typeof(int));
    
            var occupationLevel_IDParameter = occupationLevel_ID.HasValue ?
                new ObjectParameter("OccupationLevel_ID", occupationLevel_ID) :
                new ObjectParameter("OccupationLevel_ID", typeof(int));
    
            var personCardDetail_identityCardParameter = personCardDetail_identityCard != null ?
                new ObjectParameter("PersonCardDetail_identityCard", personCardDetail_identityCard) :
                new ObjectParameter("PersonCardDetail_identityCard", typeof(string));
    
            var personCardDetail_PassportParameter = personCardDetail_Passport != null ?
                new ObjectParameter("PersonCardDetail_Passport", personCardDetail_Passport) :
                new ObjectParameter("PersonCardDetail_Passport", typeof(string));
    
            var personCardDetail_TaxIdentityNumberParameter = personCardDetail_TaxIdentityNumber != null ?
                new ObjectParameter("PersonCardDetail_TaxIdentityNumber", personCardDetail_TaxIdentityNumber) :
                new ObjectParameter("PersonCardDetail_TaxIdentityNumber", typeof(string));
    
            var contactDetail_TelParameter = contactDetail_Tel != null ?
                new ObjectParameter("ContactDetail_Tel", contactDetail_Tel) :
                new ObjectParameter("ContactDetail_Tel", typeof(string));
    
            var contactDetail_MobileParameter = contactDetail_Mobile != null ?
                new ObjectParameter("ContactDetail_Mobile", contactDetail_Mobile) :
                new ObjectParameter("ContactDetail_Mobile", typeof(string));
    
            var buildingNameParameter = buildingName != null ?
                new ObjectParameter("BuildingName", buildingName) :
                new ObjectParameter("BuildingName", typeof(string));
    
            var villageNameParameter = villageName != null ?
                new ObjectParameter("VillageName", villageName) :
                new ObjectParameter("VillageName", typeof(string));
    
            var noParameter = no != null ?
                new ObjectParameter("No", no) :
                new ObjectParameter("No", typeof(string));
    
            var mooParameter = moo != null ?
                new ObjectParameter("Moo", moo) :
                new ObjectParameter("Moo", typeof(string));
    
            var floorParameter = floor != null ?
                new ObjectParameter("Floor", floor) :
                new ObjectParameter("Floor", typeof(string));
    
            var roomParameter = room != null ?
                new ObjectParameter("Room", room) :
                new ObjectParameter("Room", typeof(string));
    
            var soiParameter = soi != null ?
                new ObjectParameter("Soi", soi) :
                new ObjectParameter("Soi", typeof(string));
    
            var roadParameter = road != null ?
                new ObjectParameter("Road", road) :
                new ObjectParameter("Road", typeof(string));
    
            var subDistrict_IDParameter = subDistrict_ID != null ?
                new ObjectParameter("SubDistrict_ID", subDistrict_ID) :
                new ObjectParameter("SubDistrict_ID", typeof(string));
    
            var createBy_IDParameter = createBy_ID.HasValue ?
                new ObjectParameter("CreateBy_ID", createBy_ID) :
                new ObjectParameter("CreateBy_ID", typeof(int));
    
            var bank_IDParameter = bank_ID.HasValue ?
                new ObjectParameter("Bank_ID", bank_ID) :
                new ObjectParameter("Bank_ID", typeof(int));
    
            var personBankAccountNoParameter = personBankAccountNo != null ?
                new ObjectParameter("PersonBankAccountNo", personBankAccountNo) :
                new ObjectParameter("PersonBankAccountNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ForImport_00_Person_Result>("usp_ForImport_00_Person", personType_IDParameter, title_IDParameter, firstNameParameter, lastNameParameter, nickNameParameter, birthDateParameter, weightParameter, heightParameter, sex_IDParameter, maritalStatus_IDParameter, occupationLevel_IDParameter, personCardDetail_identityCardParameter, personCardDetail_PassportParameter, personCardDetail_TaxIdentityNumberParameter, contactDetail_TelParameter, contactDetail_MobileParameter, buildingNameParameter, villageNameParameter, noParameter, mooParameter, floorParameter, roomParameter, soiParameter, roadParameter, subDistrict_IDParameter, createBy_IDParameter, resultPerson_ID, bank_IDParameter, personBankAccountNoParameter, resultPersonBankAccount_ID);
        }
    
        public virtual ObjectResult<usp_ForImport_01_Employee_Result> usp_ForImport_01_Employee(string employeeCode, ObjectParameter person_ID, ObjectParameter employee_ID)
        {
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ForImport_01_Employee_Result>("usp_ForImport_01_Employee", employeeCodeParameter, person_ID, employee_ID);
        }
    
        public virtual ObjectResult<usp_ForImport_02_PersonImport_Result> usp_ForImport_02_PersonImport(Nullable<int> running, ObjectParameter person_ID, ObjectParameter personAccount_ID)
        {
            var runningParameter = running.HasValue ?
                new ObjectParameter("running", running) :
                new ObjectParameter("running", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ForImport_02_PersonImport_Result>("usp_ForImport_02_PersonImport", runningParameter, person_ID, personAccount_ID);
        }
    
        public virtual int usp_ForImport_03_PersonBankAccount(Nullable<int> person_ID, Nullable<int> bank_id, string personBankAccountName, string personBankAccountNo, ObjectParameter returnPersonBankAccount_ID)
        {
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var bank_idParameter = bank_id.HasValue ?
                new ObjectParameter("Bank_id", bank_id) :
                new ObjectParameter("Bank_id", typeof(int));
    
            var personBankAccountNameParameter = personBankAccountName != null ?
                new ObjectParameter("PersonBankAccountName", personBankAccountName) :
                new ObjectParameter("PersonBankAccountName", typeof(string));
    
            var personBankAccountNoParameter = personBankAccountNo != null ?
                new ObjectParameter("PersonBankAccountNo", personBankAccountNo) :
                new ObjectParameter("PersonBankAccountNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ForImport_03_PersonBankAccount", person_IDParameter, bank_idParameter, personBankAccountNameParameter, personBankAccountNoParameter, returnPersonBankAccount_ID);
        }
    
        public virtual int usp_ForImport_10_OrganizeBankAccount(Nullable<int> organize_ID, Nullable<int> bank_id, string organizeBankAccountName, string organizeBankAccountNO, ObjectParameter returnOrganizeBankAccount_ID)
        {
            var organize_IDParameter = organize_ID.HasValue ?
                new ObjectParameter("Organize_ID", organize_ID) :
                new ObjectParameter("Organize_ID", typeof(int));
    
            var bank_idParameter = bank_id.HasValue ?
                new ObjectParameter("Bank_id", bank_id) :
                new ObjectParameter("Bank_id", typeof(int));
    
            var organizeBankAccountNameParameter = organizeBankAccountName != null ?
                new ObjectParameter("OrganizeBankAccountName", organizeBankAccountName) :
                new ObjectParameter("OrganizeBankAccountName", typeof(string));
    
            var organizeBankAccountNOParameter = organizeBankAccountNO != null ?
                new ObjectParameter("OrganizeBankAccountNO", organizeBankAccountNO) :
                new ObjectParameter("OrganizeBankAccountNO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ForImport_10_OrganizeBankAccount", organize_IDParameter, bank_idParameter, organizeBankAccountNameParameter, organizeBankAccountNOParameter, returnOrganizeBankAccount_ID);
        }
    
        public virtual int usp_ForImport_13_Organize(Nullable<int> insertRow, string companyGroup_ID)
        {
            var insertRowParameter = insertRow.HasValue ?
                new ObjectParameter("InsertRow", insertRow) :
                new ObjectParameter("InsertRow", typeof(int));
    
            var companyGroup_IDParameter = companyGroup_ID != null ?
                new ObjectParameter("CompanyGroup_ID", companyGroup_ID) :
                new ObjectParameter("CompanyGroup_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ForImport_13_Organize", insertRowParameter, companyGroup_IDParameter);
        }
    
        public virtual int usp_ForImport_21_ImportOrganize(Nullable<int> insertRow, string companyGroup_ID)
        {
            var insertRowParameter = insertRow.HasValue ?
                new ObjectParameter("InsertRow", insertRow) :
                new ObjectParameter("InsertRow", typeof(int));
    
            var companyGroup_IDParameter = companyGroup_ID != null ?
                new ObjectParameter("CompanyGroup_ID", companyGroup_ID) :
                new ObjectParameter("CompanyGroup_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ForImport_21_ImportOrganize", insertRowParameter, companyGroup_IDParameter);
        }
    
        public virtual ObjectResult<usp_ForImport_22_ImportEmployee_Result> usp_ForImport_22_ImportEmployee(Nullable<int> insertRow)
        {
            var insertRowParameter = insertRow.HasValue ?
                new ObjectParameter("InsertRow", insertRow) :
                new ObjectParameter("InsertRow", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ForImport_22_ImportEmployee_Result>("usp_ForImport_22_ImportEmployee", insertRowParameter);
        }
    
        public virtual ObjectResult<usp_ForImport_23_ImportPerson_Result> usp_ForImport_23_ImportPerson(Nullable<int> insertRow)
        {
            var insertRowParameter = insertRow.HasValue ?
                new ObjectParameter("InsertRow", insertRow) :
                new ObjectParameter("InsertRow", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ForImport_23_ImportPerson_Result>("usp_ForImport_23_ImportPerson", insertRowParameter);
        }
    
        public virtual ObjectResult<usp_MaritalStatus_Select_Result> usp_MaritalStatus_Select(Nullable<int> maritalStatus_ID)
        {
            var maritalStatus_IDParameter = maritalStatus_ID.HasValue ?
                new ObjectParameter("MaritalStatus_ID", maritalStatus_ID) :
                new ObjectParameter("MaritalStatus_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MaritalStatus_Select_Result>("usp_MaritalStatus_Select", maritalStatus_IDParameter);
        }
    
        public virtual ObjectResult<usp_Occupation_Select_Result> usp_Occupation_Select(Nullable<int> occupation_ID)
        {
            var occupation_IDParameter = occupation_ID.HasValue ?
                new ObjectParameter("Occupation_ID", occupation_ID) :
                new ObjectParameter("Occupation_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Occupation_Select_Result>("usp_Occupation_Select", occupation_IDParameter);
        }
    
        public virtual ObjectResult<usp_OccupationLevel_ByOccupationID_Select_Result> usp_OccupationLevel_ByOccupationID_Select(Nullable<int> occupation_ID)
        {
            var occupation_IDParameter = occupation_ID.HasValue ?
                new ObjectParameter("Occupation_ID", occupation_ID) :
                new ObjectParameter("Occupation_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OccupationLevel_ByOccupationID_Select_Result>("usp_OccupationLevel_ByOccupationID_Select", occupation_IDParameter);
        }
    
        public virtual ObjectResult<usp_OccupationLevel_Select_Result> usp_OccupationLevel_Select(Nullable<int> occupationLevel_ID)
        {
            var occupationLevel_IDParameter = occupationLevel_ID.HasValue ?
                new ObjectParameter("OccupationLevel_ID", occupationLevel_ID) :
                new ObjectParameter("OccupationLevel_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OccupationLevel_Select_Result>("usp_OccupationLevel_Select", occupationLevel_IDParameter);
        }
    
        public virtual ObjectResult<usp_OrganizePerson_Insert_Result> usp_OrganizePerson_Insert(Nullable<int> title_ID, string firstName, string lastName, string nickName, Nullable<System.DateTime> birthDate, Nullable<double> weight, Nullable<double> height, Nullable<int> sex_ID, Nullable<int> maritalStatus_ID, Nullable<int> occupationLevel_ID, string personCardDetail_identityCard, string personCardDetail_Passport, string personCardDetail_TaxIdentityNumber, string contactDetail_Tel, string contactDetail_Mobile, string buildingName, string villageName, string no, string moo, string floor, string room, string soi, string road, string subDistrict_ID, string zipCode, Nullable<int> organizeId, Nullable<int> createdByUserId, ObjectParameter resultPerson_ID)
        {
            var title_IDParameter = title_ID.HasValue ?
                new ObjectParameter("Title_ID", title_ID) :
                new ObjectParameter("Title_ID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var nickNameParameter = nickName != null ?
                new ObjectParameter("NickName", nickName) :
                new ObjectParameter("NickName", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(double));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(double));
    
            var sex_IDParameter = sex_ID.HasValue ?
                new ObjectParameter("Sex_ID", sex_ID) :
                new ObjectParameter("Sex_ID", typeof(int));
    
            var maritalStatus_IDParameter = maritalStatus_ID.HasValue ?
                new ObjectParameter("MaritalStatus_ID", maritalStatus_ID) :
                new ObjectParameter("MaritalStatus_ID", typeof(int));
    
            var occupationLevel_IDParameter = occupationLevel_ID.HasValue ?
                new ObjectParameter("OccupationLevel_ID", occupationLevel_ID) :
                new ObjectParameter("OccupationLevel_ID", typeof(int));
    
            var personCardDetail_identityCardParameter = personCardDetail_identityCard != null ?
                new ObjectParameter("PersonCardDetail_identityCard", personCardDetail_identityCard) :
                new ObjectParameter("PersonCardDetail_identityCard", typeof(string));
    
            var personCardDetail_PassportParameter = personCardDetail_Passport != null ?
                new ObjectParameter("PersonCardDetail_Passport", personCardDetail_Passport) :
                new ObjectParameter("PersonCardDetail_Passport", typeof(string));
    
            var personCardDetail_TaxIdentityNumberParameter = personCardDetail_TaxIdentityNumber != null ?
                new ObjectParameter("PersonCardDetail_TaxIdentityNumber", personCardDetail_TaxIdentityNumber) :
                new ObjectParameter("PersonCardDetail_TaxIdentityNumber", typeof(string));
    
            var contactDetail_TelParameter = contactDetail_Tel != null ?
                new ObjectParameter("ContactDetail_Tel", contactDetail_Tel) :
                new ObjectParameter("ContactDetail_Tel", typeof(string));
    
            var contactDetail_MobileParameter = contactDetail_Mobile != null ?
                new ObjectParameter("ContactDetail_Mobile", contactDetail_Mobile) :
                new ObjectParameter("ContactDetail_Mobile", typeof(string));
    
            var buildingNameParameter = buildingName != null ?
                new ObjectParameter("BuildingName", buildingName) :
                new ObjectParameter("BuildingName", typeof(string));
    
            var villageNameParameter = villageName != null ?
                new ObjectParameter("VillageName", villageName) :
                new ObjectParameter("VillageName", typeof(string));
    
            var noParameter = no != null ?
                new ObjectParameter("No", no) :
                new ObjectParameter("No", typeof(string));
    
            var mooParameter = moo != null ?
                new ObjectParameter("Moo", moo) :
                new ObjectParameter("Moo", typeof(string));
    
            var floorParameter = floor != null ?
                new ObjectParameter("Floor", floor) :
                new ObjectParameter("Floor", typeof(string));
    
            var roomParameter = room != null ?
                new ObjectParameter("Room", room) :
                new ObjectParameter("Room", typeof(string));
    
            var soiParameter = soi != null ?
                new ObjectParameter("Soi", soi) :
                new ObjectParameter("Soi", typeof(string));
    
            var roadParameter = road != null ?
                new ObjectParameter("Road", road) :
                new ObjectParameter("Road", typeof(string));
    
            var subDistrict_IDParameter = subDistrict_ID != null ?
                new ObjectParameter("SubDistrict_ID", subDistrict_ID) :
                new ObjectParameter("SubDistrict_ID", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrganizePerson_Insert_Result>("usp_OrganizePerson_Insert", title_IDParameter, firstNameParameter, lastNameParameter, nickNameParameter, birthDateParameter, weightParameter, heightParameter, sex_IDParameter, maritalStatus_IDParameter, occupationLevel_IDParameter, personCardDetail_identityCardParameter, personCardDetail_PassportParameter, personCardDetail_TaxIdentityNumberParameter, contactDetail_TelParameter, contactDetail_MobileParameter, buildingNameParameter, villageNameParameter, noParameter, mooParameter, floorParameter, roomParameter, soiParameter, roadParameter, subDistrict_IDParameter, zipCodeParameter, organizeIdParameter, createdByUserIdParameter, resultPerson_ID);
        }
    
        public virtual ObjectResult<usp_Person_Insert_Result> usp_Person_Insert(Nullable<int> personType_ID, Nullable<int> title_ID, string firstName, string lastName, string nickName, Nullable<System.DateTime> birthDate, Nullable<double> weight, Nullable<double> height, Nullable<int> sex_ID, Nullable<int> maritalStatus_ID, Nullable<int> occupationLevel_ID, Nullable<int> createBy_ID, ObjectParameter person_ID)
        {
            var personType_IDParameter = personType_ID.HasValue ?
                new ObjectParameter("PersonType_ID", personType_ID) :
                new ObjectParameter("PersonType_ID", typeof(int));
    
            var title_IDParameter = title_ID.HasValue ?
                new ObjectParameter("Title_ID", title_ID) :
                new ObjectParameter("Title_ID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var nickNameParameter = nickName != null ?
                new ObjectParameter("NickName", nickName) :
                new ObjectParameter("NickName", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(double));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(double));
    
            var sex_IDParameter = sex_ID.HasValue ?
                new ObjectParameter("Sex_ID", sex_ID) :
                new ObjectParameter("Sex_ID", typeof(int));
    
            var maritalStatus_IDParameter = maritalStatus_ID.HasValue ?
                new ObjectParameter("MaritalStatus_ID", maritalStatus_ID) :
                new ObjectParameter("MaritalStatus_ID", typeof(int));
    
            var occupationLevel_IDParameter = occupationLevel_ID.HasValue ?
                new ObjectParameter("OccupationLevel_ID", occupationLevel_ID) :
                new ObjectParameter("OccupationLevel_ID", typeof(int));
    
            var createBy_IDParameter = createBy_ID.HasValue ?
                new ObjectParameter("CreateBy_ID", createBy_ID) :
                new ObjectParameter("CreateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Person_Insert_Result>("usp_Person_Insert", personType_IDParameter, title_IDParameter, firstNameParameter, lastNameParameter, nickNameParameter, birthDateParameter, weightParameter, heightParameter, sex_IDParameter, maritalStatus_IDParameter, occupationLevel_IDParameter, createBy_IDParameter, person_ID);
        }
    
        public virtual ObjectResult<usp_Person_Select_Result> usp_Person_Select(Nullable<int> person_ID)
        {
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Person_Select_Result>("usp_Person_Select", person_IDParameter);
        }
    
        public virtual ObjectResult<usp_Person_Update_Result> usp_Person_Update(Nullable<int> person_ID, Nullable<int> personType_ID, Nullable<int> title_ID, string firstName, string lastName, string nickName, Nullable<System.DateTime> birthDate, Nullable<double> weight, Nullable<double> height, Nullable<int> sex_ID, Nullable<int> maritalStatus_ID, Nullable<int> occupationLevel_ID, Nullable<int> createBy_ID)
        {
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var personType_IDParameter = personType_ID.HasValue ?
                new ObjectParameter("PersonType_ID", personType_ID) :
                new ObjectParameter("PersonType_ID", typeof(int));
    
            var title_IDParameter = title_ID.HasValue ?
                new ObjectParameter("Title_ID", title_ID) :
                new ObjectParameter("Title_ID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var nickNameParameter = nickName != null ?
                new ObjectParameter("NickName", nickName) :
                new ObjectParameter("NickName", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(double));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(double));
    
            var sex_IDParameter = sex_ID.HasValue ?
                new ObjectParameter("Sex_ID", sex_ID) :
                new ObjectParameter("Sex_ID", typeof(int));
    
            var maritalStatus_IDParameter = maritalStatus_ID.HasValue ?
                new ObjectParameter("MaritalStatus_ID", maritalStatus_ID) :
                new ObjectParameter("MaritalStatus_ID", typeof(int));
    
            var occupationLevel_IDParameter = occupationLevel_ID.HasValue ?
                new ObjectParameter("OccupationLevel_ID", occupationLevel_ID) :
                new ObjectParameter("OccupationLevel_ID", typeof(int));
    
            var createBy_IDParameter = createBy_ID.HasValue ?
                new ObjectParameter("CreateBy_ID", createBy_ID) :
                new ObjectParameter("CreateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Person_Update_Result>("usp_Person_Update", person_IDParameter, personType_IDParameter, title_IDParameter, firstNameParameter, lastNameParameter, nickNameParameter, birthDateParameter, weightParameter, heightParameter, sex_IDParameter, maritalStatus_IDParameter, occupationLevel_IDParameter, createBy_IDParameter);
        }
    
        public virtual int usp_PersonAddress_Delete(Nullable<int> personAddress_ID, Nullable<int> deleteBy_ID)
        {
            var personAddress_IDParameter = personAddress_ID.HasValue ?
                new ObjectParameter("PersonAddress_ID", personAddress_ID) :
                new ObjectParameter("PersonAddress_ID", typeof(int));
    
            var deleteBy_IDParameter = deleteBy_ID.HasValue ?
                new ObjectParameter("DeleteBy_ID", deleteBy_ID) :
                new ObjectParameter("DeleteBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PersonAddress_Delete", personAddress_IDParameter, deleteBy_IDParameter);
        }
    
        public virtual ObjectResult<usp_PersonAddress_Insert_Result> usp_PersonAddress_Insert(Nullable<int> person_ID, Nullable<int> address_ID, Nullable<int> addressType_ID, Nullable<int> createBy_ID)
        {
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var address_IDParameter = address_ID.HasValue ?
                new ObjectParameter("Address_ID", address_ID) :
                new ObjectParameter("Address_ID", typeof(int));
    
            var addressType_IDParameter = addressType_ID.HasValue ?
                new ObjectParameter("AddressType_ID", addressType_ID) :
                new ObjectParameter("AddressType_ID", typeof(int));
    
            var createBy_IDParameter = createBy_ID.HasValue ?
                new ObjectParameter("CreateBy_ID", createBy_ID) :
                new ObjectParameter("CreateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonAddress_Insert_Result>("usp_PersonAddress_Insert", person_IDParameter, address_IDParameter, addressType_IDParameter, createBy_IDParameter);
        }
    
        public virtual ObjectResult<usp_PersonAddress_Select_Result> usp_PersonAddress_Select(Nullable<int> personAddress_ID)
        {
            var personAddress_IDParameter = personAddress_ID.HasValue ?
                new ObjectParameter("PersonAddress_ID", personAddress_ID) :
                new ObjectParameter("PersonAddress_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonAddress_Select_Result>("usp_PersonAddress_Select", personAddress_IDParameter);
        }
    
        public virtual ObjectResult<usp_PersonAddress_Update_Result> usp_PersonAddress_Update(Nullable<int> personAddress_ID, Nullable<int> person_ID, Nullable<int> address_ID, Nullable<int> addressType_ID, Nullable<int> updateBy_ID)
        {
            var personAddress_IDParameter = personAddress_ID.HasValue ?
                new ObjectParameter("PersonAddress_ID", personAddress_ID) :
                new ObjectParameter("PersonAddress_ID", typeof(int));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var address_IDParameter = address_ID.HasValue ?
                new ObjectParameter("Address_ID", address_ID) :
                new ObjectParameter("Address_ID", typeof(int));
    
            var addressType_IDParameter = addressType_ID.HasValue ?
                new ObjectParameter("AddressType_ID", addressType_ID) :
                new ObjectParameter("AddressType_ID", typeof(int));
    
            var updateBy_IDParameter = updateBy_ID.HasValue ?
                new ObjectParameter("UpdateBy_ID", updateBy_ID) :
                new ObjectParameter("UpdateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonAddress_Update_Result>("usp_PersonAddress_Update", personAddress_IDParameter, person_IDParameter, address_IDParameter, addressType_IDParameter, updateBy_IDParameter);
        }
    
        public virtual ObjectResult<usp_PersonAddressByPerson_Select_Result> usp_PersonAddressByPerson_Select(Nullable<int> person_ID, Nullable<int> addressType_ID)
        {
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var addressType_IDParameter = addressType_ID.HasValue ?
                new ObjectParameter("AddressType_ID", addressType_ID) :
                new ObjectParameter("AddressType_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonAddressByPerson_Select_Result>("usp_PersonAddressByPerson_Select", person_IDParameter, addressType_IDParameter);
        }
    
        public virtual int usp_PersonBankAccount_Delete(Nullable<int> personBankAccount_ID, Nullable<int> deleteBy_ID)
        {
            var personBankAccount_IDParameter = personBankAccount_ID.HasValue ?
                new ObjectParameter("PersonBankAccount_ID", personBankAccount_ID) :
                new ObjectParameter("PersonBankAccount_ID", typeof(int));
    
            var deleteBy_IDParameter = deleteBy_ID.HasValue ?
                new ObjectParameter("DeleteBy_ID", deleteBy_ID) :
                new ObjectParameter("DeleteBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PersonBankAccount_Delete", personBankAccount_IDParameter, deleteBy_IDParameter);
        }
    
        public virtual ObjectResult<usp_PersonBankAccount_Insert_Result> usp_PersonBankAccount_Insert(string personBankAccountName, string personBankAccountNo, Nullable<int> person_ID, Nullable<int> bank_ID, Nullable<int> createBy_ID)
        {
            var personBankAccountNameParameter = personBankAccountName != null ?
                new ObjectParameter("PersonBankAccountName", personBankAccountName) :
                new ObjectParameter("PersonBankAccountName", typeof(string));
    
            var personBankAccountNoParameter = personBankAccountNo != null ?
                new ObjectParameter("PersonBankAccountNo", personBankAccountNo) :
                new ObjectParameter("PersonBankAccountNo", typeof(string));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var bank_IDParameter = bank_ID.HasValue ?
                new ObjectParameter("Bank_ID", bank_ID) :
                new ObjectParameter("Bank_ID", typeof(int));
    
            var createBy_IDParameter = createBy_ID.HasValue ?
                new ObjectParameter("CreateBy_ID", createBy_ID) :
                new ObjectParameter("CreateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonBankAccount_Insert_Result>("usp_PersonBankAccount_Insert", personBankAccountNameParameter, personBankAccountNoParameter, person_IDParameter, bank_IDParameter, createBy_IDParameter);
        }
    
        public virtual ObjectResult<usp_PersonBankAccount_Select_Result> usp_PersonBankAccount_Select(Nullable<int> person_ID, Nullable<int> bank_ID, string personBankAccountNo, Nullable<bool> isActive, Nullable<int> personBankAccount_ID, Nullable<int> productGroup_ID)
        {
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var bank_IDParameter = bank_ID.HasValue ?
                new ObjectParameter("Bank_ID", bank_ID) :
                new ObjectParameter("Bank_ID", typeof(int));
    
            var personBankAccountNoParameter = personBankAccountNo != null ?
                new ObjectParameter("PersonBankAccountNo", personBankAccountNo) :
                new ObjectParameter("PersonBankAccountNo", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var personBankAccount_IDParameter = personBankAccount_ID.HasValue ?
                new ObjectParameter("PersonBankAccount_ID", personBankAccount_ID) :
                new ObjectParameter("PersonBankAccount_ID", typeof(int));
    
            var productGroup_IDParameter = productGroup_ID.HasValue ?
                new ObjectParameter("ProductGroup_ID", productGroup_ID) :
                new ObjectParameter("ProductGroup_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonBankAccount_Select_Result>("usp_PersonBankAccount_Select", person_IDParameter, bank_IDParameter, personBankAccountNoParameter, isActiveParameter, personBankAccount_IDParameter, productGroup_IDParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> usp_PersonBirthDateByPerson_select(Nullable<int> person_ID)
        {
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("usp_PersonBirthDateByPerson_select", person_IDParameter);
        }
    
        public virtual ObjectResult<usp_PersonCard_Insert_Result> usp_PersonCard_Insert(Nullable<int> personCardType_ID, string personCardDetail, Nullable<int> person_ID, Nullable<int> createBy_ID, ObjectParameter personCard_ID)
        {
            var personCardType_IDParameter = personCardType_ID.HasValue ?
                new ObjectParameter("PersonCardType_ID", personCardType_ID) :
                new ObjectParameter("PersonCardType_ID", typeof(int));
    
            var personCardDetailParameter = personCardDetail != null ?
                new ObjectParameter("PersonCardDetail", personCardDetail) :
                new ObjectParameter("PersonCardDetail", typeof(string));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var createBy_IDParameter = createBy_ID.HasValue ?
                new ObjectParameter("CreateBy_ID", createBy_ID) :
                new ObjectParameter("CreateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonCard_Insert_Result>("usp_PersonCard_Insert", personCardType_IDParameter, personCardDetailParameter, person_IDParameter, createBy_IDParameter, personCard_ID);
        }
    
        public virtual ObjectResult<usp_PersonCard_Update_Result> usp_PersonCard_Update(Nullable<int> personCard_ID, Nullable<int> personCardType_ID, string personCardDetail, Nullable<int> person_ID, Nullable<int> updateBy_ID)
        {
            var personCard_IDParameter = personCard_ID.HasValue ?
                new ObjectParameter("PersonCard_ID", personCard_ID) :
                new ObjectParameter("PersonCard_ID", typeof(int));
    
            var personCardType_IDParameter = personCardType_ID.HasValue ?
                new ObjectParameter("PersonCardType_ID", personCardType_ID) :
                new ObjectParameter("PersonCardType_ID", typeof(int));
    
            var personCardDetailParameter = personCardDetail != null ?
                new ObjectParameter("PersonCardDetail", personCardDetail) :
                new ObjectParameter("PersonCardDetail", typeof(string));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var updateBy_IDParameter = updateBy_ID.HasValue ?
                new ObjectParameter("UpdateBy_ID", updateBy_ID) :
                new ObjectParameter("UpdateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonCard_Update_Result>("usp_PersonCard_Update", personCard_IDParameter, personCardType_IDParameter, personCardDetailParameter, person_IDParameter, updateBy_IDParameter);
        }
    
        public virtual ObjectResult<usp_PersonCardByPerson_Select_Result> usp_PersonCardByPerson_Select(Nullable<int> person_ID)
        {
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonCardByPerson_Select_Result>("usp_PersonCardByPerson_Select", person_IDParameter);
        }
    
        public virtual int usp_PersonCardIsActive_Update(Nullable<int> personCard_ID)
        {
            var personCard_IDParameter = personCard_ID.HasValue ?
                new ObjectParameter("PersonCard_ID", personCard_ID) :
                new ObjectParameter("PersonCard_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PersonCardIsActive_Update", personCard_IDParameter);
        }
    
        public virtual ObjectResult<usp_PersonContactByPerson_Select_Result> usp_PersonContactByPerson_Select(Nullable<int> person_ID)
        {
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonContactByPerson_Select_Result>("usp_PersonContactByPerson_Select", person_IDParameter);
        }
    
        public virtual ObjectResult<usp_PersonFullDetail_Select_Result> usp_PersonFullDetail_Select(Nullable<int> person_ID)
        {
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonFullDetail_Select_Result>("usp_PersonFullDetail_Select", person_IDParameter);
        }
    
        public virtual int usp_PersonHistory_Insert(Nullable<int> person_ID, Nullable<int> personTransaction_ID)
        {
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var personTransaction_IDParameter = personTransaction_ID.HasValue ?
                new ObjectParameter("PersonTransaction_ID", personTransaction_ID) :
                new ObjectParameter("PersonTransaction_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PersonHistory_Insert", person_IDParameter, personTransaction_IDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_PersonIDSearchByCard_Select(string personCardDetail, Nullable<int> personCardType_ID)
        {
            var personCardDetailParameter = personCardDetail != null ?
                new ObjectParameter("PersonCardDetail", personCardDetail) :
                new ObjectParameter("PersonCardDetail", typeof(string));
    
            var personCardType_IDParameter = personCardType_ID.HasValue ?
                new ObjectParameter("PersonCardType_ID", personCardType_ID) :
                new ObjectParameter("PersonCardType_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_PersonIDSearchByCard_Select", personCardDetailParameter, personCardType_IDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_PersonIDSearchByCardV2_Select(string personCardDetail, Nullable<int> personCardType_ID)
        {
            var personCardDetailParameter = personCardDetail != null ?
                new ObjectParameter("PersonCardDetail", personCardDetail) :
                new ObjectParameter("PersonCardDetail", typeof(string));
    
            var personCardType_IDParameter = personCardType_ID.HasValue ?
                new ObjectParameter("PersonCardType_ID", personCardType_ID) :
                new ObjectParameter("PersonCardType_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_PersonIDSearchByCardV2_Select", personCardDetailParameter, personCardType_IDParameter);
        }
    
        public virtual ObjectResult<usp_PersonMotorApplication_ValidateForEdit_Select_Result> usp_PersonMotorApplication_ValidateForEdit_Select(Nullable<int> motorApplication_id, Nullable<int> person_id, Nullable<int> loginUserID)
        {
            var motorApplication_idParameter = motorApplication_id.HasValue ?
                new ObjectParameter("MotorApplication_id", motorApplication_id) :
                new ObjectParameter("MotorApplication_id", typeof(int));
    
            var person_idParameter = person_id.HasValue ?
                new ObjectParameter("Person_id", person_id) :
                new ObjectParameter("Person_id", typeof(int));
    
            var loginUserIDParameter = loginUserID.HasValue ?
                new ObjectParameter("LoginUserID", loginUserID) :
                new ObjectParameter("LoginUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonMotorApplication_ValidateForEdit_Select_Result>("usp_PersonMotorApplication_ValidateForEdit_Select", motorApplication_idParameter, person_idParameter, loginUserIDParameter);
        }
    
        public virtual ObjectResult<usp_PersonRelation_Insert_Result> usp_PersonRelation_Insert(Nullable<int> personRelationType_ID, Nullable<int> person_ID, Nullable<int> relationWithPerson_ID, Nullable<int> createBy_ID)
        {
            var personRelationType_IDParameter = personRelationType_ID.HasValue ?
                new ObjectParameter("PersonRelationType_ID", personRelationType_ID) :
                new ObjectParameter("PersonRelationType_ID", typeof(int));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var relationWithPerson_IDParameter = relationWithPerson_ID.HasValue ?
                new ObjectParameter("RelationWithPerson_ID", relationWithPerson_ID) :
                new ObjectParameter("RelationWithPerson_ID", typeof(int));
    
            var createBy_IDParameter = createBy_ID.HasValue ?
                new ObjectParameter("CreateBy_ID", createBy_ID) :
                new ObjectParameter("CreateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonRelation_Insert_Result>("usp_PersonRelation_Insert", personRelationType_IDParameter, person_IDParameter, relationWithPerson_IDParameter, createBy_IDParameter);
        }
    
        public virtual ObjectResult<usp_PersonRelation_Select_Result> usp_PersonRelation_Select(Nullable<int> person_ID, Nullable<int> relationWithPerson_ID)
        {
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var relationWithPerson_IDParameter = relationWithPerson_ID.HasValue ?
                new ObjectParameter("RelationWithPerson_ID", relationWithPerson_ID) :
                new ObjectParameter("RelationWithPerson_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonRelation_Select_Result>("usp_PersonRelation_Select", person_IDParameter, relationWithPerson_IDParameter);
        }
    
        public virtual ObjectResult<usp_PersonRelation_Update_Result> usp_PersonRelation_Update(Nullable<int> personRelation_ID, Nullable<int> personRelationType_ID, Nullable<int> person_ID, Nullable<int> relationWithPerson_ID, Nullable<int> updateBy_ID)
        {
            var personRelation_IDParameter = personRelation_ID.HasValue ?
                new ObjectParameter("PersonRelation_ID", personRelation_ID) :
                new ObjectParameter("PersonRelation_ID", typeof(int));
    
            var personRelationType_IDParameter = personRelationType_ID.HasValue ?
                new ObjectParameter("PersonRelationType_ID", personRelationType_ID) :
                new ObjectParameter("PersonRelationType_ID", typeof(int));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var relationWithPerson_IDParameter = relationWithPerson_ID.HasValue ?
                new ObjectParameter("RelationWithPerson_ID", relationWithPerson_ID) :
                new ObjectParameter("RelationWithPerson_ID", typeof(int));
    
            var updateBy_IDParameter = updateBy_ID.HasValue ?
                new ObjectParameter("UpdateBy_ID", updateBy_ID) :
                new ObjectParameter("UpdateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonRelation_Update_Result>("usp_PersonRelation_Update", personRelation_IDParameter, personRelationType_IDParameter, person_IDParameter, relationWithPerson_IDParameter, updateBy_IDParameter);
        }
    
        public virtual ObjectResult<usp_PersonRelationType_Select_Result> usp_PersonRelationType_Select(Nullable<int> personRelationType_ID)
        {
            var personRelationType_IDParameter = personRelationType_ID.HasValue ?
                new ObjectParameter("PersonRelationType_ID", personRelationType_ID) :
                new ObjectParameter("PersonRelationType_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonRelationType_Select_Result>("usp_PersonRelationType_Select", personRelationType_IDParameter);
        }
    
        public virtual ObjectResult<usp_PersonSearch_Select_Result> usp_PersonSearch_Select(string criteria)
        {
            var criteriaParameter = criteria != null ?
                new ObjectParameter("Criteria", criteria) :
                new ObjectParameter("Criteria", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonSearch_Select_Result>("usp_PersonSearch_Select", criteriaParameter);
        }
    
        public virtual ObjectResult<usp_PersonSearch_SelectV2_Result> usp_PersonSearch_SelectV2(Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonSearch_SelectV2_Result>("usp_PersonSearch_SelectV2", indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual ObjectResult<usp_PersonSearchByCard_Select_Result> usp_PersonSearchByCard_Select(string personCardDetail, Nullable<int> personCardType_ID, Nullable<int> personType_ID)
        {
            var personCardDetailParameter = personCardDetail != null ?
                new ObjectParameter("PersonCardDetail", personCardDetail) :
                new ObjectParameter("PersonCardDetail", typeof(string));
    
            var personCardType_IDParameter = personCardType_ID.HasValue ?
                new ObjectParameter("PersonCardType_ID", personCardType_ID) :
                new ObjectParameter("PersonCardType_ID", typeof(int));
    
            var personType_IDParameter = personType_ID.HasValue ?
                new ObjectParameter("PersonType_ID", personType_ID) :
                new ObjectParameter("PersonType_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonSearchByCard_Select_Result>("usp_PersonSearchByCard_Select", personCardDetailParameter, personCardType_IDParameter, personType_IDParameter);
        }
    
        public virtual int usp_PersonTransaction_Insert(Nullable<int> person_ID, Nullable<int> transactionType_ID, Nullable<int> createdBy_ID, string remark, ObjectParameter personTransaction_ID)
        {
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var transactionType_IDParameter = transactionType_ID.HasValue ?
                new ObjectParameter("TransactionType_ID", transactionType_ID) :
                new ObjectParameter("TransactionType_ID", typeof(int));
    
            var createdBy_IDParameter = createdBy_ID.HasValue ?
                new ObjectParameter("CreatedBy_ID", createdBy_ID) :
                new ObjectParameter("CreatedBy_ID", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PersonTransaction_Insert", person_IDParameter, transactionType_IDParameter, createdBy_IDParameter, remarkParameter, personTransaction_ID);
        }
    
        public virtual ObjectResult<usp_PersonTransaction_Select_Result> usp_PersonTransaction_Select(Nullable<int> person_ID)
        {
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonTransaction_Select_Result>("usp_PersonTransaction_Select", person_IDParameter);
        }
    
        public virtual int usp_PersonTransactionDetail_Insert(Nullable<int> personTransactionHeader_ID, Nullable<int> transactionSubType_ID, string from_ID, string from_Detail, string to_ID, string to_Detail)
        {
            var personTransactionHeader_IDParameter = personTransactionHeader_ID.HasValue ?
                new ObjectParameter("PersonTransactionHeader_ID", personTransactionHeader_ID) :
                new ObjectParameter("PersonTransactionHeader_ID", typeof(int));
    
            var transactionSubType_IDParameter = transactionSubType_ID.HasValue ?
                new ObjectParameter("TransactionSubType_ID", transactionSubType_ID) :
                new ObjectParameter("TransactionSubType_ID", typeof(int));
    
            var from_IDParameter = from_ID != null ?
                new ObjectParameter("From_ID", from_ID) :
                new ObjectParameter("From_ID", typeof(string));
    
            var from_DetailParameter = from_Detail != null ?
                new ObjectParameter("From_Detail", from_Detail) :
                new ObjectParameter("From_Detail", typeof(string));
    
            var to_IDParameter = to_ID != null ?
                new ObjectParameter("To_ID", to_ID) :
                new ObjectParameter("To_ID", typeof(string));
    
            var to_DetailParameter = to_Detail != null ?
                new ObjectParameter("To_Detail", to_Detail) :
                new ObjectParameter("To_Detail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PersonTransactionDetail_Insert", personTransactionHeader_IDParameter, transactionSubType_IDParameter, from_IDParameter, from_DetailParameter, to_IDParameter, to_DetailParameter);
        }
    
        public virtual ObjectResult<usp_PersonTransactionDetail_Select_Result> usp_PersonTransactionDetail_Select(Nullable<int> personTransactionHeader_ID)
        {
            var personTransactionHeader_IDParameter = personTransactionHeader_ID.HasValue ?
                new ObjectParameter("PersonTransactionHeader_ID", personTransactionHeader_ID) :
                new ObjectParameter("PersonTransactionHeader_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonTransactionDetail_Select_Result>("usp_PersonTransactionDetail_Select", personTransactionHeader_IDParameter);
        }
    
        public virtual ObjectResult<usp_PersonType_Select_Result> usp_PersonType_Select(Nullable<int> personType_ID)
        {
            var personType_IDParameter = personType_ID.HasValue ?
                new ObjectParameter("PersonType_ID", personType_ID) :
                new ObjectParameter("PersonType_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonType_Select_Result>("usp_PersonType_Select", personType_IDParameter);
        }
    
        public virtual int usp_PersonUser_Delete(Nullable<int> user_ID, Nullable<int> deleteBy_ID)
        {
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            var deleteBy_IDParameter = deleteBy_ID.HasValue ?
                new ObjectParameter("DeleteBy_ID", deleteBy_ID) :
                new ObjectParameter("DeleteBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PersonUser_Delete", user_IDParameter, deleteBy_IDParameter);
        }
    
        public virtual ObjectResult<usp_PersonUser_Insert_Result> usp_PersonUser_Insert(string user_ID, Nullable<int> person_ID, Nullable<int> employee_ID, Nullable<int> createBy_ID)
        {
            var user_IDParameter = user_ID != null ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(string));
    
            var person_IDParameter = person_ID.HasValue ?
                new ObjectParameter("Person_ID", person_ID) :
                new ObjectParameter("Person_ID", typeof(int));
    
            var employee_IDParameter = employee_ID.HasValue ?
                new ObjectParameter("Employee_ID", employee_ID) :
                new ObjectParameter("Employee_ID", typeof(int));
    
            var createBy_IDParameter = createBy_ID.HasValue ?
                new ObjectParameter("CreateBy_ID", createBy_ID) :
                new ObjectParameter("CreateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonUser_Insert_Result>("usp_PersonUser_Insert", user_IDParameter, person_IDParameter, employee_IDParameter, createBy_IDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_PersonUser_Select(Nullable<int> user_ID)
        {
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_PersonUser_Select", user_IDParameter);
        }
    
        public virtual ObjectResult<usp_Sex_Select_Result> usp_Sex_Select(Nullable<int> sex_ID)
        {
            var sex_IDParameter = sex_ID.HasValue ?
                new ObjectParameter("Sex_ID", sex_ID) :
                new ObjectParameter("Sex_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Sex_Select_Result>("usp_Sex_Select", sex_IDParameter);
        }
    
        public virtual ObjectResult<usp_Title_Select_Result> usp_Title_Select(Nullable<int> title_ID, Nullable<int> personType_ID)
        {
            var title_IDParameter = title_ID.HasValue ?
                new ObjectParameter("Title_ID", title_ID) :
                new ObjectParameter("Title_ID", typeof(int));
    
            var personType_IDParameter = personType_ID.HasValue ?
                new ObjectParameter("PersonType_ID", personType_ID) :
                new ObjectParameter("PersonType_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Title_Select_Result>("usp_Title_Select", title_IDParameter, personType_IDParameter);
        }
    
        public virtual int usp_AddToken(string tokenDetail, Nullable<System.DateTime> expireDate, string userName)
        {
            var tokenDetailParameter = tokenDetail != null ?
                new ObjectParameter("TokenDetail", tokenDetail) :
                new ObjectParameter("TokenDetail", typeof(string));
    
            var expireDateParameter = expireDate.HasValue ?
                new ObjectParameter("ExpireDate", expireDate) :
                new ObjectParameter("ExpireDate", typeof(System.DateTime));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddToken", tokenDetailParameter, expireDateParameter, userNameParameter);
        }
    
        public virtual ObjectResult<usp_AspNetRoles_Datatable_Result> usp_AspNetRoles_Datatable(Nullable<int> pageStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var pageStartParameter = pageStart.HasValue ?
                new ObjectParameter("PageStart", pageStart) :
                new ObjectParameter("PageStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AspNetRoles_Datatable_Result>("usp_AspNetRoles_Datatable", pageStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual ObjectResult<usp_AspNetUsers_Datatable_Result> usp_AspNetUsers_Datatable(Nullable<int> pageStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var pageStartParameter = pageStart.HasValue ?
                new ObjectParameter("PageStart", pageStart) :
                new ObjectParameter("PageStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AspNetUsers_Datatable_Result>("usp_AspNetUsers_Datatable", pageStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual int usp_DeleteToken(string tokenDetail)
        {
            var tokenDetailParameter = tokenDetail != null ?
                new ObjectParameter("TokenDetail", tokenDetail) :
                new ObjectParameter("TokenDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteToken", tokenDetailParameter);
        }
    
        public virtual int usp_DeleteToken_ByUserName(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteToken_ByUserName", userNameParameter);
        }
    
        public virtual ObjectResult<usp_GetUserDetailByUserName_Result> usp_GetUserDetailByUserName(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetUserDetailByUserName_Result>("usp_GetUserDetailByUserName", userNameParameter);
        }
    
        public virtual ObjectResult<usp_GetUserRoles_Result> usp_GetUserRoles(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetUserRoles_Result>("usp_GetUserRoles", usernameParameter);
        }
    
        public virtual ObjectResult<usp_GetUsers_ByRoleId_Result> usp_GetUsers_ByRoleId(string roleId)
        {
            var roleIdParameter = roleId != null ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetUsers_ByRoleId_Result>("usp_GetUsers_ByRoleId", roleIdParameter);
        }
    
        public virtual ObjectResult<usp_GetUsers_ByRoleId_Datatable_Result> usp_GetUsers_ByRoleId_Datatable(Nullable<int> pageStart, Nullable<int> pageSize, string sortField, string orderType, string search, string roleId)
        {
            var pageStartParameter = pageStart.HasValue ?
                new ObjectParameter("PageStart", pageStart) :
                new ObjectParameter("PageStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var roleIdParameter = roleId != null ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetUsers_ByRoleId_Datatable_Result>("usp_GetUsers_ByRoleId_Datatable", pageStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter, roleIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> usp_OTPCheck(string reference, string oTP)
        {
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var oTPParameter = oTP != null ?
                new ObjectParameter("OTP", oTP) :
                new ObjectParameter("OTP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("usp_OTPCheck", referenceParameter, oTPParameter);
        }
    
        public virtual ObjectResult<usp_OTPGenerate_Result> usp_OTPGenerate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OTPGenerate_Result>("usp_OTPGenerate");
        }
    
        public virtual ObjectResult<string> usp_ProgramAuthorize_Select(string projectName, string programName)
        {
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var programNameParameter = programName != null ?
                new ObjectParameter("ProgramName", programName) :
                new ObjectParameter("ProgramName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_ProgramAuthorize_Select", projectNameParameter, programNameParameter);
        }
    
        public virtual int usp_RolesClearByUserName(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RolesClearByUserName", usernameParameter);
        }
    
        public virtual ObjectResult<usp_RolesEditByUserName_Result> usp_RolesEditByUserName(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RolesEditByUserName_Result>("usp_RolesEditByUserName", usernameParameter);
        }
    
        public virtual int usp_UserRolesAdd(string userId, string roleId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var roleIdParameter = roleId != null ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UserRolesAdd", userIdParameter, roleIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_ValidateToken(string tokenDetail)
        {
            var tokenDetailParameter = tokenDetail != null ?
                new ObjectParameter("TokenDetail", tokenDetail) :
                new ObjectParameter("TokenDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_ValidateToken", tokenDetailParameter);
        }
    
        [DbFunction("DataCenterV1Entities", "func_SplitStringToTable")]
        public virtual IQueryable<func_SplitStringToTable_Result> func_SplitStringToTable(string stringToSplit, string delimiter)
        {
            var stringToSplitParameter = stringToSplit != null ?
                new ObjectParameter("StringToSplit", stringToSplit) :
                new ObjectParameter("StringToSplit", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_SplitStringToTable_Result>("[DataCenterV1Entities].[func_SplitStringToTable](@StringToSplit, @Delimiter)", stringToSplitParameter, delimiterParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<usp_AspNetRoles_Select_Result> usp_AspNetRoles_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AspNetRoles_Select_Result>("usp_AspNetRoles_Select");
        }
    
        public virtual int usp_AspNetUserRoles_Insert(string userId, string roleId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var roleIdParameter = roleId != null ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AspNetUserRoles_Insert", userIdParameter, roleIdParameter);
        }
    
        public virtual ObjectResult<usp_AspNetUsers_Select_Result> usp_AspNetUsers_Select(string id, string userName)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AspNetUsers_Select_Result>("usp_AspNetUsers_Select", idParameter, userNameParameter);
        }
    
        public virtual int usp_ErrorLog_Insert(Nullable<int> eRROR_NUMBER, Nullable<int> eRROR_SEVERITY, Nullable<int> eRROR_LINE, Nullable<int> eRROR_STATE, string eRROR_PROCEDURE, string eRROR_MESSAGE, ObjectParameter errorLog_ID)
        {
            var eRROR_NUMBERParameter = eRROR_NUMBER.HasValue ?
                new ObjectParameter("ERROR_NUMBER", eRROR_NUMBER) :
                new ObjectParameter("ERROR_NUMBER", typeof(int));
    
            var eRROR_SEVERITYParameter = eRROR_SEVERITY.HasValue ?
                new ObjectParameter("ERROR_SEVERITY", eRROR_SEVERITY) :
                new ObjectParameter("ERROR_SEVERITY", typeof(int));
    
            var eRROR_LINEParameter = eRROR_LINE.HasValue ?
                new ObjectParameter("ERROR_LINE", eRROR_LINE) :
                new ObjectParameter("ERROR_LINE", typeof(int));
    
            var eRROR_STATEParameter = eRROR_STATE.HasValue ?
                new ObjectParameter("ERROR_STATE", eRROR_STATE) :
                new ObjectParameter("ERROR_STATE", typeof(int));
    
            var eRROR_PROCEDUREParameter = eRROR_PROCEDURE != null ?
                new ObjectParameter("ERROR_PROCEDURE", eRROR_PROCEDURE) :
                new ObjectParameter("ERROR_PROCEDURE", typeof(string));
    
            var eRROR_MESSAGEParameter = eRROR_MESSAGE != null ?
                new ObjectParameter("ERROR_MESSAGE", eRROR_MESSAGE) :
                new ObjectParameter("ERROR_MESSAGE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ErrorLog_Insert", eRROR_NUMBERParameter, eRROR_SEVERITYParameter, eRROR_LINEParameter, eRROR_STATEParameter, eRROR_PROCEDUREParameter, eRROR_MESSAGEParameter, errorLog_ID);
        }
    
        public virtual int usp_GenerateCode(string transactionCodeControlTypeDetail, ObjectParameter result)
        {
            var transactionCodeControlTypeDetailParameter = transactionCodeControlTypeDetail != null ?
                new ObjectParameter("TransactionCodeControlTypeDetail", transactionCodeControlTypeDetail) :
                new ObjectParameter("TransactionCodeControlTypeDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GenerateCode", transactionCodeControlTypeDetailParameter, result);
        }
    
        public virtual ObjectResult<usp_GetMenuByRoles_Result> usp_GetMenuByRoles(string roles, string projectName)
        {
            var rolesParameter = roles != null ?
                new ObjectParameter("Roles", roles) :
                new ObjectParameter("Roles", typeof(string));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetMenuByRoles_Result>("usp_GetMenuByRoles", rolesParameter, projectNameParameter);
        }
    
        public virtual ObjectResult<usp_Menu_Datatable_Result> usp_Menu_Datatable(Nullable<int> pageStart, Nullable<int> pageSize, string sortField, string orderType, string search, string projectName)
        {
            var pageStartParameter = pageStart.HasValue ?
                new ObjectParameter("PageStart", pageStart) :
                new ObjectParameter("PageStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Menu_Datatable_Result>("usp_Menu_Datatable", pageStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter, projectNameParameter);
        }
    
        public virtual ObjectResult<usp_RoleTemplate_Select_Result> usp_RoleTemplate_Select(Nullable<int> roleTemplateId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var roleTemplateIdParameter = roleTemplateId.HasValue ?
                new ObjectParameter("RoleTemplateId", roleTemplateId) :
                new ObjectParameter("RoleTemplateId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RoleTemplate_Select_Result>("usp_RoleTemplate_Select", roleTemplateIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual ObjectResult<usp_RoleTemplateXAspNetRoles_Insert_Result> usp_RoleTemplateXAspNetRoles_Insert(string roleTemplate, string aspNetRolesIdList, Nullable<int> createdByUserId)
        {
            var roleTemplateParameter = roleTemplate != null ?
                new ObjectParameter("RoleTemplate", roleTemplate) :
                new ObjectParameter("RoleTemplate", typeof(string));
    
            var aspNetRolesIdListParameter = aspNetRolesIdList != null ?
                new ObjectParameter("AspNetRolesIdList", aspNetRolesIdList) :
                new ObjectParameter("AspNetRolesIdList", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RoleTemplateXAspNetRoles_Insert_Result>("usp_RoleTemplateXAspNetRoles_Insert", roleTemplateParameter, aspNetRolesIdListParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_RoleTemplateXAspNetRoles_Select_Result> usp_RoleTemplateXAspNetRoles_Select(Nullable<int> roleTemplateId)
        {
            var roleTemplateIdParameter = roleTemplateId.HasValue ?
                new ObjectParameter("RoleTemplateId", roleTemplateId) :
                new ObjectParameter("RoleTemplateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RoleTemplateXAspNetRoles_Select_Result>("usp_RoleTemplateXAspNetRoles_Select", roleTemplateIdParameter);
        }
    
        public virtual ObjectResult<usp_RoleTemplateXAspNetRoles_Update_Result> usp_RoleTemplateXAspNetRoles_Update(Nullable<int> roleTemplateId, string aspNetRolesIdList, Nullable<int> createdByUserId)
        {
            var roleTemplateIdParameter = roleTemplateId.HasValue ?
                new ObjectParameter("RoleTemplateId", roleTemplateId) :
                new ObjectParameter("RoleTemplateId", typeof(int));
    
            var aspNetRolesIdListParameter = aspNetRolesIdList != null ?
                new ObjectParameter("AspNetRolesIdList", aspNetRolesIdList) :
                new ObjectParameter("AspNetRolesIdList", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RoleTemplateXAspNetRoles_Update_Result>("usp_RoleTemplateXAspNetRoles_Update", roleTemplateIdParameter, aspNetRolesIdListParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_UserRole_Insert_Result> usp_UserRole_Insert(Nullable<int> userId, Nullable<int> roleTemplateId, string aspNetRoleList, Nullable<int> createdByUserId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var roleTemplateIdParameter = roleTemplateId.HasValue ?
                new ObjectParameter("RoleTemplateId", roleTemplateId) :
                new ObjectParameter("RoleTemplateId", typeof(int));
    
            var aspNetRoleListParameter = aspNetRoleList != null ?
                new ObjectParameter("AspNetRoleList", aspNetRoleList) :
                new ObjectParameter("AspNetRoleList", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserRole_Insert_Result>("usp_UserRole_Insert", userIdParameter, roleTemplateIdParameter, aspNetRoleListParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_Area_Insert_Result> usp_Area_Insert(string areaDetail, Nullable<int> createBy_ID)
        {
            var areaDetailParameter = areaDetail != null ?
                new ObjectParameter("AreaDetail", areaDetail) :
                new ObjectParameter("AreaDetail", typeof(string));
    
            var createBy_IDParameter = createBy_ID.HasValue ?
                new ObjectParameter("CreateBy_ID", createBy_ID) :
                new ObjectParameter("CreateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Area_Insert_Result>("usp_Area_Insert", areaDetailParameter, createBy_IDParameter);
        }
    
        public virtual ObjectResult<usp_Area_Select_Result> usp_Area_Select(Nullable<int> areaId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Area_Select_Result>("usp_Area_Select", areaIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_Area_Update_Result> usp_Area_Update(Nullable<int> area_ID, string areaDetail, Nullable<bool> isActive, Nullable<int> createBy_ID)
        {
            var area_IDParameter = area_ID.HasValue ?
                new ObjectParameter("Area_ID", area_ID) :
                new ObjectParameter("Area_ID", typeof(int));
    
            var areaDetailParameter = areaDetail != null ?
                new ObjectParameter("AreaDetail", areaDetail) :
                new ObjectParameter("AreaDetail", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createBy_IDParameter = createBy_ID.HasValue ?
                new ObjectParameter("CreateBy_ID", createBy_ID) :
                new ObjectParameter("CreateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Area_Update_Result>("usp_Area_Update", area_IDParameter, areaDetailParameter, isActiveParameter, createBy_IDParameter);
        }
    
        public virtual ObjectResult<usp_BusinesPromoteTeam_Insert_Result> usp_BusinesPromoteTeam_Insert(Nullable<int> user_ID, Nullable<int> createBy_ID)
        {
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            var createBy_IDParameter = createBy_ID.HasValue ?
                new ObjectParameter("CreateBy_ID", createBy_ID) :
                new ObjectParameter("CreateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BusinesPromoteTeam_Insert_Result>("usp_BusinesPromoteTeam_Insert", user_IDParameter, createBy_IDParameter);
        }
    
        public virtual ObjectResult<usp_BusinesPromoteTeam_Select_Result> usp_BusinesPromoteTeam_Select(Nullable<int> businesPromoteTeam_ID, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var businesPromoteTeam_IDParameter = businesPromoteTeam_ID.HasValue ?
                new ObjectParameter("BusinesPromoteTeam_ID", businesPromoteTeam_ID) :
                new ObjectParameter("BusinesPromoteTeam_ID", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BusinesPromoteTeam_Select_Result>("usp_BusinesPromoteTeam_Select", businesPromoteTeam_IDParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_BusinesPromoteTeam_Update_Result> usp_BusinesPromoteTeam_Update(Nullable<int> businesPromoteTeam_ID, Nullable<int> user_ID, Nullable<bool> isActive, Nullable<int> createBy_ID)
        {
            var businesPromoteTeam_IDParameter = businesPromoteTeam_ID.HasValue ?
                new ObjectParameter("BusinesPromoteTeam_ID", businesPromoteTeam_ID) :
                new ObjectParameter("BusinesPromoteTeam_ID", typeof(int));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createBy_IDParameter = createBy_ID.HasValue ?
                new ObjectParameter("CreateBy_ID", createBy_ID) :
                new ObjectParameter("CreateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BusinesPromoteTeam_Update_Result>("usp_BusinesPromoteTeam_Update", businesPromoteTeam_IDParameter, user_IDParameter, isActiveParameter, createBy_IDParameter);
        }
    
        public virtual ObjectResult<usp_Branch_Insert_Result> usp_Branch_Insert(string branchDetail, Nullable<int> createBy_ID)
        {
            var branchDetailParameter = branchDetail != null ?
                new ObjectParameter("BranchDetail", branchDetail) :
                new ObjectParameter("BranchDetail", typeof(string));
    
            var createBy_IDParameter = createBy_ID.HasValue ?
                new ObjectParameter("CreateBy_ID", createBy_ID) :
                new ObjectParameter("CreateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Branch_Insert_Result>("usp_Branch_Insert", branchDetailParameter, createBy_IDParameter);
        }
    
        public virtual ObjectResult<usp_Branch_Update_Result> usp_Branch_Update(Nullable<int> branch_ID, string branchDetail, Nullable<bool> isActive, Nullable<int> createBy_ID)
        {
            var branch_IDParameter = branch_ID.HasValue ?
                new ObjectParameter("Branch_ID", branch_ID) :
                new ObjectParameter("Branch_ID", typeof(int));
    
            var branchDetailParameter = branchDetail != null ?
                new ObjectParameter("BranchDetail", branchDetail) :
                new ObjectParameter("BranchDetail", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createBy_IDParameter = createBy_ID.HasValue ?
                new ObjectParameter("CreateBy_ID", createBy_ID) :
                new ObjectParameter("CreateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Branch_Update_Result>("usp_Branch_Update", branch_IDParameter, branchDetailParameter, isActiveParameter, createBy_IDParameter);
        }
    
        public virtual ObjectResult<usp_Branch_SelectV2_Result> usp_Branch_SelectV2(Nullable<int> branch_ID, Nullable<int> area_ID, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var branch_IDParameter = branch_ID.HasValue ?
                new ObjectParameter("Branch_ID", branch_ID) :
                new ObjectParameter("Branch_ID", typeof(int));
    
            var area_IDParameter = area_ID.HasValue ?
                new ObjectParameter("Area_ID", area_ID) :
                new ObjectParameter("Area_ID", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Branch_SelectV2_Result>("usp_Branch_SelectV2", branch_IDParameter, area_IDParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_BranchArea_Select_Result> usp_BranchArea_Select(Nullable<int> branchArea_ID, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var branchArea_IDParameter = branchArea_ID.HasValue ?
                new ObjectParameter("BranchArea_ID", branchArea_ID) :
                new ObjectParameter("BranchArea_ID", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BranchArea_Select_Result>("usp_BranchArea_Select", branchArea_IDParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_BranchArea_Update_Result> usp_BranchArea_Update(Nullable<int> branchArea_ID, Nullable<int> branch_ID, Nullable<int> createBy_ID)
        {
            var branchArea_IDParameter = branchArea_ID.HasValue ?
                new ObjectParameter("BranchArea_ID", branchArea_ID) :
                new ObjectParameter("BranchArea_ID", typeof(int));
    
            var branch_IDParameter = branch_ID.HasValue ?
                new ObjectParameter("Branch_ID", branch_ID) :
                new ObjectParameter("Branch_ID", typeof(int));
    
            var createBy_IDParameter = createBy_ID.HasValue ?
                new ObjectParameter("CreateBy_ID", createBy_ID) :
                new ObjectParameter("CreateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BranchArea_Update_Result>("usp_BranchArea_Update", branchArea_IDParameter, branch_IDParameter, createBy_IDParameter);
        }
    
        public virtual ObjectResult<usp_BranchXArea_Update_Result> usp_BranchXArea_Update(Nullable<int> branch_ID, Nullable<int> area_ID, string branchDetail, Nullable<int> createBy_ID)
        {
            var branch_IDParameter = branch_ID.HasValue ?
                new ObjectParameter("Branch_ID", branch_ID) :
                new ObjectParameter("Branch_ID", typeof(int));
    
            var area_IDParameter = area_ID.HasValue ?
                new ObjectParameter("Area_ID", area_ID) :
                new ObjectParameter("Area_ID", typeof(int));
    
            var branchDetailParameter = branchDetail != null ?
                new ObjectParameter("BranchDetail", branchDetail) :
                new ObjectParameter("BranchDetail", typeof(string));
    
            var createBy_IDParameter = createBy_ID.HasValue ?
                new ObjectParameter("CreateBy_ID", createBy_ID) :
                new ObjectParameter("CreateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BranchXArea_Update_Result>("usp_BranchXArea_Update", branch_IDParameter, area_IDParameter, branchDetailParameter, createBy_IDParameter);
        }
    
        public virtual ObjectResult<usp_DirectorManagement_Select_Result> usp_DirectorManagement_Select(Nullable<int> province_ID, string district_ID, Nullable<int> branch_ID, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var province_IDParameter = province_ID.HasValue ?
                new ObjectParameter("Province_ID", province_ID) :
                new ObjectParameter("Province_ID", typeof(int));
    
            var district_IDParameter = district_ID != null ?
                new ObjectParameter("District_ID", district_ID) :
                new ObjectParameter("District_ID", typeof(string));
    
            var branch_IDParameter = branch_ID.HasValue ?
                new ObjectParameter("Branch_ID", branch_ID) :
                new ObjectParameter("Branch_ID", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DirectorManagement_Select_Result>("usp_DirectorManagement_Select", province_IDParameter, district_IDParameter, branch_IDParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_DirectorManagement_Update_Result> usp_DirectorManagement_Update(string district_ID, Nullable<int> user_ID, Nullable<int> createBy_ID)
        {
            var district_IDParameter = district_ID != null ?
                new ObjectParameter("District_ID", district_ID) :
                new ObjectParameter("District_ID", typeof(string));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            var createBy_IDParameter = createBy_ID.HasValue ?
                new ObjectParameter("CreateBy_ID", createBy_ID) :
                new ObjectParameter("CreateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DirectorManagement_Update_Result>("usp_DirectorManagement_Update", district_IDParameter, user_IDParameter, createBy_IDParameter);
        }
    
        public virtual ObjectResult<usp_AreaManager_Select_Result> usp_AreaManager_Select(Nullable<int> areaManager_ID, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var areaManager_IDParameter = areaManager_ID.HasValue ?
                new ObjectParameter("AreaManager_ID", areaManager_ID) :
                new ObjectParameter("AreaManager_ID", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AreaManager_Select_Result>("usp_AreaManager_Select", areaManager_IDParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_AreaManager_Update_Result> usp_AreaManager_Update(Nullable<int> area_ID, Nullable<int> uSER_ID, Nullable<int> createBy_ID)
        {
            var area_IDParameter = area_ID.HasValue ?
                new ObjectParameter("Area_ID", area_ID) :
                new ObjectParameter("Area_ID", typeof(int));
    
            var uSER_IDParameter = uSER_ID.HasValue ?
                new ObjectParameter("USER_ID", uSER_ID) :
                new ObjectParameter("USER_ID", typeof(int));
    
            var createBy_IDParameter = createBy_ID.HasValue ?
                new ObjectParameter("CreateBy_ID", createBy_ID) :
                new ObjectParameter("CreateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AreaManager_Update_Result>("usp_AreaManager_Update", area_IDParameter, uSER_IDParameter, createBy_IDParameter);
        }
    
        public virtual ObjectResult<usp_ChairmanManagement_Select_Result> usp_ChairmanManagement_Select(Nullable<int> branch_ID, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var branch_IDParameter = branch_ID.HasValue ?
                new ObjectParameter("Branch_ID", branch_ID) :
                new ObjectParameter("Branch_ID", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ChairmanManagement_Select_Result>("usp_ChairmanManagement_Select", branch_IDParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ChairmanManagement_Update_Result> usp_ChairmanManagement_Update(Nullable<int> branch_ID, Nullable<int> user_ID, Nullable<int> createBy_ID)
        {
            var branch_IDParameter = branch_ID.HasValue ?
                new ObjectParameter("Branch_ID", branch_ID) :
                new ObjectParameter("Branch_ID", typeof(int));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            var createBy_IDParameter = createBy_ID.HasValue ?
                new ObjectParameter("CreateBy_ID", createBy_ID) :
                new ObjectParameter("CreateBy_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ChairmanManagement_Update_Result>("usp_ChairmanManagement_Update", branch_IDParameter, user_IDParameter, createBy_IDParameter);
        }
    
        public virtual ObjectResult<usp_ChairmanManagementReportTab2_Select_Result> usp_ChairmanManagementReportTab2_Select(Nullable<int> branch_ID, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var branch_IDParameter = branch_ID.HasValue ?
                new ObjectParameter("Branch_ID", branch_ID) :
                new ObjectParameter("Branch_ID", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ChairmanManagementReportTab2_Select_Result>("usp_ChairmanManagementReportTab2_Select", branch_IDParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_DirectorManagementReportTab2_Select_Result> usp_DirectorManagementReportTab2_Select(Nullable<int> province_ID, string district_ID, Nullable<int> branch_ID, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var province_IDParameter = province_ID.HasValue ?
                new ObjectParameter("Province_ID", province_ID) :
                new ObjectParameter("Province_ID", typeof(int));
    
            var district_IDParameter = district_ID != null ?
                new ObjectParameter("District_ID", district_ID) :
                new ObjectParameter("District_ID", typeof(string));
    
            var branch_IDParameter = branch_ID.HasValue ?
                new ObjectParameter("Branch_ID", branch_ID) :
                new ObjectParameter("Branch_ID", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DirectorManagementReportTab2_Select_Result>("usp_DirectorManagementReportTab2_Select", province_IDParameter, district_IDParameter, branch_IDParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ProvinceDistrictSubDistrict_Select_Result> usp_ProvinceDistrictSubDistrict_Select(Nullable<int> subDistrictId, Nullable<int> districtId, Nullable<int> provinceId, string zipCode, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var subDistrictIdParameter = subDistrictId.HasValue ?
                new ObjectParameter("SubDistrictId", subDistrictId) :
                new ObjectParameter("SubDistrictId", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProvinceDistrictSubDistrict_Select_Result>("usp_ProvinceDistrictSubDistrict_Select", subDistrictIdParameter, districtIdParameter, provinceIdParameter, zipCodeParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_BranchInformation_Insert_Result> usp_BranchInformation_Insert(Nullable<int> branchInformation_ID, Nullable<int> branch_ID, string addressDetail1, string addressDetail2, Nullable<int> subDistrict_ID, string nearBy, string telephone, string latitude, string longitude, Nullable<int> managerUser_ID, Nullable<int> chairmanUser_ID, Nullable<int> directorUser_ID, Nullable<int> businessPromoteTeamUser_ID, Nullable<int> createdByUserId, string email, string secondPhoneNo)
        {
            var branchInformation_IDParameter = branchInformation_ID.HasValue ?
                new ObjectParameter("BranchInformation_ID", branchInformation_ID) :
                new ObjectParameter("BranchInformation_ID", typeof(int));
    
            var branch_IDParameter = branch_ID.HasValue ?
                new ObjectParameter("Branch_ID", branch_ID) :
                new ObjectParameter("Branch_ID", typeof(int));
    
            var addressDetail1Parameter = addressDetail1 != null ?
                new ObjectParameter("AddressDetail1", addressDetail1) :
                new ObjectParameter("AddressDetail1", typeof(string));
    
            var addressDetail2Parameter = addressDetail2 != null ?
                new ObjectParameter("AddressDetail2", addressDetail2) :
                new ObjectParameter("AddressDetail2", typeof(string));
    
            var subDistrict_IDParameter = subDistrict_ID.HasValue ?
                new ObjectParameter("SubDistrict_ID", subDistrict_ID) :
                new ObjectParameter("SubDistrict_ID", typeof(int));
    
            var nearByParameter = nearBy != null ?
                new ObjectParameter("NearBy", nearBy) :
                new ObjectParameter("NearBy", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var managerUser_IDParameter = managerUser_ID.HasValue ?
                new ObjectParameter("ManagerUser_ID", managerUser_ID) :
                new ObjectParameter("ManagerUser_ID", typeof(int));
    
            var chairmanUser_IDParameter = chairmanUser_ID.HasValue ?
                new ObjectParameter("ChairmanUser_ID", chairmanUser_ID) :
                new ObjectParameter("ChairmanUser_ID", typeof(int));
    
            var directorUser_IDParameter = directorUser_ID.HasValue ?
                new ObjectParameter("DirectorUser_ID", directorUser_ID) :
                new ObjectParameter("DirectorUser_ID", typeof(int));
    
            var businessPromoteTeamUser_IDParameter = businessPromoteTeamUser_ID.HasValue ?
                new ObjectParameter("BusinessPromoteTeamUser_ID", businessPromoteTeamUser_ID) :
                new ObjectParameter("BusinessPromoteTeamUser_ID", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var secondPhoneNoParameter = secondPhoneNo != null ?
                new ObjectParameter("SecondPhoneNo", secondPhoneNo) :
                new ObjectParameter("SecondPhoneNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BranchInformation_Insert_Result>("usp_BranchInformation_Insert", branchInformation_IDParameter, branch_IDParameter, addressDetail1Parameter, addressDetail2Parameter, subDistrict_IDParameter, nearByParameter, telephoneParameter, latitudeParameter, longitudeParameter, managerUser_IDParameter, chairmanUser_IDParameter, directorUser_IDParameter, businessPromoteTeamUser_IDParameter, createdByUserIdParameter, emailParameter, secondPhoneNoParameter);
        }
    
        public virtual ObjectResult<usp_BranchInformation_Select_Result> usp_BranchInformation_Select(Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BranchInformation_Select_Result>("usp_BranchInformation_Select", indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_BranchInformationById_Select_Result> usp_BranchInformationById_Select(Nullable<int> branchInformation_ID)
        {
            var branchInformation_IDParameter = branchInformation_ID.HasValue ?
                new ObjectParameter("BranchInformation_ID", branchInformation_ID) :
                new ObjectParameter("BranchInformation_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BranchInformationById_Select_Result>("usp_BranchInformationById_Select", branchInformation_IDParameter);
        }
    
        public virtual ObjectResult<usp_PersonUserV2_Select_Result> usp_PersonUserV2_Select(string searchDetail)
        {
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonUserV2_Select_Result>("usp_PersonUserV2_Select", searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_OrganizeType_Select_Result> usp_OrganizeType_Select(Nullable<int> organizeTypeId, Nullable<int> organizeGroupId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var organizeTypeIdParameter = organizeTypeId.HasValue ?
                new ObjectParameter("OrganizeTypeId", organizeTypeId) :
                new ObjectParameter("OrganizeTypeId", typeof(int));
    
            var organizeGroupIdParameter = organizeGroupId.HasValue ?
                new ObjectParameter("OrganizeGroupId", organizeGroupId) :
                new ObjectParameter("OrganizeGroupId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrganizeType_Select_Result>("usp_OrganizeType_Select", organizeTypeIdParameter, organizeGroupIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_Bank_Select_Result> usp_Bank_Select(Nullable<int> bank_ID)
        {
            var bank_IDParameter = bank_ID.HasValue ?
                new ObjectParameter("Bank_ID", bank_ID) :
                new ObjectParameter("Bank_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Bank_Select_Result>("usp_Bank_Select", bank_IDParameter);
        }
    
        public virtual ObjectResult<usp_HospitalOrganize_Select_Result> usp_HospitalOrganize_Select(Nullable<int> organizeId, Nullable<int> organizeTypeId, Nullable<int> provinceId, string keyWord, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            var organizeTypeIdParameter = organizeTypeId.HasValue ?
                new ObjectParameter("OrganizeTypeId", organizeTypeId) :
                new ObjectParameter("OrganizeTypeId", typeof(int));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            var keyWordParameter = keyWord != null ?
                new ObjectParameter("KeyWord", keyWord) :
                new ObjectParameter("KeyWord", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_HospitalOrganize_Select_Result>("usp_HospitalOrganize_Select", organizeIdParameter, organizeTypeIdParameter, provinceIdParameter, keyWordParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_OrganizeBankAccountByOrganizeId_Select_Result> usp_OrganizeBankAccountByOrganizeId_Select(Nullable<int> organizeId)
        {
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("organizeId", organizeId) :
                new ObjectParameter("organizeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrganizeBankAccountByOrganizeId_Select_Result>("usp_OrganizeBankAccountByOrganizeId_Select", organizeIdParameter);
        }
    
        public virtual ObjectResult<usp_OrganizeContractDetailByOrganizeId_Select_Result> usp_OrganizeContractDetailByOrganizeId_Select(Nullable<int> organizeId)
        {
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("organizeId", organizeId) :
                new ObjectParameter("organizeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrganizeContractDetailByOrganizeId_Select_Result>("usp_OrganizeContractDetailByOrganizeId_Select", organizeIdParameter);
        }
    
        public virtual ObjectResult<usp_OrganizeInformationByOrganizeId_Select_Result> usp_OrganizeInformationByOrganizeId_Select(Nullable<int> organizeId)
        {
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("organizeId", organizeId) :
                new ObjectParameter("organizeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrganizeInformationByOrganizeId_Select_Result>("usp_OrganizeInformationByOrganizeId_Select", organizeIdParameter);
        }
    
        public virtual ObjectResult<usp_OrganizeV2_Insert_Result> usp_OrganizeV2_Insert(Nullable<int> organizeTypeID, string organizeDetail, string addressDetail1, string addressDetail2, string subDistrictID, string zipCode, Nullable<int> createByUserId)
        {
            var organizeTypeIDParameter = organizeTypeID.HasValue ?
                new ObjectParameter("organizeTypeID", organizeTypeID) :
                new ObjectParameter("organizeTypeID", typeof(int));
    
            var organizeDetailParameter = organizeDetail != null ?
                new ObjectParameter("organizeDetail", organizeDetail) :
                new ObjectParameter("organizeDetail", typeof(string));
    
            var addressDetail1Parameter = addressDetail1 != null ?
                new ObjectParameter("addressDetail1", addressDetail1) :
                new ObjectParameter("addressDetail1", typeof(string));
    
            var addressDetail2Parameter = addressDetail2 != null ?
                new ObjectParameter("addressDetail2", addressDetail2) :
                new ObjectParameter("addressDetail2", typeof(string));
    
            var subDistrictIDParameter = subDistrictID != null ?
                new ObjectParameter("SubDistrictID", subDistrictID) :
                new ObjectParameter("SubDistrictID", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var createByUserIdParameter = createByUserId.HasValue ?
                new ObjectParameter("CreateByUserId", createByUserId) :
                new ObjectParameter("CreateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrganizeV2_Insert_Result>("usp_OrganizeV2_Insert", organizeTypeIDParameter, organizeDetailParameter, addressDetail1Parameter, addressDetail2Parameter, subDistrictIDParameter, zipCodeParameter, createByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_OrganizeV2_Update_Result> usp_OrganizeV2_Update(Nullable<int> organizeID, Nullable<int> organizeTypeID, string organizeDetail, string addressDetail1, string addressDetail2, string subDistrictID, string zipCode, Nullable<int> createByUserId)
        {
            var organizeIDParameter = organizeID.HasValue ?
                new ObjectParameter("organizeID", organizeID) :
                new ObjectParameter("organizeID", typeof(int));
    
            var organizeTypeIDParameter = organizeTypeID.HasValue ?
                new ObjectParameter("organizeTypeID", organizeTypeID) :
                new ObjectParameter("organizeTypeID", typeof(int));
    
            var organizeDetailParameter = organizeDetail != null ?
                new ObjectParameter("organizeDetail", organizeDetail) :
                new ObjectParameter("organizeDetail", typeof(string));
    
            var addressDetail1Parameter = addressDetail1 != null ?
                new ObjectParameter("addressDetail1", addressDetail1) :
                new ObjectParameter("addressDetail1", typeof(string));
    
            var addressDetail2Parameter = addressDetail2 != null ?
                new ObjectParameter("addressDetail2", addressDetail2) :
                new ObjectParameter("addressDetail2", typeof(string));
    
            var subDistrictIDParameter = subDistrictID != null ?
                new ObjectParameter("SubDistrictID", subDistrictID) :
                new ObjectParameter("SubDistrictID", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var createByUserIdParameter = createByUserId.HasValue ?
                new ObjectParameter("CreateByUserId", createByUserId) :
                new ObjectParameter("CreateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrganizeV2_Update_Result>("usp_OrganizeV2_Update", organizeIDParameter, organizeTypeIDParameter, organizeDetailParameter, addressDetail1Parameter, addressDetail2Parameter, subDistrictIDParameter, zipCodeParameter, createByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_CheckDuplicateHospitalOrganize_Select_Result> usp_CheckDuplicateHospitalOrganize_Select(string subDistrictId, Nullable<int> organizeTypeId, string keyWord, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var subDistrictIdParameter = subDistrictId != null ?
                new ObjectParameter("SubDistrictId", subDistrictId) :
                new ObjectParameter("SubDistrictId", typeof(string));
    
            var organizeTypeIdParameter = organizeTypeId.HasValue ?
                new ObjectParameter("OrganizeTypeId", organizeTypeId) :
                new ObjectParameter("OrganizeTypeId", typeof(int));
    
            var keyWordParameter = keyWord != null ?
                new ObjectParameter("KeyWord", keyWord) :
                new ObjectParameter("KeyWord", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CheckDuplicateHospitalOrganize_Select_Result>("usp_CheckDuplicateHospitalOrganize_Select", subDistrictIdParameter, organizeTypeIdParameter, keyWordParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_OrganizeActive_Update_Result> usp_OrganizeActive_Update(Nullable<int> organizeId, Nullable<bool> isActive, Nullable<int> createByUserId)
        {
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createByUserIdParameter = createByUserId.HasValue ?
                new ObjectParameter("CreateByUserId", createByUserId) :
                new ObjectParameter("CreateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrganizeActive_Update_Result>("usp_OrganizeActive_Update", organizeIdParameter, isActiveParameter, createByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_CheckDuplicateOrganize_Select_Result> usp_CheckDuplicateOrganize_Select(string subDistrictId, Nullable<int> organizeTypeId, string keyWord, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var subDistrictIdParameter = subDistrictId != null ?
                new ObjectParameter("SubDistrictId", subDistrictId) :
                new ObjectParameter("SubDistrictId", typeof(string));
    
            var organizeTypeIdParameter = organizeTypeId.HasValue ?
                new ObjectParameter("OrganizeTypeId", organizeTypeId) :
                new ObjectParameter("OrganizeTypeId", typeof(int));
    
            var keyWordParameter = keyWord != null ?
                new ObjectParameter("KeyWord", keyWord) :
                new ObjectParameter("KeyWord", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CheckDuplicateOrganize_Select_Result>("usp_CheckDuplicateOrganize_Select", subDistrictIdParameter, organizeTypeIdParameter, keyWordParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_InsuranceOrganize_Select_Result> usp_InsuranceOrganize_Select(Nullable<int> organizeId, Nullable<int> organizeTypeId, Nullable<int> provinceId, string keyWord, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            var organizeTypeIdParameter = organizeTypeId.HasValue ?
                new ObjectParameter("OrganizeTypeId", organizeTypeId) :
                new ObjectParameter("OrganizeTypeId", typeof(int));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            var keyWordParameter = keyWord != null ?
                new ObjectParameter("KeyWord", keyWord) :
                new ObjectParameter("KeyWord", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_InsuranceOrganize_Select_Result>("usp_InsuranceOrganize_Select", organizeIdParameter, organizeTypeIdParameter, provinceIdParameter, keyWordParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_GarageOrganize_Select_Result> usp_GarageOrganize_Select(Nullable<int> organizeId, Nullable<int> organizeTypeId, Nullable<int> provinceId, string keyWord, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            var organizeTypeIdParameter = organizeTypeId.HasValue ?
                new ObjectParameter("OrganizeTypeId", organizeTypeId) :
                new ObjectParameter("OrganizeTypeId", typeof(int));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            var keyWordParameter = keyWord != null ?
                new ObjectParameter("KeyWord", keyWord) :
                new ObjectParameter("KeyWord", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GarageOrganize_Select_Result>("usp_GarageOrganize_Select", organizeIdParameter, organizeTypeIdParameter, provinceIdParameter, keyWordParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_OrganizeBankAccount_Insert_Result> usp_OrganizeBankAccount_Insert(Nullable<int> organizeId, string organizeBankAccountChequeName, Nullable<int> bank_ID, string organizeBranchBank, string organizeBankAccountNO, string organizeBankAccountName, Nullable<int> createdById, Nullable<bool> isActive)
        {
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("organizeId", organizeId) :
                new ObjectParameter("organizeId", typeof(int));
    
            var organizeBankAccountChequeNameParameter = organizeBankAccountChequeName != null ?
                new ObjectParameter("OrganizeBankAccountChequeName", organizeBankAccountChequeName) :
                new ObjectParameter("OrganizeBankAccountChequeName", typeof(string));
    
            var bank_IDParameter = bank_ID.HasValue ?
                new ObjectParameter("Bank_ID", bank_ID) :
                new ObjectParameter("Bank_ID", typeof(int));
    
            var organizeBranchBankParameter = organizeBranchBank != null ?
                new ObjectParameter("OrganizeBranchBank", organizeBranchBank) :
                new ObjectParameter("OrganizeBranchBank", typeof(string));
    
            var organizeBankAccountNOParameter = organizeBankAccountNO != null ?
                new ObjectParameter("OrganizeBankAccountNO", organizeBankAccountNO) :
                new ObjectParameter("OrganizeBankAccountNO", typeof(string));
    
            var organizeBankAccountNameParameter = organizeBankAccountName != null ?
                new ObjectParameter("OrganizeBankAccountName", organizeBankAccountName) :
                new ObjectParameter("OrganizeBankAccountName", typeof(string));
    
            var createdByIdParameter = createdById.HasValue ?
                new ObjectParameter("CreatedById", createdById) :
                new ObjectParameter("CreatedById", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrganizeBankAccount_Insert_Result>("usp_OrganizeBankAccount_Insert", organizeIdParameter, organizeBankAccountChequeNameParameter, bank_IDParameter, organizeBranchBankParameter, organizeBankAccountNOParameter, organizeBankAccountNameParameter, createdByIdParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_OrganizeInformation_Insert_Result> usp_OrganizeInformation_Insert(Nullable<int> organize_ID, string nearByPlace, string organizeContactTel, Nullable<int> contactTel_TypeID, string organizeContactfax, Nullable<int> contactfax_TypeId, string organizeContactEmail, Nullable<int> contactEmail_TypeId, string latitude, string longitude, string financeContact, string financeTel, string financeEmail, string financeFax, string alternateFinanceContact, string alternateFinanceTel, string alternateFinanceEmail, string alternateFinanceFax, string accountingContact, string accountingTel, string accountingEmail, string accountingFax, string marketingContact, string marketingTel, string marketingEmail, string marketingFax, string nurseContact, string nurseTel, string nurseEmail, string nurseFax, Nullable<int> creadByUserId)
        {
            var organize_IDParameter = organize_ID.HasValue ?
                new ObjectParameter("Organize_ID", organize_ID) :
                new ObjectParameter("Organize_ID", typeof(int));
    
            var nearByPlaceParameter = nearByPlace != null ?
                new ObjectParameter("NearByPlace", nearByPlace) :
                new ObjectParameter("NearByPlace", typeof(string));
    
            var organizeContactTelParameter = organizeContactTel != null ?
                new ObjectParameter("OrganizeContactTel", organizeContactTel) :
                new ObjectParameter("OrganizeContactTel", typeof(string));
    
            var contactTel_TypeIDParameter = contactTel_TypeID.HasValue ?
                new ObjectParameter("ContactTel_TypeID", contactTel_TypeID) :
                new ObjectParameter("ContactTel_TypeID", typeof(int));
    
            var organizeContactfaxParameter = organizeContactfax != null ?
                new ObjectParameter("OrganizeContactfax", organizeContactfax) :
                new ObjectParameter("OrganizeContactfax", typeof(string));
    
            var contactfax_TypeIdParameter = contactfax_TypeId.HasValue ?
                new ObjectParameter("Contactfax_TypeId", contactfax_TypeId) :
                new ObjectParameter("Contactfax_TypeId", typeof(int));
    
            var organizeContactEmailParameter = organizeContactEmail != null ?
                new ObjectParameter("OrganizeContactEmail", organizeContactEmail) :
                new ObjectParameter("OrganizeContactEmail", typeof(string));
    
            var contactEmail_TypeIdParameter = contactEmail_TypeId.HasValue ?
                new ObjectParameter("ContactEmail_TypeId", contactEmail_TypeId) :
                new ObjectParameter("ContactEmail_TypeId", typeof(int));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var financeContactParameter = financeContact != null ?
                new ObjectParameter("FinanceContact", financeContact) :
                new ObjectParameter("FinanceContact", typeof(string));
    
            var financeTelParameter = financeTel != null ?
                new ObjectParameter("FinanceTel", financeTel) :
                new ObjectParameter("FinanceTel", typeof(string));
    
            var financeEmailParameter = financeEmail != null ?
                new ObjectParameter("FinanceEmail", financeEmail) :
                new ObjectParameter("FinanceEmail", typeof(string));
    
            var financeFaxParameter = financeFax != null ?
                new ObjectParameter("FinanceFax", financeFax) :
                new ObjectParameter("FinanceFax", typeof(string));
    
            var alternateFinanceContactParameter = alternateFinanceContact != null ?
                new ObjectParameter("AlternateFinanceContact", alternateFinanceContact) :
                new ObjectParameter("AlternateFinanceContact", typeof(string));
    
            var alternateFinanceTelParameter = alternateFinanceTel != null ?
                new ObjectParameter("AlternateFinanceTel", alternateFinanceTel) :
                new ObjectParameter("AlternateFinanceTel", typeof(string));
    
            var alternateFinanceEmailParameter = alternateFinanceEmail != null ?
                new ObjectParameter("AlternateFinanceEmail", alternateFinanceEmail) :
                new ObjectParameter("AlternateFinanceEmail", typeof(string));
    
            var alternateFinanceFaxParameter = alternateFinanceFax != null ?
                new ObjectParameter("AlternateFinanceFax", alternateFinanceFax) :
                new ObjectParameter("AlternateFinanceFax", typeof(string));
    
            var accountingContactParameter = accountingContact != null ?
                new ObjectParameter("AccountingContact", accountingContact) :
                new ObjectParameter("AccountingContact", typeof(string));
    
            var accountingTelParameter = accountingTel != null ?
                new ObjectParameter("AccountingTel", accountingTel) :
                new ObjectParameter("AccountingTel", typeof(string));
    
            var accountingEmailParameter = accountingEmail != null ?
                new ObjectParameter("AccountingEmail", accountingEmail) :
                new ObjectParameter("AccountingEmail", typeof(string));
    
            var accountingFaxParameter = accountingFax != null ?
                new ObjectParameter("AccountingFax", accountingFax) :
                new ObjectParameter("AccountingFax", typeof(string));
    
            var marketingContactParameter = marketingContact != null ?
                new ObjectParameter("MarketingContact", marketingContact) :
                new ObjectParameter("MarketingContact", typeof(string));
    
            var marketingTelParameter = marketingTel != null ?
                new ObjectParameter("MarketingTel", marketingTel) :
                new ObjectParameter("MarketingTel", typeof(string));
    
            var marketingEmailParameter = marketingEmail != null ?
                new ObjectParameter("MarketingEmail", marketingEmail) :
                new ObjectParameter("MarketingEmail", typeof(string));
    
            var marketingFaxParameter = marketingFax != null ?
                new ObjectParameter("MarketingFax", marketingFax) :
                new ObjectParameter("MarketingFax", typeof(string));
    
            var nurseContactParameter = nurseContact != null ?
                new ObjectParameter("NurseContact", nurseContact) :
                new ObjectParameter("NurseContact", typeof(string));
    
            var nurseTelParameter = nurseTel != null ?
                new ObjectParameter("NurseTel", nurseTel) :
                new ObjectParameter("NurseTel", typeof(string));
    
            var nurseEmailParameter = nurseEmail != null ?
                new ObjectParameter("NurseEmail", nurseEmail) :
                new ObjectParameter("NurseEmail", typeof(string));
    
            var nurseFaxParameter = nurseFax != null ?
                new ObjectParameter("NurseFax", nurseFax) :
                new ObjectParameter("NurseFax", typeof(string));
    
            var creadByUserIdParameter = creadByUserId.HasValue ?
                new ObjectParameter("CreadByUserId", creadByUserId) :
                new ObjectParameter("CreadByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrganizeInformation_Insert_Result>("usp_OrganizeInformation_Insert", organize_IDParameter, nearByPlaceParameter, organizeContactTelParameter, contactTel_TypeIDParameter, organizeContactfaxParameter, contactfax_TypeIdParameter, organizeContactEmailParameter, contactEmail_TypeIdParameter, latitudeParameter, longitudeParameter, financeContactParameter, financeTelParameter, financeEmailParameter, financeFaxParameter, alternateFinanceContactParameter, alternateFinanceTelParameter, alternateFinanceEmailParameter, alternateFinanceFaxParameter, accountingContactParameter, accountingTelParameter, accountingEmailParameter, accountingFaxParameter, marketingContactParameter, marketingTelParameter, marketingEmailParameter, marketingFaxParameter, nurseContactParameter, nurseTelParameter, nurseEmailParameter, nurseFaxParameter, creadByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_OrganizeContractDetail_Insert_Result1> usp_OrganizeContractDetail_Insert(Nullable<int> organizeId, Nullable<bool> isContract, Nullable<int> iPD_PH, Nullable<int> oPD_PH, Nullable<int> iPD_PA, Nullable<int> oPD_PA, Nullable<int> createdById, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> statusProcessId, Nullable<int> claim, string remark)
        {
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("organizeId", organizeId) :
                new ObjectParameter("organizeId", typeof(int));
    
            var isContractParameter = isContract.HasValue ?
                new ObjectParameter("IsContract", isContract) :
                new ObjectParameter("IsContract", typeof(bool));
    
            var iPD_PHParameter = iPD_PH.HasValue ?
                new ObjectParameter("IPD_PH", iPD_PH) :
                new ObjectParameter("IPD_PH", typeof(int));
    
            var oPD_PHParameter = oPD_PH.HasValue ?
                new ObjectParameter("OPD_PH", oPD_PH) :
                new ObjectParameter("OPD_PH", typeof(int));
    
            var iPD_PAParameter = iPD_PA.HasValue ?
                new ObjectParameter("IPD_PA", iPD_PA) :
                new ObjectParameter("IPD_PA", typeof(int));
    
            var oPD_PAParameter = oPD_PA.HasValue ?
                new ObjectParameter("OPD_PA", oPD_PA) :
                new ObjectParameter("OPD_PA", typeof(int));
    
            var createdByIdParameter = createdById.HasValue ?
                new ObjectParameter("CreatedById", createdById) :
                new ObjectParameter("CreatedById", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var statusProcessIdParameter = statusProcessId.HasValue ?
                new ObjectParameter("StatusProcessId", statusProcessId) :
                new ObjectParameter("StatusProcessId", typeof(int));
    
            var claimParameter = claim.HasValue ?
                new ObjectParameter("Claim", claim) :
                new ObjectParameter("Claim", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrganizeContractDetail_Insert_Result1>("usp_OrganizeContractDetail_Insert", organizeIdParameter, isContractParameter, iPD_PHParameter, oPD_PHParameter, iPD_PAParameter, oPD_PAParameter, createdByIdParameter, startDateParameter, endDateParameter, statusProcessIdParameter, claimParameter, remarkParameter);
        }
    
        public virtual ObjectResult<usp_OrganizeStatus_Select_Result> usp_OrganizeStatus_Select(Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrganizeStatus_Select_Result>("usp_OrganizeStatus_Select", indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_AcademyOrganize_Select_Result> usp_AcademyOrganize_Select(Nullable<int> organizeId, Nullable<int> organizeTypeId, Nullable<int> provinceId, string keyWord, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            var organizeTypeIdParameter = organizeTypeId.HasValue ?
                new ObjectParameter("OrganizeTypeId", organizeTypeId) :
                new ObjectParameter("OrganizeTypeId", typeof(int));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            var keyWordParameter = keyWord != null ?
                new ObjectParameter("KeyWord", keyWord) :
                new ObjectParameter("KeyWord", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AcademyOrganize_Select_Result>("usp_AcademyOrganize_Select", organizeIdParameter, organizeTypeIdParameter, provinceIdParameter, keyWordParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_OrganizeAcademy_Insert_Result> usp_OrganizeAcademy_Insert(Nullable<int> organizeTypeId, string address1, string address2, Nullable<int> subdistrictId, Nullable<int> titleId, string organizeDetail, Nullable<int> createdByUserId)
        {
            var organizeTypeIdParameter = organizeTypeId.HasValue ?
                new ObjectParameter("OrganizeTypeId", organizeTypeId) :
                new ObjectParameter("OrganizeTypeId", typeof(int));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var subdistrictIdParameter = subdistrictId.HasValue ?
                new ObjectParameter("SubdistrictId", subdistrictId) :
                new ObjectParameter("SubdistrictId", typeof(int));
    
            var titleIdParameter = titleId.HasValue ?
                new ObjectParameter("TitleId", titleId) :
                new ObjectParameter("TitleId", typeof(int));
    
            var organizeDetailParameter = organizeDetail != null ?
                new ObjectParameter("OrganizeDetail", organizeDetail) :
                new ObjectParameter("OrganizeDetail", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrganizeAcademy_Insert_Result>("usp_OrganizeAcademy_Insert", organizeTypeIdParameter, address1Parameter, address2Parameter, subdistrictIdParameter, titleIdParameter, organizeDetailParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_OrganizeAcademy_Update_Result> usp_OrganizeAcademy_Update(Nullable<int> organizeId, Nullable<int> organizeTypeId, string address1, string address2, Nullable<int> subdistrictId, Nullable<int> titleId, string organizeDetail, Nullable<int> createdByUserId)
        {
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            var organizeTypeIdParameter = organizeTypeId.HasValue ?
                new ObjectParameter("OrganizeTypeId", organizeTypeId) :
                new ObjectParameter("OrganizeTypeId", typeof(int));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var subdistrictIdParameter = subdistrictId.HasValue ?
                new ObjectParameter("SubdistrictId", subdistrictId) :
                new ObjectParameter("SubdistrictId", typeof(int));
    
            var titleIdParameter = titleId.HasValue ?
                new ObjectParameter("TitleId", titleId) :
                new ObjectParameter("TitleId", typeof(int));
    
            var organizeDetailParameter = organizeDetail != null ?
                new ObjectParameter("OrganizeDetail", organizeDetail) :
                new ObjectParameter("OrganizeDetail", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrganizeAcademy_Update_Result>("usp_OrganizeAcademy_Update", organizeIdParameter, organizeTypeIdParameter, address1Parameter, address2Parameter, subdistrictIdParameter, titleIdParameter, organizeDetailParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_CheckDuplicate_OrganizeAcademy_Select_Result> usp_CheckDuplicate_OrganizeAcademy_Select(Nullable<int> organizeTypeId, Nullable<int> titleId, string subDistrictId, string keyWord, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var organizeTypeIdParameter = organizeTypeId.HasValue ?
                new ObjectParameter("OrganizeTypeId", organizeTypeId) :
                new ObjectParameter("OrganizeTypeId", typeof(int));
    
            var titleIdParameter = titleId.HasValue ?
                new ObjectParameter("TitleId", titleId) :
                new ObjectParameter("TitleId", typeof(int));
    
            var subDistrictIdParameter = subDistrictId != null ?
                new ObjectParameter("SubDistrictId", subDistrictId) :
                new ObjectParameter("SubDistrictId", typeof(string));
    
            var keyWordParameter = keyWord != null ?
                new ObjectParameter("KeyWord", keyWord) :
                new ObjectParameter("KeyWord", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CheckDuplicate_OrganizeAcademy_Select_Result>("usp_CheckDuplicate_OrganizeAcademy_Select", organizeTypeIdParameter, titleIdParameter, subDistrictIdParameter, keyWordParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_Zebra_Insert_Result> usp_Zebra_Insert(Nullable<int> companyId, string zebraCarNo, string carColor, Nullable<int> brandId, Nullable<int> modelId, string subModel, Nullable<bool> isNewCar, string plateNo, Nullable<int> plateProvinceId, string vINNo, string engineNo, Nullable<System.DateTime> pickupDate, Nullable<int> createdByUserId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var zebraCarNoParameter = zebraCarNo != null ?
                new ObjectParameter("ZebraCarNo", zebraCarNo) :
                new ObjectParameter("ZebraCarNo", typeof(string));
    
            var carColorParameter = carColor != null ?
                new ObjectParameter("CarColor", carColor) :
                new ObjectParameter("CarColor", typeof(string));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var modelIdParameter = modelId.HasValue ?
                new ObjectParameter("ModelId", modelId) :
                new ObjectParameter("ModelId", typeof(int));
    
            var subModelParameter = subModel != null ?
                new ObjectParameter("SubModel", subModel) :
                new ObjectParameter("SubModel", typeof(string));
    
            var isNewCarParameter = isNewCar.HasValue ?
                new ObjectParameter("IsNewCar", isNewCar) :
                new ObjectParameter("IsNewCar", typeof(bool));
    
            var plateNoParameter = plateNo != null ?
                new ObjectParameter("PlateNo", plateNo) :
                new ObjectParameter("PlateNo", typeof(string));
    
            var plateProvinceIdParameter = plateProvinceId.HasValue ?
                new ObjectParameter("PlateProvinceId", plateProvinceId) :
                new ObjectParameter("PlateProvinceId", typeof(int));
    
            var vINNoParameter = vINNo != null ?
                new ObjectParameter("VINNo", vINNo) :
                new ObjectParameter("VINNo", typeof(string));
    
            var engineNoParameter = engineNo != null ?
                new ObjectParameter("EngineNo", engineNo) :
                new ObjectParameter("EngineNo", typeof(string));
    
            var pickupDateParameter = pickupDate.HasValue ?
                new ObjectParameter("PickupDate", pickupDate) :
                new ObjectParameter("PickupDate", typeof(System.DateTime));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Zebra_Insert_Result>("usp_Zebra_Insert", companyIdParameter, zebraCarNoParameter, carColorParameter, brandIdParameter, modelIdParameter, subModelParameter, isNewCarParameter, plateNoParameter, plateProvinceIdParameter, vINNoParameter, engineNoParameter, pickupDateParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_ZebraBrand_Select_Result> usp_ZebraBrand_Select(Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ZebraBrand_Select_Result>("usp_ZebraBrand_Select", indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ZebraModel_Select_Result> usp_ZebraModel_Select(string brandId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var brandIdParameter = brandId != null ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ZebraModel_Select_Result>("usp_ZebraModel_Select", brandIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ZebraOrganize_Select_Result> usp_ZebraOrganize_Select(Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ZebraOrganize_Select_Result>("usp_ZebraOrganize_Select", indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ZebraType_Select_Result> usp_ZebraType_Select(Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ZebraType_Select_Result>("usp_ZebraType_Select", indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_Zebra_Update_Result> usp_Zebra_Update(Nullable<int> zebraId, Nullable<int> companyId, string carColor, Nullable<int> brandId, Nullable<int> modelId, string subModel, Nullable<bool> isNewCar, string plateNo, Nullable<int> plateProvinceId, string engineNo, Nullable<System.DateTime> pickupDate, Nullable<int> createdByUserId)
        {
            var zebraIdParameter = zebraId.HasValue ?
                new ObjectParameter("ZebraId", zebraId) :
                new ObjectParameter("ZebraId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var carColorParameter = carColor != null ?
                new ObjectParameter("CarColor", carColor) :
                new ObjectParameter("CarColor", typeof(string));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var modelIdParameter = modelId.HasValue ?
                new ObjectParameter("ModelId", modelId) :
                new ObjectParameter("ModelId", typeof(int));
    
            var subModelParameter = subModel != null ?
                new ObjectParameter("SubModel", subModel) :
                new ObjectParameter("SubModel", typeof(string));
    
            var isNewCarParameter = isNewCar.HasValue ?
                new ObjectParameter("IsNewCar", isNewCar) :
                new ObjectParameter("IsNewCar", typeof(bool));
    
            var plateNoParameter = plateNo != null ?
                new ObjectParameter("PlateNo", plateNo) :
                new ObjectParameter("PlateNo", typeof(string));
    
            var plateProvinceIdParameter = plateProvinceId.HasValue ?
                new ObjectParameter("PlateProvinceId", plateProvinceId) :
                new ObjectParameter("PlateProvinceId", typeof(int));
    
            var engineNoParameter = engineNo != null ?
                new ObjectParameter("EngineNo", engineNo) :
                new ObjectParameter("EngineNo", typeof(string));
    
            var pickupDateParameter = pickupDate.HasValue ?
                new ObjectParameter("PickupDate", pickupDate) :
                new ObjectParameter("PickupDate", typeof(System.DateTime));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Zebra_Update_Result>("usp_Zebra_Update", zebraIdParameter, companyIdParameter, carColorParameter, brandIdParameter, modelIdParameter, subModelParameter, isNewCarParameter, plateNoParameter, plateProvinceIdParameter, engineNoParameter, pickupDateParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_ZebraCar_Select_Result> usp_ZebraCar_Select(Nullable<int> zebraId, Nullable<int> zebraTypeId, Nullable<bool> isActive, Nullable<bool> isOwner, string employeeCode, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var zebraIdParameter = zebraId.HasValue ?
                new ObjectParameter("ZebraId", zebraId) :
                new ObjectParameter("ZebraId", typeof(int));
    
            var zebraTypeIdParameter = zebraTypeId.HasValue ?
                new ObjectParameter("ZebraTypeId", zebraTypeId) :
                new ObjectParameter("ZebraTypeId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isOwnerParameter = isOwner.HasValue ?
                new ObjectParameter("IsOwner", isOwner) :
                new ObjectParameter("IsOwner", typeof(bool));
    
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ZebraCar_Select_Result>("usp_ZebraCar_Select", zebraIdParameter, zebraTypeIdParameter, isActiveParameter, isOwnerParameter, employeeCodeParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ZebraOwner_Insert_Result> usp_ZebraOwner_Insert(Nullable<int> zebraId, Nullable<int> zebraTypeId, Nullable<System.DateTime> applyDate, string ownerEmployee_Code, Nullable<int> createdByUserId, string remark)
        {
            var zebraIdParameter = zebraId.HasValue ?
                new ObjectParameter("ZebraId", zebraId) :
                new ObjectParameter("ZebraId", typeof(int));
    
            var zebraTypeIdParameter = zebraTypeId.HasValue ?
                new ObjectParameter("ZebraTypeId", zebraTypeId) :
                new ObjectParameter("ZebraTypeId", typeof(int));
    
            var applyDateParameter = applyDate.HasValue ?
                new ObjectParameter("ApplyDate", applyDate) :
                new ObjectParameter("ApplyDate", typeof(System.DateTime));
    
            var ownerEmployee_CodeParameter = ownerEmployee_Code != null ?
                new ObjectParameter("OwnerEmployee_Code", ownerEmployee_Code) :
                new ObjectParameter("OwnerEmployee_Code", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ZebraOwner_Insert_Result>("usp_ZebraOwner_Insert", zebraIdParameter, zebraTypeIdParameter, applyDateParameter, ownerEmployee_CodeParameter, createdByUserIdParameter, remarkParameter);
        }
    
        public virtual ObjectResult<usp_ZebraStatus_Update_Result> usp_ZebraStatus_Update(Nullable<int> zebraId, Nullable<bool> isActive, Nullable<int> createdByUserId)
        {
            var zebraIdParameter = zebraId.HasValue ?
                new ObjectParameter("ZebraId", zebraId) :
                new ObjectParameter("ZebraId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ZebraStatus_Update_Result>("usp_ZebraStatus_Update", zebraIdParameter, isActiveParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_ZebraTransaction_Select_Result> usp_ZebraTransaction_Select(Nullable<int> zebraId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var zebraIdParameter = zebraId.HasValue ?
                new ObjectParameter("ZebraId", zebraId) :
                new ObjectParameter("ZebraId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ZebraTransaction_Select_Result>("usp_ZebraTransaction_Select", zebraIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ZebraTransactionDetail_Select_Result> usp_ZebraTransactionDetail_Select(Nullable<int> zebraTransactionId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var zebraTransactionIdParameter = zebraTransactionId.HasValue ?
                new ObjectParameter("ZebraTransactionId", zebraTransactionId) :
                new ObjectParameter("ZebraTransactionId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ZebraTransactionDetail_Select_Result>("usp_ZebraTransactionDetail_Select", zebraTransactionIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_PersonForManagement_Select_Result> usp_PersonForManagement_Select(Nullable<int> personId, Nullable<int> personTypeId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            var personTypeIdParameter = personTypeId.HasValue ?
                new ObjectParameter("PersonTypeId", personTypeId) :
                new ObjectParameter("PersonTypeId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonForManagement_Select_Result>("usp_PersonForManagement_Select", personIdParameter, personTypeIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual ObjectResult<usp_ZebraOwner_Select_Result> usp_ZebraOwner_Select(Nullable<int> zebraTypeId, Nullable<bool> isOwner, string employeeCode, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var zebraTypeIdParameter = zebraTypeId.HasValue ?
                new ObjectParameter("ZebraTypeId", zebraTypeId) :
                new ObjectParameter("ZebraTypeId", typeof(int));
    
            var isOwnerParameter = isOwner.HasValue ?
                new ObjectParameter("IsOwner", isOwner) :
                new ObjectParameter("IsOwner", typeof(bool));
    
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ZebraOwner_Select_Result>("usp_ZebraOwner_Select", zebraTypeIdParameter, isOwnerParameter, employeeCodeParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ZebraOwnerConfirm_Select_Result> usp_ZebraOwnerConfirm_Select(Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ZebraOwnerConfirm_Select_Result>("usp_ZebraOwnerConfirm_Select", indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ZebraOwner_Update_Result> usp_ZebraOwner_Update(string zebraID_list, Nullable<int> createByUserId)
        {
            var zebraID_listParameter = zebraID_list != null ?
                new ObjectParameter("ZebraID_list", zebraID_list) :
                new ObjectParameter("ZebraID_list", typeof(string));
    
            var createByUserIdParameter = createByUserId.HasValue ?
                new ObjectParameter("CreateByUserId", createByUserId) :
                new ObjectParameter("CreateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ZebraOwner_Update_Result>("usp_ZebraOwner_Update", zebraID_listParameter, createByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_PersonAddressByPersonId_Select_Result> usp_PersonAddressByPersonId_Select(Nullable<int> personId, Nullable<int> addressTypeId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            var addressTypeIdParameter = addressTypeId.HasValue ?
                new ObjectParameter("AddressTypeId", addressTypeId) :
                new ObjectParameter("AddressTypeId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonAddressByPersonId_Select_Result>("usp_PersonAddressByPersonId_Select", personIdParameter, addressTypeIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual ObjectResult<usp_PersonForManagementContact_Select_Result> usp_PersonForManagementContact_Select(Nullable<int> personId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonForManagementContact_Select_Result>("usp_PersonForManagementContact_Select", personIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual ObjectResult<usp_PersonForManagementByPersonId_Select_Result> usp_PersonForManagementByPersonId_Select(Nullable<int> personId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonForManagementByPersonId_Select_Result>("usp_PersonForManagementByPersonId_Select", personIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual ObjectResult<usp_Document_Select_Result> usp_Document_Select(Nullable<int> personId, string documentTypeIdList, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            var documentTypeIdListParameter = documentTypeIdList != null ?
                new ObjectParameter("DocumentTypeIdList", documentTypeIdList) :
                new ObjectParameter("DocumentTypeIdList", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Document_Select_Result>("usp_Document_Select", personIdParameter, documentTypeIdListParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_BloodType_Select_Result> usp_BloodType_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BloodType_Select_Result>("usp_BloodType_Select");
        }
    
        public virtual ObjectResult<usp_MaritalStatus_Select1_Result> usp_MaritalStatus_Select1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MaritalStatus_Select1_Result>("usp_MaritalStatus_Select1");
        }
    
        public virtual ObjectResult<usp_Occupation_Select1_Result> usp_Occupation_Select1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Occupation_Select1_Result>("usp_Occupation_Select1");
        }
    
        public virtual ObjectResult<usp_OccupationLevel_Select1_Result> usp_OccupationLevel_Select1(string occupationCode)
        {
            var occupationCodeParameter = occupationCode != null ?
                new ObjectParameter("OccupationCode", occupationCode) :
                new ObjectParameter("OccupationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OccupationLevel_Select1_Result>("usp_OccupationLevel_Select1", occupationCodeParameter);
        }
    
        public virtual ObjectResult<usp_Sex_Select1_Result> usp_Sex_Select1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Sex_Select1_Result>("usp_Sex_Select1");
        }
    
        public virtual ObjectResult<usp_AliveStatus_Select_Result> usp_AliveStatus_Select(Nullable<int> aliveStatusId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var aliveStatusIdParameter = aliveStatusId.HasValue ?
                new ObjectParameter("AliveStatusId", aliveStatusId) :
                new ObjectParameter("AliveStatusId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AliveStatus_Select_Result>("usp_AliveStatus_Select", aliveStatusIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual ObjectResult<usp_Nationality_Select_Result> usp_Nationality_Select(Nullable<int> nationalityId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var nationalityIdParameter = nationalityId.HasValue ?
                new ObjectParameter("NationalityId", nationalityId) :
                new ObjectParameter("NationalityId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Nationality_Select_Result>("usp_Nationality_Select", nationalityIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual ObjectResult<usp_Race_Select_Result> usp_Race_Select(Nullable<int> raceId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var raceIdParameter = raceId.HasValue ?
                new ObjectParameter("RaceId", raceId) :
                new ObjectParameter("RaceId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Race_Select_Result>("usp_Race_Select", raceIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual ObjectResult<usp_Religion_Select_Result> usp_Religion_Select(Nullable<int> religionId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var religionIdParameter = religionId.HasValue ?
                new ObjectParameter("ReligionId", religionId) :
                new ObjectParameter("ReligionId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Religion_Select_Result>("usp_Religion_Select", religionIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual ObjectResult<usp_PersonForManagementTransaction_Select_Result> usp_PersonForManagementTransaction_Select(Nullable<int> personId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonForManagementTransaction_Select_Result>("usp_PersonForManagementTransaction_Select", personIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual ObjectResult<usp_PersonForManagementTransactionDetail_Select_Result> usp_PersonForManagementTransactionDetail_Select(Nullable<int> personId, Nullable<int> transactionId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            var transactionIdParameter = transactionId.HasValue ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonForManagementTransactionDetail_Select_Result>("usp_PersonForManagementTransactionDetail_Select", personIdParameter, transactionIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual ObjectResult<usp_OccupationLevel_ByOccID_Select_Result> usp_OccupationLevel_ByOccID_Select(Nullable<int> occupationLevel_ID, Nullable<int> occupation_ID, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var occupationLevel_IDParameter = occupationLevel_ID.HasValue ?
                new ObjectParameter("OccupationLevel_ID", occupationLevel_ID) :
                new ObjectParameter("OccupationLevel_ID", typeof(int));
    
            var occupation_IDParameter = occupation_ID.HasValue ?
                new ObjectParameter("Occupation_ID", occupation_ID) :
                new ObjectParameter("Occupation_ID", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OccupationLevel_ByOccID_Select_Result>("usp_OccupationLevel_ByOccID_Select", occupationLevel_IDParameter, occupation_IDParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual ObjectResult<usp_PersonDetailForDatacenter_Update_Result> usp_PersonDetailForDatacenter_Update(Nullable<int> personId, Nullable<int> titleId, string firstName, string lastName, string nickName, Nullable<System.DateTime> birthDate, Nullable<double> weight, Nullable<double> height, Nullable<int> sexId, Nullable<int> maritalStatusId, Nullable<int> occupationLevelId, Nullable<int> aliveStatusId, Nullable<int> raceId, Nullable<int> nationalityId, Nullable<int> religionId, Nullable<int> bloodTypeId, Nullable<decimal> salary, string medicalConditions, string disability, string identityCard, string passPort, string taxIdentification, string primaryPhone, string secondaryPhone, string otherPhone, string email, string facebook, string lineID, string youtubeID, string instagramID, string twitterID, string c_BuildingName, string c_VillageName, string c_No, string c_Moo, string c_Floor, string c_Room, string c_Soi, string c_Road, string c_SubDistrictCode, string c_ZipCode, string w_BuildingName, string w_VillageName, string w_No, string w_Moo, string w_Floor, string w_Room, string w_Soi, string w_Road, string w_SubDistrictCode, string w_ZipCode, string h_BuildingName, string h_VillageName, string h_No, string h_Moo, string h_Floor, string h_Room, string h_Soi, string h_Road, string h_SubDistrictCode, string h_ZipCode, Nullable<int> updateByUserId)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            var titleIdParameter = titleId.HasValue ?
                new ObjectParameter("TitleId", titleId) :
                new ObjectParameter("TitleId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var nickNameParameter = nickName != null ?
                new ObjectParameter("NickName", nickName) :
                new ObjectParameter("NickName", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(double));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(double));
    
            var sexIdParameter = sexId.HasValue ?
                new ObjectParameter("SexId", sexId) :
                new ObjectParameter("SexId", typeof(int));
    
            var maritalStatusIdParameter = maritalStatusId.HasValue ?
                new ObjectParameter("MaritalStatusId", maritalStatusId) :
                new ObjectParameter("MaritalStatusId", typeof(int));
    
            var occupationLevelIdParameter = occupationLevelId.HasValue ?
                new ObjectParameter("OccupationLevelId", occupationLevelId) :
                new ObjectParameter("OccupationLevelId", typeof(int));
    
            var aliveStatusIdParameter = aliveStatusId.HasValue ?
                new ObjectParameter("AliveStatusId", aliveStatusId) :
                new ObjectParameter("AliveStatusId", typeof(int));
    
            var raceIdParameter = raceId.HasValue ?
                new ObjectParameter("RaceId", raceId) :
                new ObjectParameter("RaceId", typeof(int));
    
            var nationalityIdParameter = nationalityId.HasValue ?
                new ObjectParameter("NationalityId", nationalityId) :
                new ObjectParameter("NationalityId", typeof(int));
    
            var religionIdParameter = religionId.HasValue ?
                new ObjectParameter("ReligionId", religionId) :
                new ObjectParameter("ReligionId", typeof(int));
    
            var bloodTypeIdParameter = bloodTypeId.HasValue ?
                new ObjectParameter("BloodTypeId", bloodTypeId) :
                new ObjectParameter("BloodTypeId", typeof(int));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(decimal));
    
            var medicalConditionsParameter = medicalConditions != null ?
                new ObjectParameter("MedicalConditions", medicalConditions) :
                new ObjectParameter("MedicalConditions", typeof(string));
    
            var disabilityParameter = disability != null ?
                new ObjectParameter("Disability", disability) :
                new ObjectParameter("Disability", typeof(string));
    
            var identityCardParameter = identityCard != null ?
                new ObjectParameter("IdentityCard", identityCard) :
                new ObjectParameter("IdentityCard", typeof(string));
    
            var passPortParameter = passPort != null ?
                new ObjectParameter("PassPort", passPort) :
                new ObjectParameter("PassPort", typeof(string));
    
            var taxIdentificationParameter = taxIdentification != null ?
                new ObjectParameter("TaxIdentification", taxIdentification) :
                new ObjectParameter("TaxIdentification", typeof(string));
    
            var primaryPhoneParameter = primaryPhone != null ?
                new ObjectParameter("PrimaryPhone", primaryPhone) :
                new ObjectParameter("PrimaryPhone", typeof(string));
    
            var secondaryPhoneParameter = secondaryPhone != null ?
                new ObjectParameter("SecondaryPhone", secondaryPhone) :
                new ObjectParameter("SecondaryPhone", typeof(string));
    
            var otherPhoneParameter = otherPhone != null ?
                new ObjectParameter("OtherPhone", otherPhone) :
                new ObjectParameter("OtherPhone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var facebookParameter = facebook != null ?
                new ObjectParameter("Facebook", facebook) :
                new ObjectParameter("Facebook", typeof(string));
    
            var lineIDParameter = lineID != null ?
                new ObjectParameter("LineID", lineID) :
                new ObjectParameter("LineID", typeof(string));
    
            var youtubeIDParameter = youtubeID != null ?
                new ObjectParameter("YoutubeID", youtubeID) :
                new ObjectParameter("YoutubeID", typeof(string));
    
            var instagramIDParameter = instagramID != null ?
                new ObjectParameter("InstagramID", instagramID) :
                new ObjectParameter("InstagramID", typeof(string));
    
            var twitterIDParameter = twitterID != null ?
                new ObjectParameter("TwitterID", twitterID) :
                new ObjectParameter("TwitterID", typeof(string));
    
            var c_BuildingNameParameter = c_BuildingName != null ?
                new ObjectParameter("C_BuildingName", c_BuildingName) :
                new ObjectParameter("C_BuildingName", typeof(string));
    
            var c_VillageNameParameter = c_VillageName != null ?
                new ObjectParameter("C_VillageName", c_VillageName) :
                new ObjectParameter("C_VillageName", typeof(string));
    
            var c_NoParameter = c_No != null ?
                new ObjectParameter("C_No", c_No) :
                new ObjectParameter("C_No", typeof(string));
    
            var c_MooParameter = c_Moo != null ?
                new ObjectParameter("C_Moo", c_Moo) :
                new ObjectParameter("C_Moo", typeof(string));
    
            var c_FloorParameter = c_Floor != null ?
                new ObjectParameter("C_Floor", c_Floor) :
                new ObjectParameter("C_Floor", typeof(string));
    
            var c_RoomParameter = c_Room != null ?
                new ObjectParameter("C_Room", c_Room) :
                new ObjectParameter("C_Room", typeof(string));
    
            var c_SoiParameter = c_Soi != null ?
                new ObjectParameter("C_Soi", c_Soi) :
                new ObjectParameter("C_Soi", typeof(string));
    
            var c_RoadParameter = c_Road != null ?
                new ObjectParameter("C_Road", c_Road) :
                new ObjectParameter("C_Road", typeof(string));
    
            var c_SubDistrictCodeParameter = c_SubDistrictCode != null ?
                new ObjectParameter("C_SubDistrictCode", c_SubDistrictCode) :
                new ObjectParameter("C_SubDistrictCode", typeof(string));
    
            var c_ZipCodeParameter = c_ZipCode != null ?
                new ObjectParameter("C_ZipCode", c_ZipCode) :
                new ObjectParameter("C_ZipCode", typeof(string));
    
            var w_BuildingNameParameter = w_BuildingName != null ?
                new ObjectParameter("W_BuildingName", w_BuildingName) :
                new ObjectParameter("W_BuildingName", typeof(string));
    
            var w_VillageNameParameter = w_VillageName != null ?
                new ObjectParameter("W_VillageName", w_VillageName) :
                new ObjectParameter("W_VillageName", typeof(string));
    
            var w_NoParameter = w_No != null ?
                new ObjectParameter("W_No", w_No) :
                new ObjectParameter("W_No", typeof(string));
    
            var w_MooParameter = w_Moo != null ?
                new ObjectParameter("W_Moo", w_Moo) :
                new ObjectParameter("W_Moo", typeof(string));
    
            var w_FloorParameter = w_Floor != null ?
                new ObjectParameter("W_Floor", w_Floor) :
                new ObjectParameter("W_Floor", typeof(string));
    
            var w_RoomParameter = w_Room != null ?
                new ObjectParameter("W_Room", w_Room) :
                new ObjectParameter("W_Room", typeof(string));
    
            var w_SoiParameter = w_Soi != null ?
                new ObjectParameter("W_Soi", w_Soi) :
                new ObjectParameter("W_Soi", typeof(string));
    
            var w_RoadParameter = w_Road != null ?
                new ObjectParameter("W_Road", w_Road) :
                new ObjectParameter("W_Road", typeof(string));
    
            var w_SubDistrictCodeParameter = w_SubDistrictCode != null ?
                new ObjectParameter("W_SubDistrictCode", w_SubDistrictCode) :
                new ObjectParameter("W_SubDistrictCode", typeof(string));
    
            var w_ZipCodeParameter = w_ZipCode != null ?
                new ObjectParameter("W_ZipCode", w_ZipCode) :
                new ObjectParameter("W_ZipCode", typeof(string));
    
            var h_BuildingNameParameter = h_BuildingName != null ?
                new ObjectParameter("H_BuildingName", h_BuildingName) :
                new ObjectParameter("H_BuildingName", typeof(string));
    
            var h_VillageNameParameter = h_VillageName != null ?
                new ObjectParameter("H_VillageName", h_VillageName) :
                new ObjectParameter("H_VillageName", typeof(string));
    
            var h_NoParameter = h_No != null ?
                new ObjectParameter("H_No", h_No) :
                new ObjectParameter("H_No", typeof(string));
    
            var h_MooParameter = h_Moo != null ?
                new ObjectParameter("H_Moo", h_Moo) :
                new ObjectParameter("H_Moo", typeof(string));
    
            var h_FloorParameter = h_Floor != null ?
                new ObjectParameter("H_Floor", h_Floor) :
                new ObjectParameter("H_Floor", typeof(string));
    
            var h_RoomParameter = h_Room != null ?
                new ObjectParameter("H_Room", h_Room) :
                new ObjectParameter("H_Room", typeof(string));
    
            var h_SoiParameter = h_Soi != null ?
                new ObjectParameter("H_Soi", h_Soi) :
                new ObjectParameter("H_Soi", typeof(string));
    
            var h_RoadParameter = h_Road != null ?
                new ObjectParameter("H_Road", h_Road) :
                new ObjectParameter("H_Road", typeof(string));
    
            var h_SubDistrictCodeParameter = h_SubDistrictCode != null ?
                new ObjectParameter("H_SubDistrictCode", h_SubDistrictCode) :
                new ObjectParameter("H_SubDistrictCode", typeof(string));
    
            var h_ZipCodeParameter = h_ZipCode != null ?
                new ObjectParameter("H_ZipCode", h_ZipCode) :
                new ObjectParameter("H_ZipCode", typeof(string));
    
            var updateByUserIdParameter = updateByUserId.HasValue ?
                new ObjectParameter("UpdateByUserId", updateByUserId) :
                new ObjectParameter("UpdateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonDetailForDatacenter_Update_Result>("usp_PersonDetailForDatacenter_Update", personIdParameter, titleIdParameter, firstNameParameter, lastNameParameter, nickNameParameter, birthDateParameter, weightParameter, heightParameter, sexIdParameter, maritalStatusIdParameter, occupationLevelIdParameter, aliveStatusIdParameter, raceIdParameter, nationalityIdParameter, religionIdParameter, bloodTypeIdParameter, salaryParameter, medicalConditionsParameter, disabilityParameter, identityCardParameter, passPortParameter, taxIdentificationParameter, primaryPhoneParameter, secondaryPhoneParameter, otherPhoneParameter, emailParameter, facebookParameter, lineIDParameter, youtubeIDParameter, instagramIDParameter, twitterIDParameter, c_BuildingNameParameter, c_VillageNameParameter, c_NoParameter, c_MooParameter, c_FloorParameter, c_RoomParameter, c_SoiParameter, c_RoadParameter, c_SubDistrictCodeParameter, c_ZipCodeParameter, w_BuildingNameParameter, w_VillageNameParameter, w_NoParameter, w_MooParameter, w_FloorParameter, w_RoomParameter, w_SoiParameter, w_RoadParameter, w_SubDistrictCodeParameter, w_ZipCodeParameter, h_BuildingNameParameter, h_VillageNameParameter, h_NoParameter, h_MooParameter, h_FloorParameter, h_RoomParameter, h_SoiParameter, h_RoadParameter, h_SubDistrictCodeParameter, h_ZipCodeParameter, updateByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_Document_Insert_Result> usp_Document_Insert(Nullable<int> personId, string documentTypeIdList, string remark, Nullable<int> createByUserId)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            var documentTypeIdListParameter = documentTypeIdList != null ?
                new ObjectParameter("DocumentTypeIdList", documentTypeIdList) :
                new ObjectParameter("DocumentTypeIdList", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createByUserIdParameter = createByUserId.HasValue ?
                new ObjectParameter("CreateByUserId", createByUserId) :
                new ObjectParameter("CreateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Document_Insert_Result>("usp_Document_Insert", personIdParameter, documentTypeIdListParameter, remarkParameter, createByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_AspUserRolesImport_Insert_Result> usp_AspUserRolesImport_Insert(Nullable<int> createdByUserId, string remark)
        {
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AspUserRolesImport_Insert_Result>("usp_AspUserRolesImport_Insert", createdByUserIdParameter, remarkParameter);
        }
    
        public virtual ObjectResult<usp_AspUserRolesTmpImport_Delete_Result> usp_AspUserRolesTmpImport_Delete(Nullable<int> createdByUserId)
        {
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AspUserRolesTmpImport_Delete_Result>("usp_AspUserRolesTmpImport_Delete", createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_AspUserRolesTmpImport_Insert_Result> usp_AspUserRolesTmpImport_Insert(string roleName, string userName, Nullable<int> createdByUserId)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AspUserRolesTmpImport_Insert_Result>("usp_AspUserRolesTmpImport_Insert", roleNameParameter, userNameParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_AspUserRolesTmpImport_Validate_Result> usp_AspUserRolesTmpImport_Validate(Nullable<int> createdByUserId)
        {
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AspUserRolesTmpImport_Validate_Result>("usp_AspUserRolesTmpImport_Validate", createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_AspNetUserRolesTransaction_Select_Result> usp_AspNetUserRolesTransaction_Select(Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AspNetUserRolesTransaction_Select_Result>("usp_AspNetUserRolesTransaction_Select", indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_AspNetUserRolesTransactionDetail_Select_Result> usp_AspNetUserRolesTransactionDetail_Select(Nullable<int> aspNetUserRolesTransactionId, Nullable<bool> isUpdate, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var aspNetUserRolesTransactionIdParameter = aspNetUserRolesTransactionId.HasValue ?
                new ObjectParameter("AspNetUserRolesTransactionId", aspNetUserRolesTransactionId) :
                new ObjectParameter("AspNetUserRolesTransactionId", typeof(int));
    
            var isUpdateParameter = isUpdate.HasValue ?
                new ObjectParameter("IsUpdate", isUpdate) :
                new ObjectParameter("IsUpdate", typeof(bool));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AspNetUserRolesTransactionDetail_Select_Result>("usp_AspNetUserRolesTransactionDetail_Select", aspNetUserRolesTransactionIdParameter, isUpdateParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_AspUserRolesImportUndo_Update_Result> usp_AspUserRolesImportUndo_Update(Nullable<int> aspNetUserRolesTransactionId, Nullable<int> updatedByUserId)
        {
            var aspNetUserRolesTransactionIdParameter = aspNetUserRolesTransactionId.HasValue ?
                new ObjectParameter("AspNetUserRolesTransactionId", aspNetUserRolesTransactionId) :
                new ObjectParameter("AspNetUserRolesTransactionId", typeof(int));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AspUserRolesImportUndo_Update_Result>("usp_AspUserRolesImportUndo_Update", aspNetUserRolesTransactionIdParameter, updatedByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_CustomerApplicationRelatePerson_Select_Result> usp_CustomerApplicationRelatePerson_Select(Nullable<int> personId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("personId", personId) :
                new ObjectParameter("personId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerApplicationRelatePerson_Select_Result>("usp_CustomerApplicationRelatePerson_Select", personIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_AspNetUsersDetailByUsername_Select_Result> usp_AspNetUsersDetailByUsername_Select(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AspNetUsersDetailByUsername_Select_Result>("usp_AspNetUsersDetailByUsername_Select", userNameParameter);
        }
    
        public virtual ObjectResult<usp_OrganizeTransaction_Select_Result> usp_OrganizeTransaction_Select(Nullable<int> organizeId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrganizeTransaction_Select_Result>("usp_OrganizeTransaction_Select", organizeIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_OrganizeTransactionDetail_Select_Result> usp_OrganizeTransactionDetail_Select(Nullable<int> organizeTransactionId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var organizeTransactionIdParameter = organizeTransactionId.HasValue ?
                new ObjectParameter("OrganizeTransactionId", organizeTransactionId) :
                new ObjectParameter("OrganizeTransactionId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrganizeTransactionDetail_Select_Result>("usp_OrganizeTransactionDetail_Select", organizeTransactionIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_DocumentOrganize_Select_Result> usp_DocumentOrganize_Select(Nullable<int> referenceId, string documentTypeIdList, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var referenceIdParameter = referenceId.HasValue ?
                new ObjectParameter("ReferenceId", referenceId) :
                new ObjectParameter("ReferenceId", typeof(int));
    
            var documentTypeIdListParameter = documentTypeIdList != null ?
                new ObjectParameter("DocumentTypeIdList", documentTypeIdList) :
                new ObjectParameter("DocumentTypeIdList", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DocumentOrganize_Select_Result>("usp_DocumentOrganize_Select", referenceIdParameter, documentTypeIdListParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_OrganizeWorkPlace_Select_Result> usp_OrganizeWorkPlace_Select(Nullable<int> organizeGroupId, Nullable<int> organizeTypeId, Nullable<int> provinceId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail, Nullable<int> organizeSubTypeId)
        {
            var organizeGroupIdParameter = organizeGroupId.HasValue ?
                new ObjectParameter("OrganizeGroupId", organizeGroupId) :
                new ObjectParameter("OrganizeGroupId", typeof(int));
    
            var organizeTypeIdParameter = organizeTypeId.HasValue ?
                new ObjectParameter("OrganizeTypeId", organizeTypeId) :
                new ObjectParameter("OrganizeTypeId", typeof(int));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            var organizeSubTypeIdParameter = organizeSubTypeId.HasValue ?
                new ObjectParameter("OrganizeSubTypeId", organizeSubTypeId) :
                new ObjectParameter("OrganizeSubTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrganizeWorkPlace_Select_Result>("usp_OrganizeWorkPlace_Select", organizeGroupIdParameter, organizeTypeIdParameter, provinceIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter, organizeSubTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_CheckDuplicateOrganizeV2_Select_Result> usp_CheckDuplicateOrganizeV2_Select(string subDistrictId, Nullable<int> organizeTypeId, Nullable<int> organizeSubTypeId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var subDistrictIdParameter = subDistrictId != null ?
                new ObjectParameter("SubDistrictId", subDistrictId) :
                new ObjectParameter("SubDistrictId", typeof(string));
    
            var organizeTypeIdParameter = organizeTypeId.HasValue ?
                new ObjectParameter("OrganizeTypeId", organizeTypeId) :
                new ObjectParameter("OrganizeTypeId", typeof(int));
    
            var organizeSubTypeIdParameter = organizeSubTypeId.HasValue ?
                new ObjectParameter("OrganizeSubTypeId", organizeSubTypeId) :
                new ObjectParameter("OrganizeSubTypeId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CheckDuplicateOrganizeV2_Select_Result>("usp_CheckDuplicateOrganizeV2_Select", subDistrictIdParameter, organizeTypeIdParameter, organizeSubTypeIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_OrganizeDetailByOrganizeId_Select_Result> usp_OrganizeDetailByOrganizeId_Select(Nullable<int> organizeId)
        {
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrganizeDetailByOrganizeId_Select_Result>("usp_OrganizeDetailByOrganizeId_Select", organizeIdParameter);
        }
    
        public virtual ObjectResult<usp_OrganizeV3_Insert_Result> usp_OrganizeV3_Insert(Nullable<int> organizeTypeId, string organizeDetail, string buildingName, string villageName, string no, string moo, string floor, string soi, string road, string subDistrictCode, string zipCode, Nullable<int> createByUserId, Nullable<int> organizeSubTypeId, string taxNumber)
        {
            var organizeTypeIdParameter = organizeTypeId.HasValue ?
                new ObjectParameter("OrganizeTypeId", organizeTypeId) :
                new ObjectParameter("OrganizeTypeId", typeof(int));
    
            var organizeDetailParameter = organizeDetail != null ?
                new ObjectParameter("OrganizeDetail", organizeDetail) :
                new ObjectParameter("OrganizeDetail", typeof(string));
    
            var buildingNameParameter = buildingName != null ?
                new ObjectParameter("BuildingName", buildingName) :
                new ObjectParameter("BuildingName", typeof(string));
    
            var villageNameParameter = villageName != null ?
                new ObjectParameter("VillageName", villageName) :
                new ObjectParameter("VillageName", typeof(string));
    
            var noParameter = no != null ?
                new ObjectParameter("No", no) :
                new ObjectParameter("No", typeof(string));
    
            var mooParameter = moo != null ?
                new ObjectParameter("Moo", moo) :
                new ObjectParameter("Moo", typeof(string));
    
            var floorParameter = floor != null ?
                new ObjectParameter("Floor", floor) :
                new ObjectParameter("Floor", typeof(string));
    
            var soiParameter = soi != null ?
                new ObjectParameter("Soi", soi) :
                new ObjectParameter("Soi", typeof(string));
    
            var roadParameter = road != null ?
                new ObjectParameter("Road", road) :
                new ObjectParameter("Road", typeof(string));
    
            var subDistrictCodeParameter = subDistrictCode != null ?
                new ObjectParameter("SubDistrictCode", subDistrictCode) :
                new ObjectParameter("SubDistrictCode", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var createByUserIdParameter = createByUserId.HasValue ?
                new ObjectParameter("CreateByUserId", createByUserId) :
                new ObjectParameter("CreateByUserId", typeof(int));
    
            var organizeSubTypeIdParameter = organizeSubTypeId.HasValue ?
                new ObjectParameter("OrganizeSubTypeId", organizeSubTypeId) :
                new ObjectParameter("OrganizeSubTypeId", typeof(int));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrganizeV3_Insert_Result>("usp_OrganizeV3_Insert", organizeTypeIdParameter, organizeDetailParameter, buildingNameParameter, villageNameParameter, noParameter, mooParameter, floorParameter, soiParameter, roadParameter, subDistrictCodeParameter, zipCodeParameter, createByUserIdParameter, organizeSubTypeIdParameter, taxNumberParameter);
        }
    
        public virtual ObjectResult<usp_DocumentOrganize_Insert_Result> usp_DocumentOrganize_Insert(Nullable<int> referenceId, string documentTypeIdList, string remark, Nullable<int> createByUserId)
        {
            var referenceIdParameter = referenceId.HasValue ?
                new ObjectParameter("ReferenceId", referenceId) :
                new ObjectParameter("ReferenceId", typeof(int));
    
            var documentTypeIdListParameter = documentTypeIdList != null ?
                new ObjectParameter("DocumentTypeIdList", documentTypeIdList) :
                new ObjectParameter("DocumentTypeIdList", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createByUserIdParameter = createByUserId.HasValue ?
                new ObjectParameter("CreateByUserId", createByUserId) :
                new ObjectParameter("CreateByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DocumentOrganize_Insert_Result>("usp_DocumentOrganize_Insert", referenceIdParameter, documentTypeIdListParameter, remarkParameter, createByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_OrganizeContact_Select_Result> usp_OrganizeContact_Select(Nullable<int> organizeId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrganizeContact_Select_Result>("usp_OrganizeContact_Select", organizeIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_OrganizeV3_Update_Result> usp_OrganizeV3_Update(Nullable<int> organizeId, Nullable<int> organizeTypeId, string organizeDetail, string buildingName, string villageName, string no, string moo, string floor, string soi, string road, string subDistrictCode, string zipCode, Nullable<int> createByUserId, Nullable<int> organizeSubTypeId, string taxNumber)
        {
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            var organizeTypeIdParameter = organizeTypeId.HasValue ?
                new ObjectParameter("OrganizeTypeId", organizeTypeId) :
                new ObjectParameter("OrganizeTypeId", typeof(int));
    
            var organizeDetailParameter = organizeDetail != null ?
                new ObjectParameter("OrganizeDetail", organizeDetail) :
                new ObjectParameter("OrganizeDetail", typeof(string));
    
            var buildingNameParameter = buildingName != null ?
                new ObjectParameter("BuildingName", buildingName) :
                new ObjectParameter("BuildingName", typeof(string));
    
            var villageNameParameter = villageName != null ?
                new ObjectParameter("VillageName", villageName) :
                new ObjectParameter("VillageName", typeof(string));
    
            var noParameter = no != null ?
                new ObjectParameter("No", no) :
                new ObjectParameter("No", typeof(string));
    
            var mooParameter = moo != null ?
                new ObjectParameter("Moo", moo) :
                new ObjectParameter("Moo", typeof(string));
    
            var floorParameter = floor != null ?
                new ObjectParameter("Floor", floor) :
                new ObjectParameter("Floor", typeof(string));
    
            var soiParameter = soi != null ?
                new ObjectParameter("Soi", soi) :
                new ObjectParameter("Soi", typeof(string));
    
            var roadParameter = road != null ?
                new ObjectParameter("Road", road) :
                new ObjectParameter("Road", typeof(string));
    
            var subDistrictCodeParameter = subDistrictCode != null ?
                new ObjectParameter("SubDistrictCode", subDistrictCode) :
                new ObjectParameter("SubDistrictCode", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var createByUserIdParameter = createByUserId.HasValue ?
                new ObjectParameter("CreateByUserId", createByUserId) :
                new ObjectParameter("CreateByUserId", typeof(int));
    
            var organizeSubTypeIdParameter = organizeSubTypeId.HasValue ?
                new ObjectParameter("OrganizeSubTypeId", organizeSubTypeId) :
                new ObjectParameter("OrganizeSubTypeId", typeof(int));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrganizeV3_Update_Result>("usp_OrganizeV3_Update", organizeIdParameter, organizeTypeIdParameter, organizeDetailParameter, buildingNameParameter, villageNameParameter, noParameter, mooParameter, floorParameter, soiParameter, roadParameter, subDistrictCodeParameter, zipCodeParameter, createByUserIdParameter, organizeSubTypeIdParameter, taxNumberParameter);
        }
    
        public virtual ObjectResult<usp_OrganizeAcademyV2_Insert_Result> usp_OrganizeAcademyV2_Insert(Nullable<int> organizeTypeId, Nullable<int> titleId, string organizeDetail, string buildingName, string villageName, string no, string moo, string floor, string soi, string road, string subDistrictCode, string zipCode, Nullable<int> createdByUserId)
        {
            var organizeTypeIdParameter = organizeTypeId.HasValue ?
                new ObjectParameter("OrganizeTypeId", organizeTypeId) :
                new ObjectParameter("OrganizeTypeId", typeof(int));
    
            var titleIdParameter = titleId.HasValue ?
                new ObjectParameter("TitleId", titleId) :
                new ObjectParameter("TitleId", typeof(int));
    
            var organizeDetailParameter = organizeDetail != null ?
                new ObjectParameter("OrganizeDetail", organizeDetail) :
                new ObjectParameter("OrganizeDetail", typeof(string));
    
            var buildingNameParameter = buildingName != null ?
                new ObjectParameter("BuildingName", buildingName) :
                new ObjectParameter("BuildingName", typeof(string));
    
            var villageNameParameter = villageName != null ?
                new ObjectParameter("VillageName", villageName) :
                new ObjectParameter("VillageName", typeof(string));
    
            var noParameter = no != null ?
                new ObjectParameter("No", no) :
                new ObjectParameter("No", typeof(string));
    
            var mooParameter = moo != null ?
                new ObjectParameter("Moo", moo) :
                new ObjectParameter("Moo", typeof(string));
    
            var floorParameter = floor != null ?
                new ObjectParameter("Floor", floor) :
                new ObjectParameter("Floor", typeof(string));
    
            var soiParameter = soi != null ?
                new ObjectParameter("Soi", soi) :
                new ObjectParameter("Soi", typeof(string));
    
            var roadParameter = road != null ?
                new ObjectParameter("Road", road) :
                new ObjectParameter("Road", typeof(string));
    
            var subDistrictCodeParameter = subDistrictCode != null ?
                new ObjectParameter("SubDistrictCode", subDistrictCode) :
                new ObjectParameter("SubDistrictCode", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrganizeAcademyV2_Insert_Result>("usp_OrganizeAcademyV2_Insert", organizeTypeIdParameter, titleIdParameter, organizeDetailParameter, buildingNameParameter, villageNameParameter, noParameter, mooParameter, floorParameter, soiParameter, roadParameter, subDistrictCodeParameter, zipCodeParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_OrganizeAcademyV2_Update_Result> usp_OrganizeAcademyV2_Update(Nullable<int> organizeId, Nullable<int> organizeTypeId, Nullable<int> titleId, string organizeDetail, string buildingName, string villageName, string no, string moo, string floor, string soi, string road, string subDistrictCode, string zipCode, Nullable<int> createdByUserId)
        {
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            var organizeTypeIdParameter = organizeTypeId.HasValue ?
                new ObjectParameter("OrganizeTypeId", organizeTypeId) :
                new ObjectParameter("OrganizeTypeId", typeof(int));
    
            var titleIdParameter = titleId.HasValue ?
                new ObjectParameter("TitleId", titleId) :
                new ObjectParameter("TitleId", typeof(int));
    
            var organizeDetailParameter = organizeDetail != null ?
                new ObjectParameter("OrganizeDetail", organizeDetail) :
                new ObjectParameter("OrganizeDetail", typeof(string));
    
            var buildingNameParameter = buildingName != null ?
                new ObjectParameter("BuildingName", buildingName) :
                new ObjectParameter("BuildingName", typeof(string));
    
            var villageNameParameter = villageName != null ?
                new ObjectParameter("VillageName", villageName) :
                new ObjectParameter("VillageName", typeof(string));
    
            var noParameter = no != null ?
                new ObjectParameter("No", no) :
                new ObjectParameter("No", typeof(string));
    
            var mooParameter = moo != null ?
                new ObjectParameter("Moo", moo) :
                new ObjectParameter("Moo", typeof(string));
    
            var floorParameter = floor != null ?
                new ObjectParameter("Floor", floor) :
                new ObjectParameter("Floor", typeof(string));
    
            var soiParameter = soi != null ?
                new ObjectParameter("Soi", soi) :
                new ObjectParameter("Soi", typeof(string));
    
            var roadParameter = road != null ?
                new ObjectParameter("Road", road) :
                new ObjectParameter("Road", typeof(string));
    
            var subDistrictCodeParameter = subDistrictCode != null ?
                new ObjectParameter("SubDistrictCode", subDistrictCode) :
                new ObjectParameter("SubDistrictCode", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrganizeAcademyV2_Update_Result>("usp_OrganizeAcademyV2_Update", organizeIdParameter, organizeTypeIdParameter, titleIdParameter, organizeDetailParameter, buildingNameParameter, villageNameParameter, noParameter, mooParameter, floorParameter, soiParameter, roadParameter, subDistrictCodeParameter, zipCodeParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_OrganizeContact_Upsert_Result> usp_OrganizeContact_Upsert(Nullable<int> organizeId, string primaryPhone, string secondaryPhone, string otherPhone, string email, string lineId, string facebookId, string twitterId, string instragramId, string youtubeId, Nullable<int> createdByUserId)
        {
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            var primaryPhoneParameter = primaryPhone != null ?
                new ObjectParameter("PrimaryPhone", primaryPhone) :
                new ObjectParameter("PrimaryPhone", typeof(string));
    
            var secondaryPhoneParameter = secondaryPhone != null ?
                new ObjectParameter("SecondaryPhone", secondaryPhone) :
                new ObjectParameter("SecondaryPhone", typeof(string));
    
            var otherPhoneParameter = otherPhone != null ?
                new ObjectParameter("OtherPhone", otherPhone) :
                new ObjectParameter("OtherPhone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var lineIdParameter = lineId != null ?
                new ObjectParameter("LineId", lineId) :
                new ObjectParameter("LineId", typeof(string));
    
            var facebookIdParameter = facebookId != null ?
                new ObjectParameter("FacebookId", facebookId) :
                new ObjectParameter("FacebookId", typeof(string));
    
            var twitterIdParameter = twitterId != null ?
                new ObjectParameter("TwitterId", twitterId) :
                new ObjectParameter("TwitterId", typeof(string));
    
            var instragramIdParameter = instragramId != null ?
                new ObjectParameter("InstragramId", instragramId) :
                new ObjectParameter("InstragramId", typeof(string));
    
            var youtubeIdParameter = youtubeId != null ?
                new ObjectParameter("YoutubeId", youtubeId) :
                new ObjectParameter("YoutubeId", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrganizeContact_Upsert_Result>("usp_OrganizeContact_Upsert", organizeIdParameter, primaryPhoneParameter, secondaryPhoneParameter, otherPhoneParameter, emailParameter, lineIdParameter, facebookIdParameter, twitterIdParameter, instragramIdParameter, youtubeIdParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_API_Branch_Select_Result> usp_API_Branch_Select(Nullable<int> branchId, Nullable<int> areaId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_API_Branch_Select_Result>("usp_API_Branch_Select", branchIdParameter, areaIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ValidateToken_V2_Result> usp_ValidateToken_V2(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ValidateToken_V2_Result>("usp_ValidateToken_V2", usernameParameter);
        }
    
        public virtual ObjectResult<usp_PersonDetailForSMSProfile_Update_Result> usp_PersonDetailForSMSProfile_Update(string personIdList, Nullable<int> toPersonId, Nullable<int> titleId, string firstName, string lastName, string identityCard, Nullable<System.DateTime> birthdate, string primaryPhone, string secondaryPhone, string email, string lineID, string documentCode, Nullable<int> updatedByUserId)
        {
            var personIdListParameter = personIdList != null ?
                new ObjectParameter("PersonIdList", personIdList) :
                new ObjectParameter("PersonIdList", typeof(string));
    
            var toPersonIdParameter = toPersonId.HasValue ?
                new ObjectParameter("ToPersonId", toPersonId) :
                new ObjectParameter("ToPersonId", typeof(int));
    
            var titleIdParameter = titleId.HasValue ?
                new ObjectParameter("TitleId", titleId) :
                new ObjectParameter("TitleId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var identityCardParameter = identityCard != null ?
                new ObjectParameter("IdentityCard", identityCard) :
                new ObjectParameter("IdentityCard", typeof(string));
    
            var birthdateParameter = birthdate.HasValue ?
                new ObjectParameter("Birthdate", birthdate) :
                new ObjectParameter("Birthdate", typeof(System.DateTime));
    
            var primaryPhoneParameter = primaryPhone != null ?
                new ObjectParameter("PrimaryPhone", primaryPhone) :
                new ObjectParameter("PrimaryPhone", typeof(string));
    
            var secondaryPhoneParameter = secondaryPhone != null ?
                new ObjectParameter("SecondaryPhone", secondaryPhone) :
                new ObjectParameter("SecondaryPhone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var lineIDParameter = lineID != null ?
                new ObjectParameter("LineID", lineID) :
                new ObjectParameter("LineID", typeof(string));
    
            var documentCodeParameter = documentCode != null ?
                new ObjectParameter("DocumentCode", documentCode) :
                new ObjectParameter("DocumentCode", typeof(string));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonDetailForSMSProfile_Update_Result>("usp_PersonDetailForSMSProfile_Update", personIdListParameter, toPersonIdParameter, titleIdParameter, firstNameParameter, lastNameParameter, identityCardParameter, birthdateParameter, primaryPhoneParameter, secondaryPhoneParameter, emailParameter, lineIDParameter, documentCodeParameter, updatedByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_OrganizeTypeXOrganizeSubType_Select_Result> usp_OrganizeTypeXOrganizeSubType_Select(Nullable<int> organizeTypeId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var organizeTypeIdParameter = organizeTypeId.HasValue ?
                new ObjectParameter("OrganizeTypeId", organizeTypeId) :
                new ObjectParameter("OrganizeTypeId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrganizeTypeXOrganizeSubType_Select_Result>("usp_OrganizeTypeXOrganizeSubType_Select", organizeTypeIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_PersonTransaction_SelectV2_Result> usp_PersonTransaction_SelectV2(Nullable<int> personId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonTransaction_SelectV2_Result>("usp_PersonTransaction_SelectV2", personIdParameter, dateFromParameter, dateToParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_PersonTransactionDetail_SelectV2_Result> usp_PersonTransactionDetail_SelectV2(Nullable<int> transactionId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var transactionIdParameter = transactionId.HasValue ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonTransactionDetail_SelectV2_Result>("usp_PersonTransactionDetail_SelectV2", transactionIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_PersonTransactionRelateMotor_Select_Result> usp_PersonTransactionRelateMotor_Select(Nullable<int> personId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonTransactionRelateMotor_Select_Result>("usp_PersonTransactionRelateMotor_Select", personIdParameter, dateFromParameter, dateToParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_Report_PersonTransaction_Select_Result> usp_Report_PersonTransaction_Select(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Report_PersonTransaction_Select_Result>("usp_Report_PersonTransaction_Select", dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_Report_PersonTransactionRelateMotor_Select_Result> usp_Report_PersonTransactionRelateMotor_Select(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Report_PersonTransactionRelateMotor_Select_Result>("usp_Report_PersonTransactionRelateMotor_Select", dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_GetPersonContactByPersonId_Select_Result> usp_GetPersonContactByPersonId_Select(Nullable<int> personId)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPersonContactByPersonId_Select_Result>("usp_GetPersonContactByPersonId_Select", personIdParameter);
        }
    
        public virtual ObjectResult<usp_OrganizeWorkplaceSearch_Select_Result> usp_OrganizeWorkplaceSearch_Select(Nullable<int> subDisTrictId, string organizeDetail, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var subDisTrictIdParameter = subDisTrictId.HasValue ?
                new ObjectParameter("SubDisTrictId", subDisTrictId) :
                new ObjectParameter("SubDisTrictId", typeof(int));
    
            var organizeDetailParameter = organizeDetail != null ?
                new ObjectParameter("OrganizeDetail", organizeDetail) :
                new ObjectParameter("OrganizeDetail", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrganizeWorkplaceSearch_Select_Result>("usp_OrganizeWorkplaceSearch_Select", subDisTrictIdParameter, organizeDetailParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_PersonDetailForContact_Update_Result> usp_PersonDetailForContact_Update(Nullable<int> personId, string primaryPhone, string secondaryPhone, string email, string lineID, string facebook, string youtubeID, string instagramID, string twitterID, Nullable<int> updatedByUserId)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            var primaryPhoneParameter = primaryPhone != null ?
                new ObjectParameter("PrimaryPhone", primaryPhone) :
                new ObjectParameter("PrimaryPhone", typeof(string));
    
            var secondaryPhoneParameter = secondaryPhone != null ?
                new ObjectParameter("SecondaryPhone", secondaryPhone) :
                new ObjectParameter("SecondaryPhone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var lineIDParameter = lineID != null ?
                new ObjectParameter("LineID", lineID) :
                new ObjectParameter("LineID", typeof(string));
    
            var facebookParameter = facebook != null ?
                new ObjectParameter("Facebook", facebook) :
                new ObjectParameter("Facebook", typeof(string));
    
            var youtubeIDParameter = youtubeID != null ?
                new ObjectParameter("YoutubeID", youtubeID) :
                new ObjectParameter("YoutubeID", typeof(string));
    
            var instagramIDParameter = instagramID != null ?
                new ObjectParameter("InstagramID", instagramID) :
                new ObjectParameter("InstagramID", typeof(string));
    
            var twitterIDParameter = twitterID != null ?
                new ObjectParameter("TwitterID", twitterID) :
                new ObjectParameter("TwitterID", typeof(string));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PersonDetailForContact_Update_Result>("usp_PersonDetailForContact_Update", personIdParameter, primaryPhoneParameter, secondaryPhoneParameter, emailParameter, lineIDParameter, facebookParameter, youtubeIDParameter, instagramIDParameter, twitterIDParameter, updatedByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_OrganizeFromApiBM_Insert_Result> usp_OrganizeFromApiBM_Insert(Nullable<int> organizeTypeId, string organizeDetail, string buildingName, string villageName, string no, string moo, string floor, string soi, string road, string subDistrictCode, string zipCode, string createByUserCode, Nullable<int> organizeSubTypeId, string taxNumber)
        {
            var organizeTypeIdParameter = organizeTypeId.HasValue ?
                new ObjectParameter("OrganizeTypeId", organizeTypeId) :
                new ObjectParameter("OrganizeTypeId", typeof(int));
    
            var organizeDetailParameter = organizeDetail != null ?
                new ObjectParameter("OrganizeDetail", organizeDetail) :
                new ObjectParameter("OrganizeDetail", typeof(string));
    
            var buildingNameParameter = buildingName != null ?
                new ObjectParameter("BuildingName", buildingName) :
                new ObjectParameter("BuildingName", typeof(string));
    
            var villageNameParameter = villageName != null ?
                new ObjectParameter("VillageName", villageName) :
                new ObjectParameter("VillageName", typeof(string));
    
            var noParameter = no != null ?
                new ObjectParameter("No", no) :
                new ObjectParameter("No", typeof(string));
    
            var mooParameter = moo != null ?
                new ObjectParameter("Moo", moo) :
                new ObjectParameter("Moo", typeof(string));
    
            var floorParameter = floor != null ?
                new ObjectParameter("Floor", floor) :
                new ObjectParameter("Floor", typeof(string));
    
            var soiParameter = soi != null ?
                new ObjectParameter("Soi", soi) :
                new ObjectParameter("Soi", typeof(string));
    
            var roadParameter = road != null ?
                new ObjectParameter("Road", road) :
                new ObjectParameter("Road", typeof(string));
    
            var subDistrictCodeParameter = subDistrictCode != null ?
                new ObjectParameter("SubDistrictCode", subDistrictCode) :
                new ObjectParameter("SubDistrictCode", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var createByUserCodeParameter = createByUserCode != null ?
                new ObjectParameter("CreateByUserCode", createByUserCode) :
                new ObjectParameter("CreateByUserCode", typeof(string));
    
            var organizeSubTypeIdParameter = organizeSubTypeId.HasValue ?
                new ObjectParameter("OrganizeSubTypeId", organizeSubTypeId) :
                new ObjectParameter("OrganizeSubTypeId", typeof(int));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrganizeFromApiBM_Insert_Result>("usp_OrganizeFromApiBM_Insert", organizeTypeIdParameter, organizeDetailParameter, buildingNameParameter, villageNameParameter, noParameter, mooParameter, floorParameter, soiParameter, roadParameter, subDistrictCodeParameter, zipCodeParameter, createByUserCodeParameter, organizeSubTypeIdParameter, taxNumberParameter);
        }
    
        public virtual ObjectResult<usp_API_PersonBankAccount_Select_Result> usp_API_PersonBankAccount_Select(Nullable<System.Guid> person_guid, Nullable<int> bankId, string accountNo, Nullable<bool> isBankDirectDebit)
        {
            var person_guidParameter = person_guid.HasValue ?
                new ObjectParameter("Person_guid", person_guid) :
                new ObjectParameter("Person_guid", typeof(System.Guid));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var isBankDirectDebitParameter = isBankDirectDebit.HasValue ?
                new ObjectParameter("IsBankDirectDebit", isBankDirectDebit) :
                new ObjectParameter("IsBankDirectDebit", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_API_PersonBankAccount_Select_Result>("usp_API_PersonBankAccount_Select", person_guidParameter, bankIdParameter, accountNoParameter, isBankDirectDebitParameter);
        }
    
        public virtual ObjectResult<usp_API_PersonByCardDetail_Select_Result> usp_API_PersonByCardDetail_Select(Nullable<int> cardTypeId, string cardDetail)
        {
            var cardTypeIdParameter = cardTypeId.HasValue ?
                new ObjectParameter("CardTypeId", cardTypeId) :
                new ObjectParameter("CardTypeId", typeof(int));
    
            var cardDetailParameter = cardDetail != null ?
                new ObjectParameter("CardDetail", cardDetail) :
                new ObjectParameter("CardDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_API_PersonByCardDetail_Select_Result>("usp_API_PersonByCardDetail_Select", cardTypeIdParameter, cardDetailParameter);
        }
    
        public virtual ObjectResult<usp_API_PersonByPersonGUID_Select_Result> usp_API_PersonByPersonGUID_Select(Nullable<System.Guid> personGUID)
        {
            var personGUIDParameter = personGUID.HasValue ?
                new ObjectParameter("PersonGUID", personGUID) :
                new ObjectParameter("PersonGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_API_PersonByPersonGUID_Select_Result>("usp_API_PersonByPersonGUID_Select", personGUIDParameter);
        }
    
        public virtual ObjectResult<usp_API_ProductGroup_Select_Result> usp_API_ProductGroup_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_API_ProductGroup_Select_Result>("usp_API_ProductGroup_Select");
        }
    
        public virtual ObjectResult<usp_API_ProductPackage_Select_Result> usp_API_ProductPackage_Select(Nullable<int> productPackageDisplayId, Nullable<int> productPackageId, Nullable<System.DateTime> startCoverDate, Nullable<System.DateTime> birthDate, Nullable<int> genderId)
        {
            var productPackageDisplayIdParameter = productPackageDisplayId.HasValue ?
                new ObjectParameter("ProductPackageDisplayId", productPackageDisplayId) :
                new ObjectParameter("ProductPackageDisplayId", typeof(int));
    
            var productPackageIdParameter = productPackageId.HasValue ?
                new ObjectParameter("ProductPackageId", productPackageId) :
                new ObjectParameter("ProductPackageId", typeof(int));
    
            var startCoverDateParameter = startCoverDate.HasValue ?
                new ObjectParameter("StartCoverDate", startCoverDate) :
                new ObjectParameter("StartCoverDate", typeof(System.DateTime));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var genderIdParameter = genderId.HasValue ?
                new ObjectParameter("GenderId", genderId) :
                new ObjectParameter("GenderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_API_ProductPackage_Select_Result>("usp_API_ProductPackage_Select", productPackageDisplayIdParameter, productPackageIdParameter, startCoverDateParameter, birthDateParameter, genderIdParameter);
        }
    
        public virtual ObjectResult<usp_API_ProductPackageXProduct_Select_Result> usp_API_ProductPackageXProduct_Select(Nullable<int> productPackageId)
        {
            var productPackageIdParameter = productPackageId.HasValue ?
                new ObjectParameter("ProductPackageId", productPackageId) :
                new ObjectParameter("ProductPackageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_API_ProductPackageXProduct_Select_Result>("usp_API_ProductPackageXProduct_Select", productPackageIdParameter);
        }
    
        public virtual ObjectResult<usp_API_ProductPackageXPayPeriodType_Select_Result> usp_API_ProductPackageXPayPeriodType_Select(Nullable<int> productPackageId)
        {
            var productPackageIdParameter = productPackageId.HasValue ?
                new ObjectParameter("ProductPackageId", productPackageId) :
                new ObjectParameter("ProductPackageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_API_ProductPackageXPayPeriodType_Select_Result>("usp_API_ProductPackageXPayPeriodType_Select", productPackageIdParameter);
        }
    
        public virtual ObjectResult<usp_API_ProductPackageDisplay_Select_Result> usp_API_ProductPackageDisplay_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_API_ProductPackageDisplay_Select_Result>("usp_API_ProductPackageDisplay_Select");
        }
    
        public virtual ObjectResult<usp_API_ProductByProductGroupList_Select_Result> usp_API_ProductByProductGroupList_Select(string productGroupIdList)
        {
            var productGroupIdListParameter = productGroupIdList != null ?
                new ObjectParameter("ProductGroupIdList", productGroupIdList) :
                new ObjectParameter("ProductGroupIdList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_API_ProductByProductGroupList_Select_Result>("usp_API_ProductByProductGroupList_Select", productGroupIdListParameter);
        }
    
        public virtual ObjectResult<usp_API_ProductByProductTypeList_Select_Result> usp_API_ProductByProductTypeList_Select(string productTypeListId)
        {
            var productTypeListIdParameter = productTypeListId != null ?
                new ObjectParameter("ProductTypeListId", productTypeListId) :
                new ObjectParameter("ProductTypeListId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_API_ProductByProductTypeList_Select_Result>("usp_API_ProductByProductTypeList_Select", productTypeListIdParameter);
        }
    
        public virtual ObjectResult<usp_API_ProductType_Select_Result> usp_API_ProductType_Select(Nullable<int> productGroupId)
        {
            var productGroupIdParameter = productGroupId.HasValue ?
                new ObjectParameter("ProductGroupId", productGroupId) :
                new ObjectParameter("ProductGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_API_ProductType_Select_Result>("usp_API_ProductType_Select", productGroupIdParameter);
        }
    
        public virtual ObjectResult<usp_API_ProductByPeriodType_Select_Result> usp_API_ProductByPeriodType_Select(Nullable<int> productPackageId, Nullable<int> periodTypeId)
        {
            var productPackageIdParameter = productPackageId.HasValue ?
                new ObjectParameter("ProductPackageId", productPackageId) :
                new ObjectParameter("ProductPackageId", typeof(int));
    
            var periodTypeIdParameter = periodTypeId.HasValue ?
                new ObjectParameter("PeriodTypeId", periodTypeId) :
                new ObjectParameter("PeriodTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_API_ProductByPeriodType_Select_Result>("usp_API_ProductByPeriodType_Select", productPackageIdParameter, periodTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_API_ProductPHByPersonGUID_Select_Result> usp_API_ProductPHByPersonGUID_Select(Nullable<System.Guid> personGUID)
        {
            var personGUIDParameter = personGUID.HasValue ?
                new ObjectParameter("PersonGUID", personGUID) :
                new ObjectParameter("PersonGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_API_ProductPHByPersonGUID_Select_Result>("usp_API_ProductPHByPersonGUID_Select", personGUIDParameter);
        }
    
        public virtual ObjectResult<string> usp_API_GetIDCardByPersonId_Select(Nullable<int> userTypeId, string userCode)
        {
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_API_GetIDCardByPersonId_Select", userTypeIdParameter, userCodeParameter);
        }
    
        public virtual ObjectResult<usp_API_Employee_Select_Result> usp_API_Employee_Select(Nullable<int> branchId, string searchValue)
        {
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_API_Employee_Select_Result>("usp_API_Employee_Select", branchIdParameter, searchValueParameter);
        }
    
        public virtual ObjectResult<usp_API_Zebra_Select_Result> usp_API_Zebra_Select(string searchValue)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_API_Zebra_Select_Result>("usp_API_Zebra_Select", searchValueParameter);
        }
    
        public virtual ObjectResult<usp_API_Organize_Select_Result> usp_API_Organize_Select(Nullable<int> organizeTypeId, string searchValue)
        {
            var organizeTypeIdParameter = organizeTypeId.HasValue ?
                new ObjectParameter("OrganizeTypeId", organizeTypeId) :
                new ObjectParameter("OrganizeTypeId", typeof(int));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_API_Organize_Select_Result>("usp_API_Organize_Select", organizeTypeIdParameter, searchValueParameter);
        }
    
        public virtual ObjectResult<usp_API_JobDescriptionType_Select_Result> usp_API_JobDescriptionType_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_API_JobDescriptionType_Select_Result>("usp_API_JobDescriptionType_Select");
        }
    
        public virtual ObjectResult<usp_API_Occupation_Select_Result> usp_API_Occupation_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_API_Occupation_Select_Result>("usp_API_Occupation_Select");
        }
    
        public virtual ObjectResult<usp_API_OccupationLevel_Select_Result> usp_API_OccupationLevel_Select(Nullable<int> occupationId)
        {
            var occupationIdParameter = occupationId.HasValue ?
                new ObjectParameter("OccupationId", occupationId) :
                new ObjectParameter("OccupationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_API_OccupationLevel_Select_Result>("usp_API_OccupationLevel_Select", occupationIdParameter);
        }
    
        public virtual ObjectResult<usp_API_PersonDetailByPersonId_Select_Result> usp_API_PersonDetailByPersonId_Select(Nullable<int> personId)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_API_PersonDetailByPersonId_Select_Result>("usp_API_PersonDetailByPersonId_Select", personIdParameter);
        }
    
        public virtual ObjectResult<usp_API_OrganizeWorkplaceSearch_Select_Result> usp_API_OrganizeWorkplaceSearch_Select(Nullable<int> subDisTrictId, string organizeDetail, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var subDisTrictIdParameter = subDisTrictId.HasValue ?
                new ObjectParameter("SubDisTrictId", subDisTrictId) :
                new ObjectParameter("SubDisTrictId", typeof(int));
    
            var organizeDetailParameter = organizeDetail != null ?
                new ObjectParameter("OrganizeDetail", organizeDetail) :
                new ObjectParameter("OrganizeDetail", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_API_OrganizeWorkplaceSearch_Select_Result>("usp_API_OrganizeWorkplaceSearch_Select", subDisTrictIdParameter, organizeDetailParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_DirectorSubDistrict_Upsert_Result> usp_DirectorSubDistrict_Upsert(string subDistrictId, Nullable<int> userId, Nullable<int> createdByUserId)
        {
            var subDistrictIdParameter = subDistrictId != null ?
                new ObjectParameter("SubDistrictId", subDistrictId) :
                new ObjectParameter("SubDistrictId", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DirectorSubDistrict_Upsert_Result>("usp_DirectorSubDistrict_Upsert", subDistrictIdParameter, userIdParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_DirectorSubDistrict_Select_Result1> usp_DirectorSubDistrict_Select(string provinceId, string districtId, string subDistrictId, Nullable<int> branchId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var provinceIdParameter = provinceId != null ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(string));
    
            var districtIdParameter = districtId != null ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(string));
    
            var subDistrictIdParameter = subDistrictId != null ?
                new ObjectParameter("SubDistrictId", subDistrictId) :
                new ObjectParameter("SubDistrictId", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DirectorSubDistrict_Select_Result1>("usp_DirectorSubDistrict_Select", provinceIdParameter, districtIdParameter, subDistrictIdParameter, branchIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_DirectorSubDistrictLog_Select_Result> usp_DirectorSubDistrictLog_Select(string provinceId, string districtId, string subDistrictId, Nullable<int> branchId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var provinceIdParameter = provinceId != null ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(string));
    
            var districtIdParameter = districtId != null ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(string));
    
            var subDistrictIdParameter = subDistrictId != null ?
                new ObjectParameter("SubDistrictId", subDistrictId) :
                new ObjectParameter("SubDistrictId", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DirectorSubDistrictLog_Select_Result>("usp_DirectorSubDistrictLog_Select", provinceIdParameter, districtIdParameter, subDistrictIdParameter, branchIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_API_PersonRelationType_Select_Result> usp_API_PersonRelationType_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_API_PersonRelationType_Select_Result>("usp_API_PersonRelationType_Select");
        }
    
        public virtual ObjectResult<usp_API_PayMethodType_Select_Result> usp_API_PayMethodType_Select(Nullable<int> payMethodTypeId)
        {
            var payMethodTypeIdParameter = payMethodTypeId.HasValue ?
                new ObjectParameter("PayMethodTypeId", payMethodTypeId) :
                new ObjectParameter("PayMethodTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_API_PayMethodType_Select_Result>("usp_API_PayMethodType_Select", payMethodTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_API_PeriodType_Select_Result> usp_API_PeriodType_Select(Nullable<int> periodTypeID)
        {
            var periodTypeIDParameter = periodTypeID.HasValue ?
                new ObjectParameter("PeriodTypeID", periodTypeID) :
                new ObjectParameter("PeriodTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_API_PeriodType_Select_Result>("usp_API_PeriodType_Select", periodTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_ProspectCustomerProduct_Select_Result> usp_ProspectCustomerProduct_Select(Nullable<System.Guid> customerGUID)
        {
            var customerGUIDParameter = customerGUID.HasValue ?
                new ObjectParameter("CustomerGUID", customerGUID) :
                new ObjectParameter("CustomerGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProspectCustomerProduct_Select_Result>("usp_ProspectCustomerProduct_Select", customerGUIDParameter);
        }
    
        public virtual ObjectResult<usp_ProspectCustomer_Select_Result> usp_ProspectCustomer_Select(Nullable<int> searchIndex, string search, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var searchIndexParameter = searchIndex.HasValue ?
                new ObjectParameter("SearchIndex", searchIndex) :
                new ObjectParameter("SearchIndex", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProspectCustomer_Select_Result>("usp_ProspectCustomer_Select", searchIndexParameter, searchParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_API_BranchAddress_Select_Result> usp_API_BranchAddress_Select(Nullable<int> branchId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_API_BranchAddress_Select_Result>("usp_API_BranchAddress_Select", branchIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    }
}
