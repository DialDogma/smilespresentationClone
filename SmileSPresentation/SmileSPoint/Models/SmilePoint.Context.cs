//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmileSPoint.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SmilePointEntities : DbContext
    {
        public SmilePointEntities()
            : base("name=SmilePointEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<DeductImportDetail> DeductImportDetails { get; set; }
        public virtual DbSet<DeductImportHeader> DeductImportHeaders { get; set; }
        public virtual DbSet<ELMAH_Error> ELMAH_Error { get; set; }
        public virtual DbSet<PointAccount> PointAccounts { get; set; }
        public virtual DbSet<PointAccountType> PointAccountTypes { get; set; }
        public virtual DbSet<PreImportDetail> PreImportDetails { get; set; }
        public virtual DbSet<PreImportHeader> PreImportHeaders { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<TransactionGroup> TransactionGroups { get; set; }
        public virtual DbSet<TransactionStatu> TransactionStatus { get; set; }
        public virtual DbSet<TransactionType> TransactionTypes { get; set; }
        public virtual DbSet<vw_PersonUser> vw_PersonUser { get; set; }
    
        [DbFunction("SmilePointEntities", "func_GetDateRangeTable")]
        public virtual IQueryable<func_GetDateRangeTable_Result> func_GetDateRangeTable(Nullable<System.DateTime> start, Nullable<System.DateTime> end)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_GetDateRangeTable_Result>("[SmilePointEntities].[func_GetDateRangeTable](@Start, @End)", startParameter, endParameter);
        }
    
        [DbFunction("SmilePointEntities", "func_SplitStringToTable")]
        public virtual IQueryable<func_SplitStringToTable_Result> func_SplitStringToTable(string stringToSplit, string delimiter)
        {
            var stringToSplitParameter = stringToSplit != null ?
                new ObjectParameter("StringToSplit", stringToSplit) :
                new ObjectParameter("StringToSplit", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_SplitStringToTable_Result>("[SmilePointEntities].[func_SplitStringToTable](@StringToSplit, @Delimiter)", stringToSplitParameter, delimiterParameter);
        }
    
        public virtual ObjectResult<string> ELMAH_GetErrorsXml(string application, Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter totalCount)
        {
            var applicationParameter = application != null ?
                new ObjectParameter("Application", application) :
                new ObjectParameter("Application", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ELMAH_GetErrorsXml", applicationParameter, pageIndexParameter, pageSizeParameter, totalCount);
        }
    
        public virtual ObjectResult<string> ELMAH_GetErrorXml(string application, Nullable<System.Guid> errorId)
        {
            var applicationParameter = application != null ?
                new ObjectParameter("Application", application) :
                new ObjectParameter("Application", typeof(string));
    
            var errorIdParameter = errorId.HasValue ?
                new ObjectParameter("ErrorId", errorId) :
                new ObjectParameter("ErrorId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ELMAH_GetErrorXml", applicationParameter, errorIdParameter);
        }
    
        public virtual int ELMAH_LogError(Nullable<System.Guid> errorId, string application, string host, string type, string source, string message, string user, string allXml, Nullable<int> statusCode, Nullable<System.DateTime> timeUtc)
        {
            var errorIdParameter = errorId.HasValue ?
                new ObjectParameter("ErrorId", errorId) :
                new ObjectParameter("ErrorId", typeof(System.Guid));
    
            var applicationParameter = application != null ?
                new ObjectParameter("Application", application) :
                new ObjectParameter("Application", typeof(string));
    
            var hostParameter = host != null ?
                new ObjectParameter("Host", host) :
                new ObjectParameter("Host", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var allXmlParameter = allXml != null ?
                new ObjectParameter("AllXml", allXml) :
                new ObjectParameter("AllXml", typeof(string));
    
            var statusCodeParameter = statusCode.HasValue ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(int));
    
            var timeUtcParameter = timeUtc.HasValue ?
                new ObjectParameter("TimeUtc", timeUtc) :
                new ObjectParameter("TimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ELMAH_LogError", errorIdParameter, applicationParameter, hostParameter, typeParameter, sourceParameter, messageParameter, userParameter, allXmlParameter, statusCodeParameter, timeUtcParameter);
        }
    
        public virtual ObjectResult<SP_PointAccount_Datatable_Result> SP_PointAccount_Datatable(Nullable<int> pageStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var pageStartParameter = pageStart.HasValue ?
                new ObjectParameter("PageStart", pageStart) :
                new ObjectParameter("PageStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PointAccount_Datatable_Result>("SP_PointAccount_Datatable", pageStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual ObjectResult<SP_Transaction_Datatable_Result> SP_Transaction_Datatable(Nullable<int> pageStart, Nullable<int> pageSize, string sortField, string orderType, string search, Nullable<int> accountId)
        {
            var pageStartParameter = pageStart.HasValue ?
                new ObjectParameter("PageStart", pageStart) :
                new ObjectParameter("PageStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Transaction_Datatable_Result>("SP_Transaction_Datatable", pageStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter, accountIdParameter);
        }
    
        public virtual ObjectResult<SP_Transaction_Datatable_Search_Result> SP_Transaction_Datatable_Search(Nullable<int> pageStart, Nullable<int> pageSize, string sortField, string orderType, string search, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var pageStartParameter = pageStart.HasValue ?
                new ObjectParameter("PageStart", pageStart) :
                new ObjectParameter("PageStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Transaction_Datatable_Search_Result>("SP_Transaction_Datatable_Search", pageStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_CancelTransaction_Result> usp_CancelTransaction(Nullable<int> referencedCancelTransactionId, string remark, Nullable<int> createdBy)
        {
            var referencedCancelTransactionIdParameter = referencedCancelTransactionId.HasValue ?
                new ObjectParameter("ReferencedCancelTransactionId", referencedCancelTransactionId) :
                new ObjectParameter("ReferencedCancelTransactionId", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CancelTransaction_Result>("usp_CancelTransaction", referencedCancelTransactionIdParameter, remarkParameter, createdByParameter);
        }
    
        public virtual ObjectResult<usp_CreateTransaction_Result> usp_CreateTransaction(Nullable<int> pointAccountID, Nullable<int> transactionTypeId, Nullable<double> amount, string remark, Nullable<int> createdBy)
        {
            var pointAccountIDParameter = pointAccountID.HasValue ?
                new ObjectParameter("PointAccountID", pointAccountID) :
                new ObjectParameter("PointAccountID", typeof(int));
    
            var transactionTypeIdParameter = transactionTypeId.HasValue ?
                new ObjectParameter("TransactionTypeId", transactionTypeId) :
                new ObjectParameter("TransactionTypeId", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CreateTransaction_Result>("usp_CreateTransaction", pointAccountIDParameter, transactionTypeIdParameter, amountParameter, remarkParameter, createdByParameter);
        }
    
        public virtual int usp_DeductCreateTransaction(Nullable<int> deductImportDetailId, Nullable<int> createdById)
        {
            var deductImportDetailIdParameter = deductImportDetailId.HasValue ?
                new ObjectParameter("DeductImportDetailId", deductImportDetailId) :
                new ObjectParameter("DeductImportDetailId", typeof(int));
    
            var createdByIdParameter = createdById.HasValue ?
                new ObjectParameter("CreatedById", createdById) :
                new ObjectParameter("CreatedById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeductCreateTransaction", deductImportDetailIdParameter, createdByIdParameter);
        }
    
        public virtual ObjectResult<usp_DeductImport_Datatable_Result> usp_DeductImport_Datatable(Nullable<int> pageStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var pageStartParameter = pageStart.HasValue ?
                new ObjectParameter("PageStart", pageStart) :
                new ObjectParameter("PageStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DeductImport_Datatable_Result>("usp_DeductImport_Datatable", pageStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual ObjectResult<usp_DeductImportOverview_Result> usp_DeductImportOverview(Nullable<int> deductImportHeaderId)
        {
            var deductImportHeaderIdParameter = deductImportHeaderId.HasValue ?
                new ObjectParameter("DeductImportHeaderId", deductImportHeaderId) :
                new ObjectParameter("DeductImportHeaderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DeductImportOverview_Result>("usp_DeductImportOverview", deductImportHeaderIdParameter);
        }
    
        public virtual ObjectResult<usp_DeductImportResult_Result> usp_DeductImportResult(Nullable<int> deductImportHeaderId)
        {
            var deductImportHeaderIdParameter = deductImportHeaderId.HasValue ?
                new ObjectParameter("DeductImportHeaderId", deductImportHeaderId) :
                new ObjectParameter("DeductImportHeaderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DeductImportResult_Result>("usp_DeductImportResult", deductImportHeaderIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_DeductImportValidate(Nullable<int> deductImportHeaderId)
        {
            var deductImportHeaderIdParameter = deductImportHeaderId.HasValue ?
                new ObjectParameter("DeductImportHeaderId", deductImportHeaderId) :
                new ObjectParameter("DeductImportHeaderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_DeductImportValidate", deductImportHeaderIdParameter);
        }
    
        public virtual int usp_DeductUpdateHeader(Nullable<int> deductImportHeaderId)
        {
            var deductImportHeaderIdParameter = deductImportHeaderId.HasValue ?
                new ObjectParameter("DeductImportHeaderId", deductImportHeaderId) :
                new ObjectParameter("DeductImportHeaderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeductUpdateHeader", deductImportHeaderIdParameter);
        }
    
        public virtual ObjectResult<usp_PointAccount_Select_Result> usp_PointAccount_Select(Nullable<int> pointAccountTypeId, string referenceCode)
        {
            var pointAccountTypeIdParameter = pointAccountTypeId.HasValue ?
                new ObjectParameter("PointAccountTypeId", pointAccountTypeId) :
                new ObjectParameter("PointAccountTypeId", typeof(int));
    
            var referenceCodeParameter = referenceCode != null ?
                new ObjectParameter("ReferenceCode", referenceCode) :
                new ObjectParameter("ReferenceCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PointAccount_Select_Result>("usp_PointAccount_Select", pointAccountTypeIdParameter, referenceCodeParameter);
        }
    
        public virtual int usp_PointAccount_Synchronize_SSS(Nullable<int> createdById)
        {
            var createdByIdParameter = createdById.HasValue ?
                new ObjectParameter("CreatedById", createdById) :
                new ObjectParameter("CreatedById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PointAccount_Synchronize_SSS", createdByIdParameter);
        }
    
        public virtual ObjectResult<usp_PointTransaction_Select_Result> usp_PointTransaction_Select(Nullable<int> pointAccountTypeId, string referenceCode, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var pointAccountTypeIdParameter = pointAccountTypeId.HasValue ?
                new ObjectParameter("PointAccountTypeId", pointAccountTypeId) :
                new ObjectParameter("PointAccountTypeId", typeof(int));
    
            var referenceCodeParameter = referenceCode != null ?
                new ObjectParameter("ReferenceCode", referenceCode) :
                new ObjectParameter("ReferenceCode", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PointTransaction_Select_Result>("usp_PointTransaction_Select", pointAccountTypeIdParameter, referenceCodeParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_PreImportOverview_Result> usp_PreImportOverview(Nullable<int> preImportHeaderId)
        {
            var preImportHeaderIdParameter = preImportHeaderId.HasValue ?
                new ObjectParameter("PreImportHeaderId", preImportHeaderId) :
                new ObjectParameter("PreImportHeaderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PreImportOverview_Result>("usp_PreImportOverview", preImportHeaderIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_PreImportValidate(Nullable<int> preImportHeaderId)
        {
            var preImportHeaderIdParameter = preImportHeaderId.HasValue ?
                new ObjectParameter("PreImportHeaderId", preImportHeaderId) :
                new ObjectParameter("PreImportHeaderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_PreImportValidate", preImportHeaderIdParameter);
        }
    
        public virtual ObjectResult<usp_Report_Dashboard_PointRemainByAccountType_Result> usp_Report_Dashboard_PointRemainByAccountType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Report_Dashboard_PointRemainByAccountType_Result>("usp_Report_Dashboard_PointRemainByAccountType");
        }
    
        public virtual ObjectResult<usp_Report_Dashboard_TransactionByDate_Result> usp_Report_Dashboard_TransactionByDate(Nullable<int> increaseOrDecrease, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var increaseOrDecreaseParameter = increaseOrDecrease.HasValue ?
                new ObjectParameter("IncreaseOrDecrease", increaseOrDecrease) :
                new ObjectParameter("IncreaseOrDecrease", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Report_Dashboard_TransactionByDate_Result>("usp_Report_Dashboard_TransactionByDate", increaseOrDecreaseParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_ReportTransactionDetail_Result> usp_ReportTransactionDetail(Nullable<int> increaseOrDecreasePoint, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var increaseOrDecreasePointParameter = increaseOrDecreasePoint.HasValue ?
                new ObjectParameter("IncreaseOrDecreasePoint", increaseOrDecreasePoint) :
                new ObjectParameter("IncreaseOrDecreasePoint", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ReportTransactionDetail_Result>("usp_ReportTransactionDetail", increaseOrDecreasePointParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_Transaction_GetDetail_Result> usp_Transaction_GetDetail(Nullable<int> transactionId)
        {
            var transactionIdParameter = transactionId.HasValue ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Transaction_GetDetail_Result>("usp_Transaction_GetDetail", transactionIdParameter);
        }
    
        public virtual ObjectResult<usp_Transaction_GetTypeList_Result> usp_Transaction_GetTypeList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Transaction_GetTypeList_Result>("usp_Transaction_GetTypeList");
        }
    
        public virtual ObjectResult<AccountDetailResult> usp_GetAccountDetail(Nullable<int> pointAccountTypeId, string referenceCode)
        {
            var pointAccountTypeIdParameter = pointAccountTypeId.HasValue ?
                new ObjectParameter("PointAccountTypeId", pointAccountTypeId) :
                new ObjectParameter("PointAccountTypeId", typeof(int));
    
            var referenceCodeParameter = referenceCode != null ?
                new ObjectParameter("ReferenceCode", referenceCode) :
                new ObjectParameter("ReferenceCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountDetailResult>("usp_GetAccountDetail", pointAccountTypeIdParameter, referenceCodeParameter);
        }
    
        public virtual ObjectResult<AccountTransactionResult> usp_GetAccountTransaction(string pointAccountId)
        {
            var pointAccountIdParameter = pointAccountId != null ?
                new ObjectParameter("PointAccountId", pointAccountId) :
                new ObjectParameter("PointAccountId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountTransactionResult>("usp_GetAccountTransaction", pointAccountIdParameter);
        }
    
        public virtual ObjectResult<usp_CreateTransactionForAPI_Result> usp_CreateTransactionForAPI(Nullable<int> pointAccountID, Nullable<int> transactionTypeId, Nullable<double> amount, string remark, Nullable<int> createdBy, string merchantOrderId, string merchantEmpId)
        {
            var pointAccountIDParameter = pointAccountID.HasValue ?
                new ObjectParameter("PointAccountID", pointAccountID) :
                new ObjectParameter("PointAccountID", typeof(int));
    
            var transactionTypeIdParameter = transactionTypeId.HasValue ?
                new ObjectParameter("TransactionTypeId", transactionTypeId) :
                new ObjectParameter("TransactionTypeId", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var merchantOrderIdParameter = merchantOrderId != null ?
                new ObjectParameter("MerchantOrderId", merchantOrderId) :
                new ObjectParameter("MerchantOrderId", typeof(string));
    
            var merchantEmpIdParameter = merchantEmpId != null ?
                new ObjectParameter("MerchantEmpId", merchantEmpId) :
                new ObjectParameter("MerchantEmpId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CreateTransactionForAPI_Result>("usp_CreateTransactionForAPI", pointAccountIDParameter, transactionTypeIdParameter, amountParameter, remarkParameter, createdByParameter, merchantOrderIdParameter, merchantEmpIdParameter);
        }
    
        public virtual ObjectResult<usp_PointAccount_List_Result> usp_PointAccount_List(Nullable<int> pageStart)
        {
            var pageStartParameter = pageStart.HasValue ?
                new ObjectParameter("PageStart", pageStart) :
                new ObjectParameter("PageStart", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PointAccount_List_Result>("usp_PointAccount_List", pageStartParameter);
        }
    }
}
