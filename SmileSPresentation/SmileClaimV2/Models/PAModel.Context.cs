//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmileClaimV2.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SSSPAEntities : DbContext
    {
        public SSSPAEntities()
            : base("name=SSSPAEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<usp_BenefitCoverage_ByBenefitID_Select_Result> usp_BenefitCoverage_ByBenefitID_Select(string applicationID, string benefitID)
        {
            var applicationIDParameter = applicationID != null ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(string));
    
            var benefitIDParameter = benefitID != null ?
                new ObjectParameter("BenefitID", benefitID) :
                new ObjectParameter("BenefitID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BenefitCoverage_ByBenefitID_Select_Result>("usp_BenefitCoverage_ByBenefitID_Select", applicationIDParameter, benefitIDParameter);
        }
    
        public virtual ObjectResult<usp_CustomerSearch_PA_Select_Result> usp_CustomerSearch_PA_Select(string applicationID, Nullable<int> pageStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var applicationIDParameter = applicationID != null ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(string));
    
            var pageStartParameter = pageStart.HasValue ?
                new ObjectParameter("PageStart", pageStart) :
                new ObjectParameter("PageStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerSearch_PA_Select_Result>("usp_CustomerSearch_PA_Select", applicationIDParameter, pageStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual ObjectResult<string> usp_ClaimHeader_Insert(string customerDetail_id, string hospital_id, string claimType_id, string claimStyle_id, Nullable<System.DateTime> dateHappen, Nullable<System.DateTime> dateIn, Nullable<System.DateTime> dateOut, Nullable<System.DateTime> dateNotice, string product_id, string insuranceCompany_id, Nullable<bool> isContinueClaim, string continueFromClaim_id, string accidentCause_id, string accidentDetail, string chiefComplain_id, string iCD10_1, string iCD10_2, string iCD10_3, string remark, string status_id, string createdBy_id, string approvedBy_id, Nullable<System.DateTime> approvedDate, Nullable<bool> isExgratia, string denyCause_id, Nullable<double> amount_Total, Nullable<double> amount_Pay, Nullable<double> amount_UnPay, Nullable<double> amount_Compensate_in, Nullable<double> amount_Compensate_out, Nullable<double> amount_Compensate, Nullable<double> amount_Net, string unpay_Remark, string claimheaderGroup_id, string createdByBranch_id, string claimPayBy_id, string hospitalClaimInformCode, string insuranceCompany_Name)
        {
            var customerDetail_idParameter = customerDetail_id != null ?
                new ObjectParameter("CustomerDetail_id", customerDetail_id) :
                new ObjectParameter("CustomerDetail_id", typeof(string));
    
            var hospital_idParameter = hospital_id != null ?
                new ObjectParameter("Hospital_id", hospital_id) :
                new ObjectParameter("Hospital_id", typeof(string));
    
            var claimType_idParameter = claimType_id != null ?
                new ObjectParameter("ClaimType_id", claimType_id) :
                new ObjectParameter("ClaimType_id", typeof(string));
    
            var claimStyle_idParameter = claimStyle_id != null ?
                new ObjectParameter("ClaimStyle_id", claimStyle_id) :
                new ObjectParameter("ClaimStyle_id", typeof(string));
    
            var dateHappenParameter = dateHappen.HasValue ?
                new ObjectParameter("DateHappen", dateHappen) :
                new ObjectParameter("DateHappen", typeof(System.DateTime));
    
            var dateInParameter = dateIn.HasValue ?
                new ObjectParameter("DateIn", dateIn) :
                new ObjectParameter("DateIn", typeof(System.DateTime));
    
            var dateOutParameter = dateOut.HasValue ?
                new ObjectParameter("DateOut", dateOut) :
                new ObjectParameter("DateOut", typeof(System.DateTime));
    
            var dateNoticeParameter = dateNotice.HasValue ?
                new ObjectParameter("DateNotice", dateNotice) :
                new ObjectParameter("DateNotice", typeof(System.DateTime));
    
            var product_idParameter = product_id != null ?
                new ObjectParameter("Product_id", product_id) :
                new ObjectParameter("Product_id", typeof(string));
    
            var insuranceCompany_idParameter = insuranceCompany_id != null ?
                new ObjectParameter("InsuranceCompany_id", insuranceCompany_id) :
                new ObjectParameter("InsuranceCompany_id", typeof(string));
    
            var isContinueClaimParameter = isContinueClaim.HasValue ?
                new ObjectParameter("IsContinueClaim", isContinueClaim) :
                new ObjectParameter("IsContinueClaim", typeof(bool));
    
            var continueFromClaim_idParameter = continueFromClaim_id != null ?
                new ObjectParameter("ContinueFromClaim_id", continueFromClaim_id) :
                new ObjectParameter("ContinueFromClaim_id", typeof(string));
    
            var accidentCause_idParameter = accidentCause_id != null ?
                new ObjectParameter("AccidentCause_id", accidentCause_id) :
                new ObjectParameter("AccidentCause_id", typeof(string));
    
            var accidentDetailParameter = accidentDetail != null ?
                new ObjectParameter("AccidentDetail", accidentDetail) :
                new ObjectParameter("AccidentDetail", typeof(string));
    
            var chiefComplain_idParameter = chiefComplain_id != null ?
                new ObjectParameter("ChiefComplain_id", chiefComplain_id) :
                new ObjectParameter("ChiefComplain_id", typeof(string));
    
            var iCD10_1Parameter = iCD10_1 != null ?
                new ObjectParameter("ICD10_1", iCD10_1) :
                new ObjectParameter("ICD10_1", typeof(string));
    
            var iCD10_2Parameter = iCD10_2 != null ?
                new ObjectParameter("ICD10_2", iCD10_2) :
                new ObjectParameter("ICD10_2", typeof(string));
    
            var iCD10_3Parameter = iCD10_3 != null ?
                new ObjectParameter("ICD10_3", iCD10_3) :
                new ObjectParameter("ICD10_3", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var status_idParameter = status_id != null ?
                new ObjectParameter("Status_id", status_id) :
                new ObjectParameter("Status_id", typeof(string));
    
            var createdBy_idParameter = createdBy_id != null ?
                new ObjectParameter("CreatedBy_id", createdBy_id) :
                new ObjectParameter("CreatedBy_id", typeof(string));
    
            var approvedBy_idParameter = approvedBy_id != null ?
                new ObjectParameter("ApprovedBy_id", approvedBy_id) :
                new ObjectParameter("ApprovedBy_id", typeof(string));
    
            var approvedDateParameter = approvedDate.HasValue ?
                new ObjectParameter("ApprovedDate", approvedDate) :
                new ObjectParameter("ApprovedDate", typeof(System.DateTime));
    
            var isExgratiaParameter = isExgratia.HasValue ?
                new ObjectParameter("IsExgratia", isExgratia) :
                new ObjectParameter("IsExgratia", typeof(bool));
    
            var denyCause_idParameter = denyCause_id != null ?
                new ObjectParameter("DenyCause_id", denyCause_id) :
                new ObjectParameter("DenyCause_id", typeof(string));
    
            var amount_TotalParameter = amount_Total.HasValue ?
                new ObjectParameter("Amount_Total", amount_Total) :
                new ObjectParameter("Amount_Total", typeof(double));
    
            var amount_PayParameter = amount_Pay.HasValue ?
                new ObjectParameter("Amount_Pay", amount_Pay) :
                new ObjectParameter("Amount_Pay", typeof(double));
    
            var amount_UnPayParameter = amount_UnPay.HasValue ?
                new ObjectParameter("Amount_UnPay", amount_UnPay) :
                new ObjectParameter("Amount_UnPay", typeof(double));
    
            var amount_Compensate_inParameter = amount_Compensate_in.HasValue ?
                new ObjectParameter("Amount_Compensate_in", amount_Compensate_in) :
                new ObjectParameter("Amount_Compensate_in", typeof(double));
    
            var amount_Compensate_outParameter = amount_Compensate_out.HasValue ?
                new ObjectParameter("Amount_Compensate_out", amount_Compensate_out) :
                new ObjectParameter("Amount_Compensate_out", typeof(double));
    
            var amount_CompensateParameter = amount_Compensate.HasValue ?
                new ObjectParameter("Amount_Compensate", amount_Compensate) :
                new ObjectParameter("Amount_Compensate", typeof(double));
    
            var amount_NetParameter = amount_Net.HasValue ?
                new ObjectParameter("Amount_Net", amount_Net) :
                new ObjectParameter("Amount_Net", typeof(double));
    
            var unpay_RemarkParameter = unpay_Remark != null ?
                new ObjectParameter("Unpay_Remark", unpay_Remark) :
                new ObjectParameter("Unpay_Remark", typeof(string));
    
            var claimheaderGroup_idParameter = claimheaderGroup_id != null ?
                new ObjectParameter("ClaimheaderGroup_id", claimheaderGroup_id) :
                new ObjectParameter("ClaimheaderGroup_id", typeof(string));
    
            var createdByBranch_idParameter = createdByBranch_id != null ?
                new ObjectParameter("CreatedByBranch_id", createdByBranch_id) :
                new ObjectParameter("CreatedByBranch_id", typeof(string));
    
            var claimPayBy_idParameter = claimPayBy_id != null ?
                new ObjectParameter("ClaimPayBy_id", claimPayBy_id) :
                new ObjectParameter("ClaimPayBy_id", typeof(string));
    
            var hospitalClaimInformCodeParameter = hospitalClaimInformCode != null ?
                new ObjectParameter("HospitalClaimInformCode", hospitalClaimInformCode) :
                new ObjectParameter("HospitalClaimInformCode", typeof(string));
    
            var insuranceCompany_NameParameter = insuranceCompany_Name != null ?
                new ObjectParameter("InsuranceCompany_Name", insuranceCompany_Name) :
                new ObjectParameter("InsuranceCompany_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_ClaimHeader_Insert", customerDetail_idParameter, hospital_idParameter, claimType_idParameter, claimStyle_idParameter, dateHappenParameter, dateInParameter, dateOutParameter, dateNoticeParameter, product_idParameter, insuranceCompany_idParameter, isContinueClaimParameter, continueFromClaim_idParameter, accidentCause_idParameter, accidentDetailParameter, chiefComplain_idParameter, iCD10_1Parameter, iCD10_2Parameter, iCD10_3Parameter, remarkParameter, status_idParameter, createdBy_idParameter, approvedBy_idParameter, approvedDateParameter, isExgratiaParameter, denyCause_idParameter, amount_TotalParameter, amount_PayParameter, amount_UnPayParameter, amount_Compensate_inParameter, amount_Compensate_outParameter, amount_CompensateParameter, amount_NetParameter, unpay_RemarkParameter, claimheaderGroup_idParameter, createdByBranch_idParameter, claimPayBy_idParameter, hospitalClaimInformCodeParameter, insuranceCompany_NameParameter);
        }
    
        public virtual int usp_HCI_UpdateStatusClaimNotUse(string pClaimID)
        {
            var pClaimIDParameter = pClaimID != null ?
                new ObjectParameter("pClaimID", pClaimID) :
                new ObjectParameter("pClaimID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_HCI_UpdateStatusClaimNotUse", pClaimIDParameter);
        }
    
        public virtual ObjectResult<usp_AccidentCause_Select_Result> usp_AccidentCause_Select(Nullable<int> pageStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var pageStartParameter = pageStart.HasValue ?
                new ObjectParameter("PageStart", pageStart) :
                new ObjectParameter("PageStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AccidentCause_Select_Result>("usp_AccidentCause_Select", pageStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual ObjectResult<usp_CompanyAddress_Select_Result> usp_CompanyAddress_Select(string companyCode)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CompanyAddress_Select_Result>("usp_CompanyAddress_Select", companyCodeParameter);
        }
    
        public virtual ObjectResult<usp_ClaimHeader_PA_Select_Result> usp_ClaimHeader_PA_Select(string customerDetailCode, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var customerDetailCodeParameter = customerDetailCode != null ?
                new ObjectParameter("CustomerDetailCode", customerDetailCode) :
                new ObjectParameter("CustomerDetailCode", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimHeader_PA_Select_Result>("usp_ClaimHeader_PA_Select", customerDetailCodeParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_CustomerDetailForReportQuantity_Result> usp_CustomerDetailForReportQuantity(string application_id)
        {
            var application_idParameter = application_id != null ?
                new ObjectParameter("Application_id", application_id) :
                new ObjectParameter("Application_id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerDetailForReportQuantity_Result>("usp_CustomerDetailForReportQuantity", application_idParameter);
        }
    
        public virtual ObjectResult<usp_ClaimHeaderPAByStatus_Select_Result> usp_ClaimHeaderPAByStatus_Select(string claimHeader_Code)
        {
            var claimHeader_CodeParameter = claimHeader_Code != null ?
                new ObjectParameter("ClaimHeader_Code", claimHeader_Code) :
                new ObjectParameter("ClaimHeader_Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimHeaderPAByStatus_Select_Result>("usp_ClaimHeaderPAByStatus_Select", claimHeader_CodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_ClaimPARepeatedlyByCustomerDetail_id_Select(string customerDetail_id, Nullable<System.DateTime> dateIssue)
        {
            var customerDetail_idParameter = customerDetail_id != null ?
                new ObjectParameter("CustomerDetail_id", customerDetail_id) :
                new ObjectParameter("CustomerDetail_id", typeof(string));
    
            var dateIssueParameter = dateIssue.HasValue ?
                new ObjectParameter("DateIssue", dateIssue) :
                new ObjectParameter("DateIssue", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_ClaimPARepeatedlyByCustomerDetail_id_Select", customerDetail_idParameter, dateIssueParameter);
        }
    
        public virtual ObjectResult<usp_ApplicationSearch_Select_Result> usp_ApplicationSearch_Select(Nullable<int> applicationYear, string schoolID, string provinceID, string districtID, string branchiID, Nullable<int> pageStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var applicationYearParameter = applicationYear.HasValue ?
                new ObjectParameter("ApplicationYear", applicationYear) :
                new ObjectParameter("ApplicationYear", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var provinceIDParameter = provinceID != null ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(string));
    
            var districtIDParameter = districtID != null ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(string));
    
            var branchiIDParameter = branchiID != null ?
                new ObjectParameter("BranchiID", branchiID) :
                new ObjectParameter("BranchiID", typeof(string));
    
            var pageStartParameter = pageStart.HasValue ?
                new ObjectParameter("PageStart", pageStart) :
                new ObjectParameter("PageStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ApplicationSearch_Select_Result>("usp_ApplicationSearch_Select", applicationYearParameter, schoolIDParameter, provinceIDParameter, districtIDParameter, branchiIDParameter, pageStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual ObjectResult<usp_ClaimExportTransactionFail_Insert_Result> usp_ClaimExportTransactionFail_Insert(string claimCode, Nullable<int> tPAStatusId, Nullable<int> claimGroupTypeId, Nullable<int> sMIStatusId, string createdByUserCode, Nullable<System.DateTime> dateHappen)
        {
            var claimCodeParameter = claimCode != null ?
                new ObjectParameter("ClaimCode", claimCode) :
                new ObjectParameter("ClaimCode", typeof(string));
    
            var tPAStatusIdParameter = tPAStatusId.HasValue ?
                new ObjectParameter("TPAStatusId", tPAStatusId) :
                new ObjectParameter("TPAStatusId", typeof(int));
    
            var claimGroupTypeIdParameter = claimGroupTypeId.HasValue ?
                new ObjectParameter("ClaimGroupTypeId", claimGroupTypeId) :
                new ObjectParameter("ClaimGroupTypeId", typeof(int));
    
            var sMIStatusIdParameter = sMIStatusId.HasValue ?
                new ObjectParameter("SMIStatusId", sMIStatusId) :
                new ObjectParameter("SMIStatusId", typeof(int));
    
            var createdByUserCodeParameter = createdByUserCode != null ?
                new ObjectParameter("CreatedByUserCode", createdByUserCode) :
                new ObjectParameter("CreatedByUserCode", typeof(string));
    
            var dateHappenParameter = dateHappen.HasValue ?
                new ObjectParameter("DateHappen", dateHappen) :
                new ObjectParameter("DateHappen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimExportTransactionFail_Insert_Result>("usp_ClaimExportTransactionFail_Insert", claimCodeParameter, tPAStatusIdParameter, claimGroupTypeIdParameter, sMIStatusIdParameter, createdByUserCodeParameter, dateHappenParameter);
        }
    
        public virtual ObjectResult<usp_CustomerDetail_PA_Select_Result> usp_CustomerDetail_PA_Select(string customerDetailID)
        {
            var customerDetailIDParameter = customerDetailID != null ?
                new ObjectParameter("CustomerDetailID", customerDetailID) :
                new ObjectParameter("CustomerDetailID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerDetail_PA_Select_Result>("usp_CustomerDetail_PA_Select", customerDetailIDParameter);
        }
    }
}
