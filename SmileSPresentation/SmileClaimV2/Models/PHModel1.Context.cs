//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmileClaimV2.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SSSEntities : DbContext
    {
        public SSSEntities()
            : base("name=SSSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<usp_CustomerDetail_Select_Result> usp_CustomerDetail_Select(string applicationID)
        {
            var applicationIDParameter = applicationID != null ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerDetail_Select_Result>("usp_CustomerDetail_Select", applicationIDParameter);
        }
    
        public virtual ObjectResult<usp_CustomerSearch_Select_Result> usp_CustomerSearch_Select(Nullable<int> pageStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var pageStartParameter = pageStart.HasValue ?
                new ObjectParameter("PageStart", pageStart) :
                new ObjectParameter("PageStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerSearch_Select_Result>("usp_CustomerSearch_Select", pageStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual ObjectResult<string> usp_ClaimHeader_Insert(string applicationID, string hospital_id, Nullable<bool> isContinue, string continueFromClaim_id, string claimType_id, string claimAdmitType_id, Nullable<System.DateTime> dateHappen, Nullable<System.DateTime> dateNotice, string product_id, string insuranceCompany_id, string agent_id, string chiefComplain_id, string chiefComplainAnswer, string iCD10_1, string iCD10_2, string iCD10_3, string remark, string status_id, Nullable<int> ageAtClaim_Year, Nullable<int> ageAtClaim_Month, Nullable<int> ageAtClaim_Day, Nullable<int> ageAppAtClaim_Year, Nullable<int> ageAppAtClaim_Month, Nullable<int> ageAppAtClaim_Day, string createdBy_id, Nullable<bool> isWalkoutClaim, string overFromCompany, Nullable<bool> isChiefComplainWarning, Nullable<bool> isContinueClaimWarining, Nullable<bool> isExgratia, Nullable<bool> isNoDCRWarning, string denyCause_id, string receiptStatus_id, string sendInsuranceStatus_id, string payHospitalCashHeader_id, string claimHeaderGroup_id, Nullable<bool> isPayCenter, string approvedBy_id, Nullable<System.DateTime> approvedDate, string claimPayBy_id, string hospitalClaimInformCode, string insuranceCompany_Name)
        {
            var applicationIDParameter = applicationID != null ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(string));
    
            var hospital_idParameter = hospital_id != null ?
                new ObjectParameter("Hospital_id", hospital_id) :
                new ObjectParameter("Hospital_id", typeof(string));
    
            var isContinueParameter = isContinue.HasValue ?
                new ObjectParameter("IsContinue", isContinue) :
                new ObjectParameter("IsContinue", typeof(bool));
    
            var continueFromClaim_idParameter = continueFromClaim_id != null ?
                new ObjectParameter("ContinueFromClaim_id", continueFromClaim_id) :
                new ObjectParameter("ContinueFromClaim_id", typeof(string));
    
            var claimType_idParameter = claimType_id != null ?
                new ObjectParameter("ClaimType_id", claimType_id) :
                new ObjectParameter("ClaimType_id", typeof(string));
    
            var claimAdmitType_idParameter = claimAdmitType_id != null ?
                new ObjectParameter("ClaimAdmitType_id", claimAdmitType_id) :
                new ObjectParameter("ClaimAdmitType_id", typeof(string));
    
            var dateHappenParameter = dateHappen.HasValue ?
                new ObjectParameter("DateHappen", dateHappen) :
                new ObjectParameter("DateHappen", typeof(System.DateTime));
    
            var dateNoticeParameter = dateNotice.HasValue ?
                new ObjectParameter("DateNotice", dateNotice) :
                new ObjectParameter("DateNotice", typeof(System.DateTime));
    
            var product_idParameter = product_id != null ?
                new ObjectParameter("Product_id", product_id) :
                new ObjectParameter("Product_id", typeof(string));
    
            var insuranceCompany_idParameter = insuranceCompany_id != null ?
                new ObjectParameter("InsuranceCompany_id", insuranceCompany_id) :
                new ObjectParameter("InsuranceCompany_id", typeof(string));
    
            var agent_idParameter = agent_id != null ?
                new ObjectParameter("Agent_id", agent_id) :
                new ObjectParameter("Agent_id", typeof(string));
    
            var chiefComplain_idParameter = chiefComplain_id != null ?
                new ObjectParameter("ChiefComplain_id", chiefComplain_id) :
                new ObjectParameter("ChiefComplain_id", typeof(string));
    
            var chiefComplainAnswerParameter = chiefComplainAnswer != null ?
                new ObjectParameter("ChiefComplainAnswer", chiefComplainAnswer) :
                new ObjectParameter("ChiefComplainAnswer", typeof(string));
    
            var iCD10_1Parameter = iCD10_1 != null ?
                new ObjectParameter("ICD10_1", iCD10_1) :
                new ObjectParameter("ICD10_1", typeof(string));
    
            var iCD10_2Parameter = iCD10_2 != null ?
                new ObjectParameter("ICD10_2", iCD10_2) :
                new ObjectParameter("ICD10_2", typeof(string));
    
            var iCD10_3Parameter = iCD10_3 != null ?
                new ObjectParameter("ICD10_3", iCD10_3) :
                new ObjectParameter("ICD10_3", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var status_idParameter = status_id != null ?
                new ObjectParameter("Status_id", status_id) :
                new ObjectParameter("Status_id", typeof(string));
    
            var ageAtClaim_YearParameter = ageAtClaim_Year.HasValue ?
                new ObjectParameter("AgeAtClaim_Year", ageAtClaim_Year) :
                new ObjectParameter("AgeAtClaim_Year", typeof(int));
    
            var ageAtClaim_MonthParameter = ageAtClaim_Month.HasValue ?
                new ObjectParameter("AgeAtClaim_Month", ageAtClaim_Month) :
                new ObjectParameter("AgeAtClaim_Month", typeof(int));
    
            var ageAtClaim_DayParameter = ageAtClaim_Day.HasValue ?
                new ObjectParameter("AgeAtClaim_Day", ageAtClaim_Day) :
                new ObjectParameter("AgeAtClaim_Day", typeof(int));
    
            var ageAppAtClaim_YearParameter = ageAppAtClaim_Year.HasValue ?
                new ObjectParameter("AgeAppAtClaim_Year", ageAppAtClaim_Year) :
                new ObjectParameter("AgeAppAtClaim_Year", typeof(int));
    
            var ageAppAtClaim_MonthParameter = ageAppAtClaim_Month.HasValue ?
                new ObjectParameter("AgeAppAtClaim_Month", ageAppAtClaim_Month) :
                new ObjectParameter("AgeAppAtClaim_Month", typeof(int));
    
            var ageAppAtClaim_DayParameter = ageAppAtClaim_Day.HasValue ?
                new ObjectParameter("AgeAppAtClaim_Day", ageAppAtClaim_Day) :
                new ObjectParameter("AgeAppAtClaim_Day", typeof(int));
    
            var createdBy_idParameter = createdBy_id != null ?
                new ObjectParameter("CreatedBy_id", createdBy_id) :
                new ObjectParameter("CreatedBy_id", typeof(string));
    
            var isWalkoutClaimParameter = isWalkoutClaim.HasValue ?
                new ObjectParameter("IsWalkoutClaim", isWalkoutClaim) :
                new ObjectParameter("IsWalkoutClaim", typeof(bool));
    
            var overFromCompanyParameter = overFromCompany != null ?
                new ObjectParameter("OverFromCompany", overFromCompany) :
                new ObjectParameter("OverFromCompany", typeof(string));
    
            var isChiefComplainWarningParameter = isChiefComplainWarning.HasValue ?
                new ObjectParameter("IsChiefComplainWarning", isChiefComplainWarning) :
                new ObjectParameter("IsChiefComplainWarning", typeof(bool));
    
            var isContinueClaimWariningParameter = isContinueClaimWarining.HasValue ?
                new ObjectParameter("IsContinueClaimWarining", isContinueClaimWarining) :
                new ObjectParameter("IsContinueClaimWarining", typeof(bool));
    
            var isExgratiaParameter = isExgratia.HasValue ?
                new ObjectParameter("IsExgratia", isExgratia) :
                new ObjectParameter("IsExgratia", typeof(bool));
    
            var isNoDCRWarningParameter = isNoDCRWarning.HasValue ?
                new ObjectParameter("IsNoDCRWarning", isNoDCRWarning) :
                new ObjectParameter("IsNoDCRWarning", typeof(bool));
    
            var denyCause_idParameter = denyCause_id != null ?
                new ObjectParameter("DenyCause_id", denyCause_id) :
                new ObjectParameter("DenyCause_id", typeof(string));
    
            var receiptStatus_idParameter = receiptStatus_id != null ?
                new ObjectParameter("ReceiptStatus_id", receiptStatus_id) :
                new ObjectParameter("ReceiptStatus_id", typeof(string));
    
            var sendInsuranceStatus_idParameter = sendInsuranceStatus_id != null ?
                new ObjectParameter("SendInsuranceStatus_id", sendInsuranceStatus_id) :
                new ObjectParameter("SendInsuranceStatus_id", typeof(string));
    
            var payHospitalCashHeader_idParameter = payHospitalCashHeader_id != null ?
                new ObjectParameter("PayHospitalCashHeader_id", payHospitalCashHeader_id) :
                new ObjectParameter("PayHospitalCashHeader_id", typeof(string));
    
            var claimHeaderGroup_idParameter = claimHeaderGroup_id != null ?
                new ObjectParameter("ClaimHeaderGroup_id", claimHeaderGroup_id) :
                new ObjectParameter("ClaimHeaderGroup_id", typeof(string));
    
            var isPayCenterParameter = isPayCenter.HasValue ?
                new ObjectParameter("IsPayCenter", isPayCenter) :
                new ObjectParameter("IsPayCenter", typeof(bool));
    
            var approvedBy_idParameter = approvedBy_id != null ?
                new ObjectParameter("ApprovedBy_id", approvedBy_id) :
                new ObjectParameter("ApprovedBy_id", typeof(string));
    
            var approvedDateParameter = approvedDate.HasValue ?
                new ObjectParameter("ApprovedDate", approvedDate) :
                new ObjectParameter("ApprovedDate", typeof(System.DateTime));
    
            var claimPayBy_idParameter = claimPayBy_id != null ?
                new ObjectParameter("ClaimPayBy_id", claimPayBy_id) :
                new ObjectParameter("ClaimPayBy_id", typeof(string));
    
            var hospitalClaimInformCodeParameter = hospitalClaimInformCode != null ?
                new ObjectParameter("HospitalClaimInformCode", hospitalClaimInformCode) :
                new ObjectParameter("HospitalClaimInformCode", typeof(string));
    
            var insuranceCompany_NameParameter = insuranceCompany_Name != null ?
                new ObjectParameter("InsuranceCompany_Name", insuranceCompany_Name) :
                new ObjectParameter("InsuranceCompany_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_ClaimHeader_Insert", applicationIDParameter, hospital_idParameter, isContinueParameter, continueFromClaim_idParameter, claimType_idParameter, claimAdmitType_idParameter, dateHappenParameter, dateNoticeParameter, product_idParameter, insuranceCompany_idParameter, agent_idParameter, chiefComplain_idParameter, chiefComplainAnswerParameter, iCD10_1Parameter, iCD10_2Parameter, iCD10_3Parameter, remarkParameter, status_idParameter, ageAtClaim_YearParameter, ageAtClaim_MonthParameter, ageAtClaim_DayParameter, ageAppAtClaim_YearParameter, ageAppAtClaim_MonthParameter, ageAppAtClaim_DayParameter, createdBy_idParameter, isWalkoutClaimParameter, overFromCompanyParameter, isChiefComplainWarningParameter, isContinueClaimWariningParameter, isExgratiaParameter, isNoDCRWarningParameter, denyCause_idParameter, receiptStatus_idParameter, sendInsuranceStatus_idParameter, payHospitalCashHeader_idParameter, claimHeaderGroup_idParameter, isPayCenterParameter, approvedBy_idParameter, approvedDateParameter, claimPayBy_idParameter, hospitalClaimInformCodeParameter, insuranceCompany_NameParameter);
        }
    
        public virtual int usp_HCI_UpdateStatusClaimNotUse(string pClaimID)
        {
            var pClaimIDParameter = pClaimID != null ?
                new ObjectParameter("pClaimID", pClaimID) :
                new ObjectParameter("pClaimID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_HCI_UpdateStatusClaimNotUse", pClaimIDParameter);
        }
    
        public virtual ObjectResult<usp_BenefitCoverrage_ByBenefitID_PH_Select_Result> usp_BenefitCoverrage_ByBenefitID_PH_Select(string applicationID, string benefitID)
        {
            var applicationIDParameter = applicationID != null ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(string));
    
            var benefitIDParameter = benefitID != null ?
                new ObjectParameter("BenefitID", benefitID) :
                new ObjectParameter("BenefitID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BenefitCoverrage_ByBenefitID_PH_Select_Result>("usp_BenefitCoverrage_ByBenefitID_PH_Select", applicationIDParameter, benefitIDParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> usp_GetOPDRemain(string appId, Nullable<System.DateTime> dateHappen)
        {
            var appIdParameter = appId != null ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(string));
    
            var dateHappenParameter = dateHappen.HasValue ?
                new ObjectParameter("DateHappen", dateHappen) :
                new ObjectParameter("DateHappen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("usp_GetOPDRemain", appIdParameter, dateHappenParameter);
        }
    
        public virtual ObjectResult<usp_ExceptDisease_Select_Result> usp_ExceptDisease_Select(Nullable<int> pageStart, Nullable<int> pageSize, string sortField, string orderType, string search)
        {
            var pageStartParameter = pageStart.HasValue ?
                new ObjectParameter("PageStart", pageStart) :
                new ObjectParameter("PageStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ExceptDisease_Select_Result>("usp_ExceptDisease_Select", pageStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual ObjectResult<usp_CustomerDeseaseExcept_Search_Result> usp_CustomerDeseaseExcept_Search(string applicationID, string search)
        {
            var applicationIDParameter = applicationID != null ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerDeseaseExcept_Search_Result>("usp_CustomerDeseaseExcept_Search", applicationIDParameter, searchParameter);
        }
    
        [DbFunction("SSSEntities", "func_CalculateAge")]
        public virtual IQueryable<func_CalculateAge_Result> func_CalculateAge(Nullable<System.DateTime> date1, Nullable<System.DateTime> date2)
        {
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("Date1", date1) :
                new ObjectParameter("Date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("Date2", date2) :
                new ObjectParameter("Date2", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_CalculateAge_Result>("[SSSEntities].[func_CalculateAge](@Date1, @Date2)", date1Parameter, date2Parameter);
        }
    
        public virtual ObjectResult<usp_ClaimHeaderByStatus_Select_Result> usp_ClaimHeaderByStatus_Select(string claimHeader_Code)
        {
            var claimHeader_CodeParameter = claimHeader_Code != null ?
                new ObjectParameter("ClaimHeader_Code", claimHeader_Code) :
                new ObjectParameter("ClaimHeader_Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimHeaderByStatus_Select_Result>("usp_ClaimHeaderByStatus_Select", claimHeader_CodeParameter);
        }
    
        public virtual ObjectResult<usp_ClaimHeaderAccidentOnly_Select_Result> usp_ClaimHeaderAccidentOnly_Select(string applicationCode, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimHeaderAccidentOnly_Select_Result>("usp_ClaimHeaderAccidentOnly_Select", applicationCodeParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_CustomerMemoByAppCode_Select_Result> usp_CustomerMemoByAppCode_Select(string applicationCode)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerMemoByAppCode_Select_Result>("usp_CustomerMemoByAppCode_Select", applicationCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_OPDBenefitAll_Select(string app_id)
        {
            var app_idParameter = app_id != null ?
                new ObjectParameter("App_id", app_id) :
                new ObjectParameter("App_id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_OPDBenefitAll_Select", app_idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_ClaimPHRepeatedlyByAppCode_Select(string applicationCode, Nullable<System.DateTime> dateIssue)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var dateIssueParameter = dateIssue.HasValue ?
                new ObjectParameter("DateIssue", dateIssue) :
                new ObjectParameter("DateIssue", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_ClaimPHRepeatedlyByAppCode_Select", applicationCodeParameter, dateIssueParameter);
        }
    
        public virtual ObjectResult<usp_CustomerClaimHistory_Update_Result> usp_CustomerClaimHistory_Update(string applicationCode, Nullable<System.DateTime> dateCheck)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var dateCheckParameter = dateCheck.HasValue ?
                new ObjectParameter("DateCheck", dateCheck) :
                new ObjectParameter("DateCheck", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerClaimHistory_Update_Result>("usp_CustomerClaimHistory_Update", applicationCodeParameter, dateCheckParameter);
        }
    
        public virtual ObjectResult<usp_ClaimHeaderOPDCount_UpdateV2_Result> usp_ClaimHeaderOPDCount_UpdateV2(string claimCode)
        {
            var claimCodeParameter = claimCode != null ?
                new ObjectParameter("ClaimCode", claimCode) :
                new ObjectParameter("ClaimCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimHeaderOPDCount_UpdateV2_Result>("usp_ClaimHeaderOPDCount_UpdateV2", claimCodeParameter);
        }
    
        public virtual ObjectResult<usp_ClaimExportTransactionFail_Insert_Result> usp_ClaimExportTransactionFail_Insert(string claimCode, Nullable<int> tPAStatusId, Nullable<int> claimGroupTypeId, Nullable<int> sMIStatusId, string createdByUserCode, Nullable<System.DateTime> dateHappen)
        {
            var claimCodeParameter = claimCode != null ?
                new ObjectParameter("ClaimCode", claimCode) :
                new ObjectParameter("ClaimCode", typeof(string));
    
            var tPAStatusIdParameter = tPAStatusId.HasValue ?
                new ObjectParameter("TPAStatusId", tPAStatusId) :
                new ObjectParameter("TPAStatusId", typeof(int));
    
            var claimGroupTypeIdParameter = claimGroupTypeId.HasValue ?
                new ObjectParameter("ClaimGroupTypeId", claimGroupTypeId) :
                new ObjectParameter("ClaimGroupTypeId", typeof(int));
    
            var sMIStatusIdParameter = sMIStatusId.HasValue ?
                new ObjectParameter("SMIStatusId", sMIStatusId) :
                new ObjectParameter("SMIStatusId", typeof(int));
    
            var createdByUserCodeParameter = createdByUserCode != null ?
                new ObjectParameter("CreatedByUserCode", createdByUserCode) :
                new ObjectParameter("CreatedByUserCode", typeof(string));
    
            var dateHappenParameter = dateHappen.HasValue ?
                new ObjectParameter("DateHappen", dateHappen) :
                new ObjectParameter("DateHappen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimExportTransactionFail_Insert_Result>("usp_ClaimExportTransactionFail_Insert", claimCodeParameter, tPAStatusIdParameter, claimGroupTypeIdParameter, sMIStatusIdParameter, createdByUserCodeParameter, dateHappenParameter);
        }
    }
}
