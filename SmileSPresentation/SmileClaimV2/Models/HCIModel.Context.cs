//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmileClaimV2.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HospitalClaimInformV1Entities : DbContext
    {
        public HospitalClaimInformV1Entities()
            : base("name=HospitalClaimInformV1Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<HospitalClaimInform> HospitalClaimInform { get; set; }
    
        public virtual ObjectResult<Nullable<int>> usp_HCI_CreateClaimInform(string claimTypeID, string claimAdmitTypeID, string chiefComplainID, Nullable<System.DateTime> dateHappen, Nullable<System.DateTime> dateIssue, string remark, string customerPhoneNo, Nullable<int> hCIStatusID, Nullable<int> oPD_All, Nullable<int> oPD_Used, Nullable<int> oPD_Net, Nullable<int> hospitalID, string referenceID, string applicationID)
        {
            var claimTypeIDParameter = claimTypeID != null ?
                new ObjectParameter("ClaimTypeID", claimTypeID) :
                new ObjectParameter("ClaimTypeID", typeof(string));
    
            var claimAdmitTypeIDParameter = claimAdmitTypeID != null ?
                new ObjectParameter("ClaimAdmitTypeID", claimAdmitTypeID) :
                new ObjectParameter("ClaimAdmitTypeID", typeof(string));
    
            var chiefComplainIDParameter = chiefComplainID != null ?
                new ObjectParameter("ChiefComplainID", chiefComplainID) :
                new ObjectParameter("ChiefComplainID", typeof(string));
    
            var dateHappenParameter = dateHappen.HasValue ?
                new ObjectParameter("DateHappen", dateHappen) :
                new ObjectParameter("DateHappen", typeof(System.DateTime));
    
            var dateIssueParameter = dateIssue.HasValue ?
                new ObjectParameter("DateIssue", dateIssue) :
                new ObjectParameter("DateIssue", typeof(System.DateTime));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var customerPhoneNoParameter = customerPhoneNo != null ?
                new ObjectParameter("CustomerPhoneNo", customerPhoneNo) :
                new ObjectParameter("CustomerPhoneNo", typeof(string));
    
            var hCIStatusIDParameter = hCIStatusID.HasValue ?
                new ObjectParameter("HCIStatusID", hCIStatusID) :
                new ObjectParameter("HCIStatusID", typeof(int));
    
            var oPD_AllParameter = oPD_All.HasValue ?
                new ObjectParameter("OPD_All", oPD_All) :
                new ObjectParameter("OPD_All", typeof(int));
    
            var oPD_UsedParameter = oPD_Used.HasValue ?
                new ObjectParameter("OPD_Used", oPD_Used) :
                new ObjectParameter("OPD_Used", typeof(int));
    
            var oPD_NetParameter = oPD_Net.HasValue ?
                new ObjectParameter("OPD_Net", oPD_Net) :
                new ObjectParameter("OPD_Net", typeof(int));
    
            var hospitalIDParameter = hospitalID.HasValue ?
                new ObjectParameter("HospitalID", hospitalID) :
                new ObjectParameter("HospitalID", typeof(int));
    
            var referenceIDParameter = referenceID != null ?
                new ObjectParameter("ReferenceID", referenceID) :
                new ObjectParameter("ReferenceID", typeof(string));
    
            var applicationIDParameter = applicationID != null ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_HCI_CreateClaimInform", claimTypeIDParameter, claimAdmitTypeIDParameter, chiefComplainIDParameter, dateHappenParameter, dateIssueParameter, remarkParameter, customerPhoneNoParameter, hCIStatusIDParameter, oPD_AllParameter, oPD_UsedParameter, oPD_NetParameter, hospitalIDParameter, referenceIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<usp_HCI_UpdateClaimID_update_Result> usp_HCI_UpdateClaimID_update(Nullable<int> hospitalClaimInformID, string claimHeaderID)
        {
            var hospitalClaimInformIDParameter = hospitalClaimInformID.HasValue ?
                new ObjectParameter("HospitalClaimInformID", hospitalClaimInformID) :
                new ObjectParameter("HospitalClaimInformID", typeof(int));
    
            var claimHeaderIDParameter = claimHeaderID != null ?
                new ObjectParameter("ClaimHeaderID", claimHeaderID) :
                new ObjectParameter("ClaimHeaderID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_HCI_UpdateClaimID_update_Result>("usp_HCI_UpdateClaimID_update", hospitalClaimInformIDParameter, claimHeaderIDParameter);
        }
    
        public virtual ObjectResult<usp_HCIDetail_select_Result> usp_HCIDetail_select(Nullable<int> hospitalClaimInformID)
        {
            var hospitalClaimInformIDParameter = hospitalClaimInformID.HasValue ?
                new ObjectParameter("HospitalClaimInformID", hospitalClaimInformID) :
                new ObjectParameter("HospitalClaimInformID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_HCIDetail_select_Result>("usp_HCIDetail_select", hospitalClaimInformIDParameter);
        }
    
        public virtual ObjectResult<usp_HCIHospitalClaimInform_UpdateStatus_Result> usp_HCIHospitalClaimInform_UpdateStatus(Nullable<int> pHospitalClaimInformID, Nullable<int> pHCIStatusID)
        {
            var pHospitalClaimInformIDParameter = pHospitalClaimInformID.HasValue ?
                new ObjectParameter("pHospitalClaimInformID", pHospitalClaimInformID) :
                new ObjectParameter("pHospitalClaimInformID", typeof(int));
    
            var pHCIStatusIDParameter = pHCIStatusID.HasValue ?
                new ObjectParameter("pHCIStatusID", pHCIStatusID) :
                new ObjectParameter("pHCIStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_HCIHospitalClaimInform_UpdateStatus_Result>("usp_HCIHospitalClaimInform_UpdateStatus", pHospitalClaimInformIDParameter, pHCIStatusIDParameter);
        }
    
        public virtual ObjectResult<usp_HospitalClaimInform_Insert_Result> usp_HospitalClaimInform_Insert(Nullable<int> hospitalID, Nullable<int> hCIStatusID, Nullable<int> chiefComplainID, Nullable<int> claimTypeID, Nullable<int> claimAdmitTypeID, Nullable<System.DateTime> dateHappen, Nullable<System.DateTime> dateIssue, Nullable<int> oPD_All, Nullable<int> oPD_Used, Nullable<int> oPD_Net, string remark, Nullable<int> oPDBenefitAll, Nullable<int> oPDCurrentUse, Nullable<int> oPDRemain, string customerPhoneNo, Nullable<int> createdByID, string referenceID, string applicationID, Nullable<int> productGroupID, string cause, string year, string createdOfficerFullName, string createdOfficerDepartment)
        {
            var hospitalIDParameter = hospitalID.HasValue ?
                new ObjectParameter("HospitalID", hospitalID) :
                new ObjectParameter("HospitalID", typeof(int));
    
            var hCIStatusIDParameter = hCIStatusID.HasValue ?
                new ObjectParameter("HCIStatusID", hCIStatusID) :
                new ObjectParameter("HCIStatusID", typeof(int));
    
            var chiefComplainIDParameter = chiefComplainID.HasValue ?
                new ObjectParameter("ChiefComplainID", chiefComplainID) :
                new ObjectParameter("ChiefComplainID", typeof(int));
    
            var claimTypeIDParameter = claimTypeID.HasValue ?
                new ObjectParameter("ClaimTypeID", claimTypeID) :
                new ObjectParameter("ClaimTypeID", typeof(int));
    
            var claimAdmitTypeIDParameter = claimAdmitTypeID.HasValue ?
                new ObjectParameter("ClaimAdmitTypeID", claimAdmitTypeID) :
                new ObjectParameter("ClaimAdmitTypeID", typeof(int));
    
            var dateHappenParameter = dateHappen.HasValue ?
                new ObjectParameter("DateHappen", dateHappen) :
                new ObjectParameter("DateHappen", typeof(System.DateTime));
    
            var dateIssueParameter = dateIssue.HasValue ?
                new ObjectParameter("DateIssue", dateIssue) :
                new ObjectParameter("DateIssue", typeof(System.DateTime));
    
            var oPD_AllParameter = oPD_All.HasValue ?
                new ObjectParameter("OPD_All", oPD_All) :
                new ObjectParameter("OPD_All", typeof(int));
    
            var oPD_UsedParameter = oPD_Used.HasValue ?
                new ObjectParameter("OPD_Used", oPD_Used) :
                new ObjectParameter("OPD_Used", typeof(int));
    
            var oPD_NetParameter = oPD_Net.HasValue ?
                new ObjectParameter("OPD_Net", oPD_Net) :
                new ObjectParameter("OPD_Net", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var oPDBenefitAllParameter = oPDBenefitAll.HasValue ?
                new ObjectParameter("OPDBenefitAll", oPDBenefitAll) :
                new ObjectParameter("OPDBenefitAll", typeof(int));
    
            var oPDCurrentUseParameter = oPDCurrentUse.HasValue ?
                new ObjectParameter("OPDCurrentUse", oPDCurrentUse) :
                new ObjectParameter("OPDCurrentUse", typeof(int));
    
            var oPDRemainParameter = oPDRemain.HasValue ?
                new ObjectParameter("OPDRemain", oPDRemain) :
                new ObjectParameter("OPDRemain", typeof(int));
    
            var customerPhoneNoParameter = customerPhoneNo != null ?
                new ObjectParameter("CustomerPhoneNo", customerPhoneNo) :
                new ObjectParameter("CustomerPhoneNo", typeof(string));
    
            var createdByIDParameter = createdByID.HasValue ?
                new ObjectParameter("CreatedByID", createdByID) :
                new ObjectParameter("CreatedByID", typeof(int));
    
            var referenceIDParameter = referenceID != null ?
                new ObjectParameter("ReferenceID", referenceID) :
                new ObjectParameter("ReferenceID", typeof(string));
    
            var applicationIDParameter = applicationID != null ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(string));
    
            var productGroupIDParameter = productGroupID.HasValue ?
                new ObjectParameter("ProductGroupID", productGroupID) :
                new ObjectParameter("ProductGroupID", typeof(int));
    
            var causeParameter = cause != null ?
                new ObjectParameter("Cause", cause) :
                new ObjectParameter("Cause", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var createdOfficerFullNameParameter = createdOfficerFullName != null ?
                new ObjectParameter("CreatedOfficerFullName", createdOfficerFullName) :
                new ObjectParameter("CreatedOfficerFullName", typeof(string));
    
            var createdOfficerDepartmentParameter = createdOfficerDepartment != null ?
                new ObjectParameter("CreatedOfficerDepartment", createdOfficerDepartment) :
                new ObjectParameter("CreatedOfficerDepartment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_HospitalClaimInform_Insert_Result>("usp_HospitalClaimInform_Insert", hospitalIDParameter, hCIStatusIDParameter, chiefComplainIDParameter, claimTypeIDParameter, claimAdmitTypeIDParameter, dateHappenParameter, dateIssueParameter, oPD_AllParameter, oPD_UsedParameter, oPD_NetParameter, remarkParameter, oPDBenefitAllParameter, oPDCurrentUseParameter, oPDRemainParameter, customerPhoneNoParameter, createdByIDParameter, referenceIDParameter, applicationIDParameter, productGroupIDParameter, causeParameter, yearParameter, createdOfficerFullNameParameter, createdOfficerDepartmentParameter);
        }
    
        public virtual ObjectResult<usp_HCI_select_Result> usp_HCI_select(Nullable<int> hospitalID, Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateEnd, Nullable<int> claimTypeID, Nullable<int> claimAdmitTypeID, Nullable<int> productGroupID, Nullable<int> hCIStatusID, string criteria, Nullable<int> pageStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var hospitalIDParameter = hospitalID.HasValue ?
                new ObjectParameter("HospitalID", hospitalID) :
                new ObjectParameter("HospitalID", typeof(int));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            var claimTypeIDParameter = claimTypeID.HasValue ?
                new ObjectParameter("ClaimTypeID", claimTypeID) :
                new ObjectParameter("ClaimTypeID", typeof(int));
    
            var claimAdmitTypeIDParameter = claimAdmitTypeID.HasValue ?
                new ObjectParameter("ClaimAdmitTypeID", claimAdmitTypeID) :
                new ObjectParameter("ClaimAdmitTypeID", typeof(int));
    
            var productGroupIDParameter = productGroupID.HasValue ?
                new ObjectParameter("ProductGroupID", productGroupID) :
                new ObjectParameter("ProductGroupID", typeof(int));
    
            var hCIStatusIDParameter = hCIStatusID.HasValue ?
                new ObjectParameter("HCIStatusID", hCIStatusID) :
                new ObjectParameter("HCIStatusID", typeof(int));
    
            var criteriaParameter = criteria != null ?
                new ObjectParameter("Criteria", criteria) :
                new ObjectParameter("Criteria", typeof(string));
    
            var pageStartParameter = pageStart.HasValue ?
                new ObjectParameter("PageStart", pageStart) :
                new ObjectParameter("PageStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_HCI_select_Result>("usp_HCI_select", hospitalIDParameter, dateStartParameter, dateEndParameter, claimTypeIDParameter, claimAdmitTypeIDParameter, productGroupIDParameter, hCIStatusIDParameter, criteriaParameter, pageStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_HCI_Cancel_Result> usp_HCI_Cancel(Nullable<int> hospitalClaimInformID, Nullable<int> cancelByID, Nullable<int> cancelCauseID)
        {
            var hospitalClaimInformIDParameter = hospitalClaimInformID.HasValue ?
                new ObjectParameter("HospitalClaimInformID", hospitalClaimInformID) :
                new ObjectParameter("HospitalClaimInformID", typeof(int));
    
            var cancelByIDParameter = cancelByID.HasValue ?
                new ObjectParameter("CancelByID", cancelByID) :
                new ObjectParameter("CancelByID", typeof(int));
    
            var cancelCauseIDParameter = cancelCauseID.HasValue ?
                new ObjectParameter("CancelCauseID", cancelCauseID) :
                new ObjectParameter("CancelCauseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_HCI_Cancel_Result>("usp_HCI_Cancel", hospitalClaimInformIDParameter, cancelByIDParameter, cancelCauseIDParameter);
        }
    
        public virtual ObjectResult<usp_HCI_CancelCause_Result> usp_HCI_CancelCause()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_HCI_CancelCause_Result>("usp_HCI_CancelCause");
        }
    
        public virtual ObjectResult<usp_HCI_Static_Select_Result> usp_HCI_Static_Select(Nullable<System.DateTime> dateIssueFrom, Nullable<System.DateTime> dateIssueTo, Nullable<int> pageStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var dateIssueFromParameter = dateIssueFrom.HasValue ?
                new ObjectParameter("DateIssueFrom", dateIssueFrom) :
                new ObjectParameter("DateIssueFrom", typeof(System.DateTime));
    
            var dateIssueToParameter = dateIssueTo.HasValue ?
                new ObjectParameter("DateIssueTo", dateIssueTo) :
                new ObjectParameter("DateIssueTo", typeof(System.DateTime));
    
            var pageStartParameter = pageStart.HasValue ?
                new ObjectParameter("PageStart", pageStart) :
                new ObjectParameter("PageStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_HCI_Static_Select_Result>("usp_HCI_Static_Select", dateIssueFromParameter, dateIssueToParameter, pageStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_Except_Select_Result> usp_Except_Select(Nullable<int> productGroupId, Nullable<int> exceptTypeId)
        {
            var productGroupIdParameter = productGroupId.HasValue ?
                new ObjectParameter("ProductGroupId", productGroupId) :
                new ObjectParameter("ProductGroupId", typeof(int));
    
            var exceptTypeIdParameter = exceptTypeId.HasValue ?
                new ObjectParameter("ExceptTypeId", exceptTypeId) :
                new ObjectParameter("ExceptTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Except_Select_Result>("usp_Except_Select", productGroupIdParameter, exceptTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_Except_Search_Result> usp_Except_Search(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Except_Search_Result>("usp_Except_Search", searchParameter);
        }
    
        public virtual ObjectResult<usp_HCIIDByHCICode_Select_Result> usp_HCIIDByHCICode_Select(string hCICode)
        {
            var hCICodeParameter = hCICode != null ?
                new ObjectParameter("HCICode", hCICode) :
                new ObjectParameter("HCICode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_HCIIDByHCICode_Select_Result>("usp_HCIIDByHCICode_Select", hCICodeParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> usp_OPDByProductCode_select(string productCode)
        {
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("usp_OPDByProductCode_select", productCodeParameter);
        }
    
        public virtual ObjectResult<usp_CustomerBenefit_OPD_Select_Result> usp_CustomerBenefit_OPD_Select(string appCode, Nullable<System.DateTime> dateHappen)
        {
            var appCodeParameter = appCode != null ?
                new ObjectParameter("AppCode", appCode) :
                new ObjectParameter("AppCode", typeof(string));
    
            var dateHappenParameter = dateHappen.HasValue ?
                new ObjectParameter("DateHappen", dateHappen) :
                new ObjectParameter("DateHappen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerBenefit_OPD_Select_Result>("usp_CustomerBenefit_OPD_Select", appCodeParameter, dateHappenParameter);
        }
    
        public virtual ObjectResult<usp_HCIClaimForm_Select_Result> usp_HCIClaimForm_Select(Nullable<int> hospitalClaimInformID)
        {
            var hospitalClaimInformIDParameter = hospitalClaimInformID.HasValue ?
                new ObjectParameter("HospitalClaimInformID", hospitalClaimInformID) :
                new ObjectParameter("HospitalClaimInformID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_HCIClaimForm_Select_Result>("usp_HCIClaimForm_Select", hospitalClaimInformIDParameter);
        }
    
        public virtual ObjectResult<string> usp_HCIPH_CheckDuplicate_Select(string appId, Nullable<System.DateTime> createDate, Nullable<int> chiefComplainId, Nullable<System.DateTime> dateHappen, Nullable<System.DateTime> dateIn)
        {
            var appIdParameter = appId != null ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var chiefComplainIdParameter = chiefComplainId.HasValue ?
                new ObjectParameter("ChiefComplainId", chiefComplainId) :
                new ObjectParameter("ChiefComplainId", typeof(int));
    
            var dateHappenParameter = dateHappen.HasValue ?
                new ObjectParameter("DateHappen", dateHappen) :
                new ObjectParameter("DateHappen", typeof(System.DateTime));
    
            var dateInParameter = dateIn.HasValue ?
                new ObjectParameter("DateIn", dateIn) :
                new ObjectParameter("DateIn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_HCIPH_CheckDuplicate_Select", appIdParameter, createDateParameter, chiefComplainIdParameter, dateHappenParameter, dateInParameter);
        }
    
        public virtual ObjectResult<string> usp_HCIPA_CheckDuplicate_Select(string customerCode, Nullable<System.DateTime> createDate, Nullable<int> chiefComplainId, Nullable<System.DateTime> dateHappen, Nullable<System.DateTime> dateIn)
        {
            var customerCodeParameter = customerCode != null ?
                new ObjectParameter("CustomerCode", customerCode) :
                new ObjectParameter("CustomerCode", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var chiefComplainIdParameter = chiefComplainId.HasValue ?
                new ObjectParameter("ChiefComplainId", chiefComplainId) :
                new ObjectParameter("ChiefComplainId", typeof(int));
    
            var dateHappenParameter = dateHappen.HasValue ?
                new ObjectParameter("DateHappen", dateHappen) :
                new ObjectParameter("DateHappen", typeof(System.DateTime));
    
            var dateInParameter = dateIn.HasValue ?
                new ObjectParameter("DateIn", dateIn) :
                new ObjectParameter("DateIn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_HCIPA_CheckDuplicate_Select", customerCodeParameter, createDateParameter, chiefComplainIdParameter, dateHappenParameter, dateInParameter);
        }
    
        public virtual ObjectResult<usp_HCICustomerDetail_select_Result> usp_HCICustomerDetail_select(Nullable<int> hospitalClaimInformID)
        {
            var hospitalClaimInformIDParameter = hospitalClaimInformID.HasValue ?
                new ObjectParameter("HospitalClaimInformID", hospitalClaimInformID) :
                new ObjectParameter("HospitalClaimInformID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_HCICustomerDetail_select_Result>("usp_HCICustomerDetail_select", hospitalClaimInformIDParameter);
        }
    }
}
