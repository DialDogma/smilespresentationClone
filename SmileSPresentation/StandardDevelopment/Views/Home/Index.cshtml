@{
    ViewBag.Title = "Index";
    ViewBag.Description = "Home Page";
}

@*<div class="row">
        <div class="col-xs-12 col-md-5">
            <div class="box box-default">
                <div class="box-header">
                    <h3 class="box-title">iCheck - Checkbox &amp; Radio Inputs</h3>
                </div>
                <div class="box-body">
                    <div class="form-group">
                        <div>
                            <input type="checkbox" class="form-control" checked="checked"> Checkbox
                        </div>
                        <div>
                            <input type="checkbox" class="form-control"> Checkbox
                        </div>
                        <div>
                            <input type="checkbox" class="form-control" disabled="disabled"> Disabled Checkbox
                        </div>
                    </div>
                    <div class="form-group">
                        <div>
                            <input type="radio" class="form-control" checked="checked"> Radio Button
                        </div>
                        <div>
                            <input type="radio" class="form-control"> Radio Button
                        </div>
                        <div>
                            <input type="radio" class="form-control" disabled="disabled"> Disabled Radio Button
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xs-12 col-md-7">
            <div class="box box-default">
                <div class="box-header with-border">
                    <h3 class="box-title">Bootstrap-Select</h3>

                    <div class="box-tools pull-right">
                        <button type="button" class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i></button>
                        <button type="button" class="btn btn-box-tool" data-widget="remove"><i class="fa fa-remove"></i></button>
                    </div>
                </div>
                <div class="box-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Minimal</label>
                                <select class="selectpicker">
                                    <optgroup label="Picnic">
                                        <option>Mustard</option>
                                        <option>Ketchup</option>
                                        <option>Relish</option>
                                    </optgroup>
                                    <optgroup label="Camping">
                                        <option>Tent</option>
                                        <option>Flashlight</option>
                                        <option>Toilet Paper</option>
                                    </optgroup>
                                </select>
                            </div>
                            <div class="form-group">
                                <label>Disabled</label>
                                <select class="selectpicker" disabled>
                                    <option>Mustard</option>
                                    <option>Ketchup</option>
                                    <option>Relish</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Multiple</label>
                                <select class="selectpicker" multiple>
                                    <option>Mustard</option>
                                    <option>Ketchup</option>
                                    <option>Relish</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label>Subtext</label>
                                <select class="selectpicker" data-show-subtext="true">
                                    <option data-subtext="French's">Mustard</option>
                                    <option data-subtext="Heinz">Ketchup</option>
                                    <option data-subtext="Sweet">Relish</option>
                                    <option data-subtext="Miracle Whip">Mayonnaise</option>
                                    <option data-divider="true"></option>
                                    <option data-subtext="Honey">Barbecue Sauce</option>
                                    <option data-subtext="Ranch">Salad Dressing</option>
                                    <option data-subtext="Sweet &amp; Spicy">Tabasco</option>
                                    <option data-subtext="Chunky">Salsa</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12 col-md-6">
            <div class="box box-default">
                <div class="box-header">
                    Date Picker
                </div>
                <div class="box-body">
                    <div class="form-group">
                        <label>Date:</label>
                        <div class="input-group date">
                            <div class="input-group-addon">
                                <i class="fa fa-calendar"></i>
                            </div>
                            <input type="text" class="form-control pull-right datepicker">
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xs-12 col-md-6">
            <div class="box box-danger">
                <div class="box-header">
                    <h3 class="box-title">Input masks</h3>
                </div>
                <div class="box-body">
                    <div class="form-group">
                        <label>Date masks:</label>

                        <div class="input-group">
                            <div class="input-group-addon">
                                <i class="fa fa-calendar"></i>
                            </div>
                            <input type="text" class="form-control" data-inputmask="'alias': 'dd/mm/yyyy'" data-mask="">
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <div class="input-group-addon">
                                <i class="fa fa-calendar"></i>
                            </div>
                            <input type="text" class="form-control" data-inputmask="'alias': 'mm/dd/yyyy'" data-mask="">
                        </div>
                    </div>
                    <div class="form-group">
                        <label>US phone mask:</label>

                        <div class="input-group">
                            <div class="input-group-addon">
                                <i class="fa fa-phone"></i>
                            </div>
                            <input type="text" class="form-control" data-inputmask="&quot;mask&quot;: &quot;(999) 999-9999&quot;" data-mask="">
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Intl US phone mask:</label>

                        <div class="input-group">
                            <div class="input-group-addon">
                                <i class="fa fa-phone"></i>
                            </div>
                            <input type="text" class="form-control" data-inputmask="'mask': ['999-999-9999 [x99999]', '+099 99 99 9999[9]-9999']" data-mask="">
                        </div>
                    </div>
                    <div class="form-group">
                        <label>IP mask:</label>

                        <div class="input-group">
                            <div class="input-group-addon">
                                <i class="fa fa-laptop"></i>
                            </div>
                            <input type="text" class="form-control" data-inputmask="'alias': 'ip'" data-mask="">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>*@

<!DOCTYPE html>
<html>
<head>
    <title>Gmail API Quickstart</title>
    <meta charset="utf-8" />
</head>
<body>
    <p>Gmail API Quickstart</p>

    <!--Add buttons to initiate auth sequence and sign out-->
    <button id="send_button" style="display: block;">send_button</button>
    <button id="authorize_button" style="display: none;">Authorize</button>
    <button id="signout_button" style="display: none;">Sign Out</button>

    <pre id="content" style="white-space: pre-wrap;"></pre>

    <script type="text/javascript">
        // Client ID and API key from the Developer Console
        var CLIENT_ID = '188592483615-d387sms5ugquhf1tu2vk2gmpvu9e84bo.apps.googleusercontent.com';
        var API_KEY = 'AIzaSyBW2kE1BWwGLZnzywtyVYfcgOBVG7u5Hmo';

        // Array of API discovery doc URLs for APIs used by the quickstart
        var DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest"];

        // Authorization scopes required by the API; multiple scopes can be
        // included, separated by spaces.
        var SCOPES = 'https://www.googleapis.com/auth/gmail.send';

        var sendButton = document.getElementById('send_button');
        var authorizeButton = document.getElementById('authorize_button');
        var signoutButton = document.getElementById('signout_button');

        /**
         *  On load, called to load the auth2 library and API client library.
         */
        function handleClientLoad() {
            debugger
            gapi.load('client:auth2', initClient);
        }

        /**
         *  Initializes the API client library and sets up sign-in state
         *  listeners.
         */
        function initClient() {
            debugger
            gapi.client.init({
                apiKey: API_KEY,
                clientId: CLIENT_ID,
                discoveryDocs: DISCOVERY_DOCS,
                scope: SCOPES
            }).then(function () {
                debugger
                // Listen for sign-in state changes.
                gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);

                // Handle the initial sign-in state.
                updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
                authorizeButton.onclick = handleAuthClick;
                signoutButton.onclick = handleSignoutClick;
                sendButton.onclick = handleSendClick;
            }, function (error) {
                debugger
                appendPre(JSON.stringify(error, null));
            });
        }

        /**
         *  Called when the signed in status changes, to update the UI
         *  appropriately. After a sign-in, the API is called.
         */
        function updateSigninStatus(isSignedIn) {
            if (isSignedIn) {
                authorizeButton.style.display = 'none';
                signoutButton.style.display = 'block';
                listLabels();
            } else {
                authorizeButton.style.display = 'block';
                signoutButton.style.display = 'none';
            }
        }

        /**
         *  Sign in the user upon button click.
         */
        function handleAuthClick(event) {
            debugger
            gapi.auth2.getAuthInstance().signIn();
        }

        /**
         *  Sign out the user upon button click.
         */
        function handleSignoutClick(event) {
            gapi.auth2.getAuthInstance().signOut();
        }

        function handleSendClick(event) {
            sendMessage("me", "ppthaoyot@gmail.com");
        }
        /**
         * Append a pre element to the body containing the given message
         * as its text node. Used to display the results of the API call.
         *
         *param {string} message Text to be placed in pre element.
       */
        function appendPre(message) {
            var pre = document.getElementById('content');
            var textContent = document.createTextNode(message + '\n');
            pre.appendChild(textContent);
        }

        /**
         * Print all Labels in the authorized user's inbox. If no labels
         * are found an appropriate message is printed.
         */
        function listLabels() {
            gapi.client.gmail.users.labels.list({
                'userId': 'me'
            }).then(function (response) {
                var labels = response.result.labels;
                appendPre('Labels:');

                if (labels && labels.length > 0) {
                    for (i = 0; i < labels.length; i++) {
                        var label = labels[i];
                        appendPre(label.name)
                    }
                } else {
                    appendPre('No Labels found.');
                }
            });
        }

        @*Send Message.

 @param  {String} userId User's email address. The special value 'me'
  can be used to indicate the authenticated user.
  @param  {String} email RFC 5322 formatted String.
 @param  {Function} callback Function to call when the request is complete.*@

        function sendMessage(userId, email, callback) {
            debugger
            // Using the js-base64 library for encoding:
            // https://www.npmjs.com/package/js-base64
            var base64EncodedEmail = "RnJvbTogREVWNDggPHByb2dyYW1tZXIuaXNjQGdtYWlsLmNvbT4gClRvOiBQSE9OR1BIQU4gPHBwdGhhb3lvdEBnbWFpbC5jb20-IApTdWJqZWN0OiBTYXlpbmcgSGVsbG8gCkRhdGU6IEZyaSwgMjEgTm92IDE5OTcgMDk6NTU6MDYgLTA2MDAgCk1lc3NhZ2UtSUQ6IDwxMjM0QGxvY2FsLm1hY2hpbmUuZXhhbXBsZT4KClRoaXMgaXMgYSBtZXNzYWdlIGp1c3QgdG8gc2F5IGhlbGxvLiBTbywgIkhlbGxvIi4=";
            var request = gapi.client.gmail.users.messages.send({
                'userId': "me",
                'resource': {
                    'raw': "RnJvbTogREVWNDggPHByb2dyYW1tZXIuaXNjQGdtYWlsLmNvbT4gClRvOiBQSE9OR1BIQU4gPHBwdGhhb3lvdEBnbWFpbC5jb20-IApTdWJqZWN0OiBTYXlpbmcgSGVsbG8gCkRhdGU6IEZyaSwgMjEgTm92IDE5OTcgMDk6NTU6MDYgLTA2MDAgCk1lc3NhZ2UtSUQ6IDwxMjM0QGxvY2FsLm1hY2hpbmUuZXhhbXBsZT4KClRoaXMgaXMgYSBtZXNzYWdlIGp1c3QgdG8gc2F5IGhlbGxvLiBTbywgIkhlbGxvIi4="
                }
            });
            request.execute(callback);
        }
    </script>

    <script async defer src="https://apis.google.com/js/api.js"
            onload="this.onload=function(){};handleClientLoad()"
            onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script>
</body>
</html>