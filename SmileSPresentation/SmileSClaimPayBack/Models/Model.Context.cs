//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmileSClaimPayBack.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ClaimPayBackEntities : DbContext
    {
        public ClaimPayBackEntities()
            : base("name=ClaimPayBackEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BillingBank> BillingBank { get; set; }
        public virtual DbSet<TmpClaimHeaderGroupImport> TmpClaimHeaderGroupImport { get; set; }
        public virtual DbSet<BillingExport> BillingExport { get; set; }
        public virtual DbSet<BillingRequestGroup> BillingRequestGroup { get; set; }
        public virtual DbSet<SFTPConfig> SFTPConfig { get; set; }
        public virtual DbSet<vw_SFTPConfig_MT_Company> vw_SFTPConfig_MT_Company { get; set; }
        public virtual DbSet<ClaimPayBackDetail> ClaimPayBackDetail { get; set; }
        public virtual DbSet<MailConfig> MailConfig { get; set; }
        public virtual DbSet<ClaimPayBackSubGroupPathFilePDF> ClaimPayBackSubGroupPathFilePDF { get; set; }
        public virtual DbSet<ClaimPayBackSubGroup> ClaimPayBackSubGroup { get; set; }
        public virtual DbSet<ClaimPayBackXClaim> ClaimPayBackXClaim { get; set; }
        public virtual DbSet<ClaimPaybackPaymentType> ClaimPaybackPaymentType { get; set; }
        public virtual DbSet<vw_ClaimOnline_npl> vw_ClaimOnline_npl { get; set; }
        public virtual DbSet<vw_ClaimOnlineReceiveType> vw_ClaimOnlineReceiveType { get; set; }
        public virtual DbSet<vw_ClaimOnlineItem> vw_ClaimOnlineItem { get; set; }
        public virtual DbSet<ClaimPaybackPaymentDetail> ClaimPaybackPaymentDetail { get; set; }
        public virtual DbSet<ClaimPaybackPaymentHeader> ClaimPaybackPaymentHeader { get; set; }
        public virtual DbSet<ClaimPayBack> ClaimPayBack { get; set; }
        public virtual DbSet<ClaimPayBackVerifyInsuranceMaster> ClaimPayBackVerifyInsuranceMaster { get; set; }
        public virtual DbSet<DecisionStatus> DecisionStatus { get; set; }
        public virtual DbSet<BillingRequestResultDetail> BillingRequestResultDetail { get; set; }
        public virtual DbSet<ClaimHeaderGroupImport> ClaimHeaderGroupImport { get; set; }
        public virtual DbSet<ClaimHeaderGroupImportDetail> ClaimHeaderGroupImportDetail { get; set; }
        public virtual DbSet<ClaimPayBackVerifyReason> ClaimPayBackVerifyReason { get; set; }
        public virtual DbSet<BillingRequestResultHeader> BillingRequestResultHeader { get; set; }
        public virtual DbSet<BillingReceiveStatus> BillingReceiveStatus { get; set; }
        public virtual DbSet<BillingRequestGroupStatus> BillingRequestGroupStatus { get; set; }
        public virtual DbSet<TmpBillingReceiveResultHeader> TmpBillingReceiveResultHeader { get; set; }
        public virtual DbSet<TmpBillingRequestResult> TmpBillingRequestResult { get; set; }
        public virtual DbSet<ClaimPayBackSubGroupTransaction> ClaimPayBackSubGroupTransaction { get; set; }
        public virtual DbSet<ClaimPayBackSubGroupTransactionStatus> ClaimPayBackSubGroupTransactionStatus { get; set; }
        public virtual DbSet<ClaimPayBackTransfer> ClaimPayBackTransfer { get; set; }
        public virtual DbSet<ClaimPayBackTransferStatus> ClaimPayBackTransferStatus { get; set; }
        public virtual DbSet<ClaimPayBackDetailReport> ClaimPayBackDetailReport { get; set; }
        public virtual DbSet<RoleFundPayConfig> RoleFundPayConfig { get; set; }
    
        public virtual ObjectResult<usp_Branch_Select_Result> usp_Branch_Select(Nullable<int> branchId, Nullable<int> areaId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Branch_Select_Result>("usp_Branch_Select", branchIdParameter, areaIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_OrganizeInsurance_Select_Result> usp_OrganizeInsurance_Select(Nullable<int> organizeId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrganizeInsurance_Select_Result>("usp_OrganizeInsurance_Select", organizeIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ProductGroup_Select_Result> usp_ProductGroup_Select(Nullable<int> productGroupId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var productGroupIdParameter = productGroupId.HasValue ?
                new ObjectParameter("ProductGroupId", productGroupId) :
                new ObjectParameter("ProductGroupId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductGroup_Select_Result>("usp_ProductGroup_Select", productGroupIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimGroupType_Select_Result> usp_ClaimGroupType_Select(Nullable<int> claimGroupTypeId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var claimGroupTypeIdParameter = claimGroupTypeId.HasValue ?
                new ObjectParameter("ClaimGroupTypeId", claimGroupTypeId) :
                new ObjectParameter("ClaimGroupTypeId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimGroupType_Select_Result>("usp_ClaimGroupType_Select", claimGroupTypeIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimPayBack_Select_Result> usp_ClaimPayBack_Select(Nullable<System.DateTime> createdDateFrom, Nullable<System.DateTime> createdDateTo, Nullable<int> claimPayBackStatusId, Nullable<int> branchId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var createdDateFromParameter = createdDateFrom.HasValue ?
                new ObjectParameter("CreatedDateFrom", createdDateFrom) :
                new ObjectParameter("CreatedDateFrom", typeof(System.DateTime));
    
            var createdDateToParameter = createdDateTo.HasValue ?
                new ObjectParameter("CreatedDateTo", createdDateTo) :
                new ObjectParameter("CreatedDateTo", typeof(System.DateTime));
    
            var claimPayBackStatusIdParameter = claimPayBackStatusId.HasValue ?
                new ObjectParameter("ClaimPayBackStatusId", claimPayBackStatusId) :
                new ObjectParameter("ClaimPayBackStatusId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimPayBack_Select_Result>("usp_ClaimPayBack_Select", createdDateFromParameter, createdDateToParameter, claimPayBackStatusIdParameter, branchIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimPayBackByTransfer_Select_Result> usp_ClaimPayBackByTransfer_Select(Nullable<int> claimPayBackTransferId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var claimPayBackTransferIdParameter = claimPayBackTransferId.HasValue ?
                new ObjectParameter("ClaimPayBackTransferId", claimPayBackTransferId) :
                new ObjectParameter("ClaimPayBackTransferId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimPayBackByTransfer_Select_Result>("usp_ClaimPayBackByTransfer_Select", claimPayBackTransferIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimPayBackDetailByHeader_Select_Result> usp_ClaimPayBackDetailByHeader_Select(Nullable<int> claimPayBackId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var claimPayBackIdParameter = claimPayBackId.HasValue ?
                new ObjectParameter("ClaimPayBackId", claimPayBackId) :
                new ObjectParameter("ClaimPayBackId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimPayBackDetailByHeader_Select_Result>("usp_ClaimPayBackDetailByHeader_Select", claimPayBackIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimPayBackDetailXClaim_Select_Result> usp_ClaimPayBackDetailXClaim_Select(Nullable<int> claimPayBackDetailId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var claimPayBackDetailIdParameter = claimPayBackDetailId.HasValue ?
                new ObjectParameter("ClaimPayBackDetailId", claimPayBackDetailId) :
                new ObjectParameter("ClaimPayBackDetailId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimPayBackDetailXClaim_Select_Result>("usp_ClaimPayBackDetailXClaim_Select", claimPayBackDetailIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimPayBackForGroupTransfer_Select_Result> usp_ClaimPayBackForGroupTransfer_Select(Nullable<System.DateTime> createdDateFrom, Nullable<System.DateTime> createdDateTo, Nullable<int> claimGroupTypeId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var createdDateFromParameter = createdDateFrom.HasValue ?
                new ObjectParameter("CreatedDateFrom", createdDateFrom) :
                new ObjectParameter("CreatedDateFrom", typeof(System.DateTime));
    
            var createdDateToParameter = createdDateTo.HasValue ?
                new ObjectParameter("CreatedDateTo", createdDateTo) :
                new ObjectParameter("CreatedDateTo", typeof(System.DateTime));
    
            var claimGroupTypeIdParameter = claimGroupTypeId.HasValue ?
                new ObjectParameter("ClaimGroupTypeId", claimGroupTypeId) :
                new ObjectParameter("ClaimGroupTypeId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimPayBackForGroupTransfer_Select_Result>("usp_ClaimPayBackForGroupTransfer_Select", createdDateFromParameter, createdDateToParameter, claimGroupTypeIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimPayBackStatus_Select_Result> usp_ClaimPayBackStatus_Select(Nullable<int> claimPayBackStatusId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var claimPayBackStatusIdParameter = claimPayBackStatusId.HasValue ?
                new ObjectParameter("ClaimPayBackStatusId", claimPayBackStatusId) :
                new ObjectParameter("ClaimPayBackStatusId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimPayBackStatus_Select_Result>("usp_ClaimPayBackStatus_Select", claimPayBackStatusIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimPayBackTransfer_Select_Result> usp_ClaimPayBackTransfer_Select(Nullable<System.DateTime> createdDateFrom, Nullable<System.DateTime> createdDateTo, Nullable<int> claimPayBackTransferStatusId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var createdDateFromParameter = createdDateFrom.HasValue ?
                new ObjectParameter("CreatedDateFrom", createdDateFrom) :
                new ObjectParameter("CreatedDateFrom", typeof(System.DateTime));
    
            var createdDateToParameter = createdDateTo.HasValue ?
                new ObjectParameter("CreatedDateTo", createdDateTo) :
                new ObjectParameter("CreatedDateTo", typeof(System.DateTime));
    
            var claimPayBackTransferStatusIdParameter = claimPayBackTransferStatusId.HasValue ?
                new ObjectParameter("ClaimPayBackTransferStatusId", claimPayBackTransferStatusId) :
                new ObjectParameter("ClaimPayBackTransferStatusId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimPayBackTransfer_Select_Result>("usp_ClaimPayBackTransfer_Select", createdDateFromParameter, createdDateToParameter, claimPayBackTransferStatusIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimPayBackTransferStatus_Select_Result> usp_ClaimPayBackTransferStatus_Select(Nullable<int> claimPayBackTransferStatusId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var claimPayBackTransferStatusIdParameter = claimPayBackTransferStatusId.HasValue ?
                new ObjectParameter("ClaimPayBackTransferStatusId", claimPayBackTransferStatusId) :
                new ObjectParameter("ClaimPayBackTransferStatusId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimPayBackTransferStatus_Select_Result>("usp_ClaimPayBackTransferStatus_Select", claimPayBackTransferStatusIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimPayBackTransfer_Insert_Result> usp_ClaimPayBackTransfer_Insert(string claimPayBackIdList, Nullable<int> claimGroupTypeId, Nullable<int> updatedByUserId)
        {
            var claimPayBackIdListParameter = claimPayBackIdList != null ?
                new ObjectParameter("ClaimPayBackIdList", claimPayBackIdList) :
                new ObjectParameter("ClaimPayBackIdList", typeof(string));
    
            var claimGroupTypeIdParameter = claimGroupTypeId.HasValue ?
                new ObjectParameter("ClaimGroupTypeId", claimGroupTypeId) :
                new ObjectParameter("ClaimGroupTypeId", typeof(int));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimPayBackTransfer_Insert_Result>("usp_ClaimPayBackTransfer_Insert", claimPayBackIdListParameter, claimGroupTypeIdParameter, updatedByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimHeaderGroupDetail_Select_Result> usp_ClaimHeaderGroupDetail_Select(Nullable<int> productGroupId, Nullable<int> insuranceId, Nullable<int> claimGroupTypeId, Nullable<int> branchId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail, Nullable<bool> isShowDocumentLink)
        {
            var productGroupIdParameter = productGroupId.HasValue ?
                new ObjectParameter("ProductGroupId", productGroupId) :
                new ObjectParameter("ProductGroupId", typeof(int));
    
            var insuranceIdParameter = insuranceId.HasValue ?
                new ObjectParameter("InsuranceId", insuranceId) :
                new ObjectParameter("InsuranceId", typeof(int));
    
            var claimGroupTypeIdParameter = claimGroupTypeId.HasValue ?
                new ObjectParameter("ClaimGroupTypeId", claimGroupTypeId) :
                new ObjectParameter("ClaimGroupTypeId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            var isShowDocumentLinkParameter = isShowDocumentLink.HasValue ?
                new ObjectParameter("IsShowDocumentLink", isShowDocumentLink) :
                new ObjectParameter("IsShowDocumentLink", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimHeaderGroupDetail_Select_Result>("usp_ClaimHeaderGroupDetail_Select", productGroupIdParameter, insuranceIdParameter, claimGroupTypeIdParameter, branchIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter, isShowDocumentLinkParameter);
        }
    
        public virtual ObjectResult<usp_ClaimHeaderGroupItem_Select_Result> usp_ClaimHeaderGroupItem_Select(string claimGroupCode, Nullable<int> productGroupId, Nullable<int> claimGroupTypeId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var claimGroupCodeParameter = claimGroupCode != null ?
                new ObjectParameter("ClaimGroupCode", claimGroupCode) :
                new ObjectParameter("ClaimGroupCode", typeof(string));
    
            var productGroupIdParameter = productGroupId.HasValue ?
                new ObjectParameter("ProductGroupId", productGroupId) :
                new ObjectParameter("ProductGroupId", typeof(int));
    
            var claimGroupTypeIdParameter = claimGroupTypeId.HasValue ?
                new ObjectParameter("ClaimGroupTypeId", claimGroupTypeId) :
                new ObjectParameter("ClaimGroupTypeId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimHeaderGroupItem_Select_Result>("usp_ClaimHeaderGroupItem_Select", claimGroupCodeParameter, productGroupIdParameter, claimGroupTypeIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimPayBackDetail_Insert_Result> usp_ClaimPayBackDetail_Insert(string claimGroupCodeList, Nullable<int> creardByUserId)
        {
            var claimGroupCodeListParameter = claimGroupCodeList != null ?
                new ObjectParameter("ClaimGroupCodeList", claimGroupCodeList) :
                new ObjectParameter("ClaimGroupCodeList", typeof(string));
    
            var creardByUserIdParameter = creardByUserId.HasValue ?
                new ObjectParameter("CreardByUserId", creardByUserId) :
                new ObjectParameter("CreardByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimPayBackDetail_Insert_Result>("usp_ClaimPayBackDetail_Insert", claimGroupCodeListParameter, creardByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimPayBackDetail_Update_Result> usp_ClaimPayBackDetail_Update(Nullable<int> claimPayBackDetailId, string remark, Nullable<int> createdByUserId)
        {
            var claimPayBackDetailIdParameter = claimPayBackDetailId.HasValue ?
                new ObjectParameter("ClaimPayBackDetailId", claimPayBackDetailId) :
                new ObjectParameter("ClaimPayBackDetailId", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimPayBackDetail_Update_Result>("usp_ClaimPayBackDetail_Update", claimPayBackDetailIdParameter, remarkParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_Report_ClaimPayBackDetailCancelled_Select_Result> usp_Report_ClaimPayBackDetailCancelled_Select(Nullable<System.DateTime> createdDateFrom, Nullable<System.DateTime> createdDateTo, Nullable<int> branchId)
        {
            var createdDateFromParameter = createdDateFrom.HasValue ?
                new ObjectParameter("CreatedDateFrom", createdDateFrom) :
                new ObjectParameter("CreatedDateFrom", typeof(System.DateTime));
    
            var createdDateToParameter = createdDateTo.HasValue ?
                new ObjectParameter("CreatedDateTo", createdDateTo) :
                new ObjectParameter("CreatedDateTo", typeof(System.DateTime));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Report_ClaimPayBackDetailCancelled_Select_Result>("usp_Report_ClaimPayBackDetailCancelled_Select", createdDateFromParameter, createdDateToParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<usp_BillingRequestGroup_Select_Result> usp_BillingRequestGroup_Select(Nullable<int> insurunceCompanyId, Nullable<System.DateTime> billingDate, Nullable<int> billingRequestGroupStatusId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var insurunceCompanyIdParameter = insurunceCompanyId.HasValue ?
                new ObjectParameter("InsurunceCompanyId", insurunceCompanyId) :
                new ObjectParameter("InsurunceCompanyId", typeof(int));
    
            var billingDateParameter = billingDate.HasValue ?
                new ObjectParameter("BillingDate", billingDate) :
                new ObjectParameter("BillingDate", typeof(System.DateTime));
    
            var billingRequestGroupStatusIdParameter = billingRequestGroupStatusId.HasValue ?
                new ObjectParameter("BillingRequestGroupStatusId", billingRequestGroupStatusId) :
                new ObjectParameter("BillingRequestGroupStatusId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BillingRequestGroup_Select_Result>("usp_BillingRequestGroup_Select", insurunceCompanyIdParameter, billingDateParameter, billingRequestGroupStatusIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_BillingRequestGroupStatus_Select_Result> usp_BillingRequestGroupStatus_Select(Nullable<int> billingRequestGroupStatusId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var billingRequestGroupStatusIdParameter = billingRequestGroupStatusId.HasValue ?
                new ObjectParameter("BillingRequestGroupStatusId", billingRequestGroupStatusId) :
                new ObjectParameter("BillingRequestGroupStatusId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BillingRequestGroupStatus_Select_Result>("usp_BillingRequestGroupStatus_Select", billingRequestGroupStatusIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_BillingRequestItem_Select_Result> usp_BillingRequestItem_Select(Nullable<int> billingRequestGroupId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var billingRequestGroupIdParameter = billingRequestGroupId.HasValue ?
                new ObjectParameter("BillingRequestGroupId", billingRequestGroupId) :
                new ObjectParameter("BillingRequestGroupId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BillingRequestItem_Select_Result>("usp_BillingRequestItem_Select", billingRequestGroupIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_BillingRequest_Insert_Result> usp_BillingRequest_Insert(Nullable<int> createdByUserId, Nullable<System.DateTime> billingDateTo)
        {
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            var billingDateToParameter = billingDateTo.HasValue ?
                new ObjectParameter("BillingDateTo", billingDateTo) :
                new ObjectParameter("BillingDateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BillingRequest_Insert_Result>("usp_BillingRequest_Insert", createdByUserIdParameter, billingDateToParameter);
        }
    
        public virtual ObjectResult<usp_ClaimHeaderGroupImport_Insert_Result> usp_ClaimHeaderGroupImport_Insert(string tmpCode, string fileName, Nullable<int> createByUseId)
        {
            var tmpCodeParameter = tmpCode != null ?
                new ObjectParameter("TmpCode", tmpCode) :
                new ObjectParameter("TmpCode", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var createByUseIdParameter = createByUseId.HasValue ?
                new ObjectParameter("CreateByUseId", createByUseId) :
                new ObjectParameter("CreateByUseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimHeaderGroupImport_Insert_Result>("usp_ClaimHeaderGroupImport_Insert", tmpCodeParameter, fileNameParameter, createByUseIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimHeaderGroupImport_Select_Result> usp_ClaimHeaderGroupImport_Select(Nullable<System.DateTime> billingDateFrom, Nullable<System.DateTime> billingDateTo, Nullable<int> claimHeaderGroupImportStatusId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var billingDateFromParameter = billingDateFrom.HasValue ?
                new ObjectParameter("BillingDateFrom", billingDateFrom) :
                new ObjectParameter("BillingDateFrom", typeof(System.DateTime));
    
            var billingDateToParameter = billingDateTo.HasValue ?
                new ObjectParameter("BillingDateTo", billingDateTo) :
                new ObjectParameter("BillingDateTo", typeof(System.DateTime));
    
            var claimHeaderGroupImportStatusIdParameter = claimHeaderGroupImportStatusId.HasValue ?
                new ObjectParameter("ClaimHeaderGroupImportStatusId", claimHeaderGroupImportStatusId) :
                new ObjectParameter("ClaimHeaderGroupImportStatusId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimHeaderGroupImport_Select_Result>("usp_ClaimHeaderGroupImport_Select", billingDateFromParameter, billingDateToParameter, claimHeaderGroupImportStatusIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimHeaderGroupType_Select_Result> usp_ClaimHeaderGroupType_Select(string claimHeaderGroupTypeId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var claimHeaderGroupTypeIdParameter = claimHeaderGroupTypeId != null ?
                new ObjectParameter("ClaimHeaderGroupTypeId", claimHeaderGroupTypeId) :
                new ObjectParameter("ClaimHeaderGroupTypeId", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimHeaderGroupType_Select_Result>("usp_ClaimHeaderGroupType_Select", claimHeaderGroupTypeIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual int usp_GenerateCode(string transactionCodeControlTypeDetail, Nullable<int> runningLenght, ObjectParameter result)
        {
            var transactionCodeControlTypeDetailParameter = transactionCodeControlTypeDetail != null ?
                new ObjectParameter("TransactionCodeControlTypeDetail", transactionCodeControlTypeDetail) :
                new ObjectParameter("TransactionCodeControlTypeDetail", typeof(string));
    
            var runningLenghtParameter = runningLenght.HasValue ?
                new ObjectParameter("RunningLenght", runningLenght) :
                new ObjectParameter("RunningLenght", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GenerateCode", transactionCodeControlTypeDetailParameter, runningLenghtParameter, result);
        }
    
        public virtual ObjectResult<usp_TmpClaimHeaderGroupImport_Insert_Result> usp_TmpClaimHeaderGroupImport_Insert(string tmpCode, string claimHeaderGroupCode, Nullable<int> itemCount, Nullable<decimal> total_Amount, Nullable<System.DateTime> billingDate, Nullable<int> claimHeaderGroupTypeId)
        {
            var tmpCodeParameter = tmpCode != null ?
                new ObjectParameter("TmpCode", tmpCode) :
                new ObjectParameter("TmpCode", typeof(string));
    
            var claimHeaderGroupCodeParameter = claimHeaderGroupCode != null ?
                new ObjectParameter("ClaimHeaderGroupCode", claimHeaderGroupCode) :
                new ObjectParameter("ClaimHeaderGroupCode", typeof(string));
    
            var itemCountParameter = itemCount.HasValue ?
                new ObjectParameter("ItemCount", itemCount) :
                new ObjectParameter("ItemCount", typeof(int));
    
            var total_AmountParameter = total_Amount.HasValue ?
                new ObjectParameter("Total_Amount", total_Amount) :
                new ObjectParameter("Total_Amount", typeof(decimal));
    
            var billingDateParameter = billingDate.HasValue ?
                new ObjectParameter("BillingDate", billingDate) :
                new ObjectParameter("BillingDate", typeof(System.DateTime));
    
            var claimHeaderGroupTypeIdParameter = claimHeaderGroupTypeId.HasValue ?
                new ObjectParameter("ClaimHeaderGroupTypeId", claimHeaderGroupTypeId) :
                new ObjectParameter("ClaimHeaderGroupTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TmpClaimHeaderGroupImport_Insert_Result>("usp_TmpClaimHeaderGroupImport_Insert", tmpCodeParameter, claimHeaderGroupCodeParameter, itemCountParameter, total_AmountParameter, billingDateParameter, claimHeaderGroupTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_TmpClaimHeaderGroupImport_Preview_Result> usp_TmpClaimHeaderGroupImport_Preview(string tmpCode, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var tmpCodeParameter = tmpCode != null ?
                new ObjectParameter("TmpCode", tmpCode) :
                new ObjectParameter("TmpCode", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TmpClaimHeaderGroupImport_Preview_Result>("usp_TmpClaimHeaderGroupImport_Preview", tmpCodeParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_TmpClaimHeaderGroupImport_Validate_Result> usp_TmpClaimHeaderGroupImport_Validate(string tmpCode)
        {
            var tmpCodeParameter = tmpCode != null ?
                new ObjectParameter("TmpCode", tmpCode) :
                new ObjectParameter("TmpCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TmpClaimHeaderGroupImport_Validate_Result>("usp_TmpClaimHeaderGroupImport_Validate", tmpCodeParameter);
        }
    
        public virtual ObjectResult<usp_TmpClaimHeaderGroupImportCount_Select_Result> usp_TmpClaimHeaderGroupImportCount_Select(string tmpCode)
        {
            var tmpCodeParameter = tmpCode != null ?
                new ObjectParameter("TmpCode", tmpCode) :
                new ObjectParameter("TmpCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TmpClaimHeaderGroupImportCount_Select_Result>("usp_TmpClaimHeaderGroupImportCount_Select", tmpCodeParameter);
        }
    
        public virtual ObjectResult<usp_ClaimPayBackTranfer_Cancel_Result> usp_ClaimPayBackTranfer_Cancel(Nullable<int> claimPayBackTransferId, Nullable<int> updatedByUserId)
        {
            var claimPayBackTransferIdParameter = claimPayBackTransferId.HasValue ?
                new ObjectParameter("ClaimPayBackTransferId", claimPayBackTransferId) :
                new ObjectParameter("ClaimPayBackTransferId", typeof(int));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimPayBackTranfer_Cancel_Result>("usp_ClaimPayBackTranfer_Cancel", claimPayBackTransferIdParameter, updatedByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimHeaderDetail_Select_Result> usp_ClaimHeaderDetail_Select(string claimHeaderCode)
        {
            var claimHeaderCodeParameter = claimHeaderCode != null ?
                new ObjectParameter("ClaimHeaderCode", claimHeaderCode) :
                new ObjectParameter("ClaimHeaderCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimHeaderDetail_Select_Result>("usp_ClaimHeaderDetail_Select", claimHeaderCodeParameter);
        }
    
        public virtual ObjectResult<usp_BillingRequestResultManual_Insert_Result> usp_BillingRequestResultManual_Insert(Nullable<int> claimHeaderGroupImportDetailId, Nullable<decimal> coverAmount, Nullable<int> isCheckManual, Nullable<int> createdByUserId)
        {
            var claimHeaderGroupImportDetailIdParameter = claimHeaderGroupImportDetailId.HasValue ?
                new ObjectParameter("ClaimHeaderGroupImportDetailId", claimHeaderGroupImportDetailId) :
                new ObjectParameter("ClaimHeaderGroupImportDetailId", typeof(int));
    
            var coverAmountParameter = coverAmount.HasValue ?
                new ObjectParameter("CoverAmount", coverAmount) :
                new ObjectParameter("CoverAmount", typeof(decimal));
    
            var isCheckManualParameter = isCheckManual.HasValue ?
                new ObjectParameter("IsCheckManual", isCheckManual) :
                new ObjectParameter("IsCheckManual", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BillingRequestResultManual_Insert_Result>("usp_BillingRequestResultManual_Insert", claimHeaderGroupImportDetailIdParameter, coverAmountParameter, isCheckManualParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimHeaderGroupImportDetailSearch_Select_Result> usp_ClaimHeaderGroupImportDetailSearch_Select(Nullable<int> serachTypeId, string serachDetail)
        {
            var serachTypeIdParameter = serachTypeId.HasValue ?
                new ObjectParameter("SerachTypeId", serachTypeId) :
                new ObjectParameter("SerachTypeId", typeof(int));
    
            var serachDetailParameter = serachDetail != null ?
                new ObjectParameter("SerachDetail", serachDetail) :
                new ObjectParameter("SerachDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimHeaderGroupImportDetailSearch_Select_Result>("usp_ClaimHeaderGroupImportDetailSearch_Select", serachTypeIdParameter, serachDetailParameter);
        }
    
        public virtual ObjectResult<usp_GetClaimHeaderGroupImportDetailById_Select_Result> usp_GetClaimHeaderGroupImportDetailById_Select(Nullable<int> claimHeaderGroupImportDetailId)
        {
            var claimHeaderGroupImportDetailIdParameter = claimHeaderGroupImportDetailId.HasValue ?
                new ObjectParameter("ClaimHeaderGroupImportDetailId", claimHeaderGroupImportDetailId) :
                new ObjectParameter("ClaimHeaderGroupImportDetailId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetClaimHeaderGroupImportDetailById_Select_Result>("usp_GetClaimHeaderGroupImportDetailById_Select", claimHeaderGroupImportDetailIdParameter);
        }
    
        public virtual ObjectResult<usp_BillingRequestResultDetailLog_Select_Result> usp_BillingRequestResultDetailLog_Select(Nullable<int> claimHeaderGroupImportDetailId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var claimHeaderGroupImportDetailIdParameter = claimHeaderGroupImportDetailId.HasValue ?
                new ObjectParameter("ClaimHeaderGroupImportDetailId", claimHeaderGroupImportDetailId) :
                new ObjectParameter("ClaimHeaderGroupImportDetailId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BillingRequestResultDetailLog_Select_Result>("usp_BillingRequestResultDetailLog_Select", claimHeaderGroupImportDetailIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_BillingRequestResultDetailLog_Select_Result> usp_BillingRequestResultDetailLog_Select1(Nullable<int> claimHeaderGroupImportDetailId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var claimHeaderGroupImportDetailIdParameter = claimHeaderGroupImportDetailId.HasValue ?
                new ObjectParameter("ClaimHeaderGroupImportDetailId", claimHeaderGroupImportDetailId) :
                new ObjectParameter("ClaimHeaderGroupImportDetailId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BillingRequestResultDetailLog_Select_Result>("usp_BillingRequestResultDetailLog_Select1", claimHeaderGroupImportDetailIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_OrganizeInsuranceForGenerateGroup_Select_Result> usp_OrganizeInsuranceForGenerateGroup_Select(Nullable<int> organizeId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrganizeInsuranceForGenerateGroup_Select_Result>("usp_OrganizeInsuranceForGenerateGroup_Select", organizeIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_ClaimHeaderGroupImportStatus_Select_Result> usp_ClaimHeaderGroupImportStatus_Select(Nullable<int> claimHeaderGroupImportStatusId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var claimHeaderGroupImportStatusIdParameter = claimHeaderGroupImportStatusId.HasValue ?
                new ObjectParameter("ClaimHeaderGroupImportStatusId", claimHeaderGroupImportStatusId) :
                new ObjectParameter("ClaimHeaderGroupImportStatusId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimHeaderGroupImportStatus_Select_Result>("usp_ClaimHeaderGroupImportStatus_Select", claimHeaderGroupImportStatusIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_TmpBillingRequestResultManual_Preview_Result> usp_TmpBillingRequestResultManual_Preview(Nullable<int> headerId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var headerIdParameter = headerId.HasValue ?
                new ObjectParameter("HeaderId", headerId) :
                new ObjectParameter("HeaderId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TmpBillingRequestResultManual_Preview_Result>("usp_TmpBillingRequestResultManual_Preview", headerIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_TmpBillingRequestResultManualCount_Select_Result> usp_TmpBillingRequestResultManualCount_Select(Nullable<int> headerId)
        {
            var headerIdParameter = headerId.HasValue ?
                new ObjectParameter("HeaderId", headerId) :
                new ObjectParameter("HeaderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TmpBillingRequestResultManualCount_Select_Result>("usp_TmpBillingRequestResultManualCount_Select", headerIdParameter);
        }
    
        public virtual ObjectResult<usp_TmpBillingRequestResultManualImportDetail_Insert_Result> usp_TmpBillingRequestResultManualImportDetail_Insert(Nullable<int> headerId, string claimHeaderGroupCode, string claimCode, Nullable<decimal> amount, Nullable<decimal> coverAmount)
        {
            var headerIdParameter = headerId.HasValue ?
                new ObjectParameter("HeaderId", headerId) :
                new ObjectParameter("HeaderId", typeof(int));
    
            var claimHeaderGroupCodeParameter = claimHeaderGroupCode != null ?
                new ObjectParameter("ClaimHeaderGroupCode", claimHeaderGroupCode) :
                new ObjectParameter("ClaimHeaderGroupCode", typeof(string));
    
            var claimCodeParameter = claimCode != null ?
                new ObjectParameter("ClaimCode", claimCode) :
                new ObjectParameter("ClaimCode", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var coverAmountParameter = coverAmount.HasValue ?
                new ObjectParameter("CoverAmount", coverAmount) :
                new ObjectParameter("CoverAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TmpBillingRequestResultManualImportDetail_Insert_Result>("usp_TmpBillingRequestResultManualImportDetail_Insert", headerIdParameter, claimHeaderGroupCodeParameter, claimCodeParameter, amountParameter, coverAmountParameter);
        }
    
        public virtual ObjectResult<usp_TmpBillingRequestResultManualImportHeader_Insert_Result> usp_TmpBillingRequestResultManualImportHeader_Insert(Nullable<int> createdByUserId)
        {
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TmpBillingRequestResultManualImportHeader_Insert_Result>("usp_TmpBillingRequestResultManualImportHeader_Insert", createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_TmpBillingRequestResultManual_Insert_Result> usp_TmpBillingRequestResultManual_Insert(Nullable<int> headerId, Nullable<int> createdByUserId)
        {
            var headerIdParameter = headerId.HasValue ?
                new ObjectParameter("HeaderId", headerId) :
                new ObjectParameter("HeaderId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TmpBillingRequestResultManual_Insert_Result>("usp_TmpBillingRequestResultManual_Insert", headerIdParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_TmpBillingRequestResultManual_Validate_Result> usp_TmpBillingRequestResultManual_Validate(Nullable<int> headerId)
        {
            var headerIdParameter = headerId.HasValue ?
                new ObjectParameter("HeaderId", headerId) :
                new ObjectParameter("HeaderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TmpBillingRequestResultManual_Validate_Result>("usp_TmpBillingRequestResultManual_Validate", headerIdParameter);
        }
    
        public virtual ObjectResult<usp_ReportBillingRequestResultConfirm_Select_Result> usp_ReportBillingRequestResultConfirm_Select(Nullable<int> dateType, Nullable<int> claimGroupType, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string claimType, Nullable<int> insuranceCompany, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var dateTypeParameter = dateType.HasValue ?
                new ObjectParameter("DateType", dateType) :
                new ObjectParameter("DateType", typeof(int));
    
            var claimGroupTypeParameter = claimGroupType.HasValue ?
                new ObjectParameter("ClaimGroupType", claimGroupType) :
                new ObjectParameter("ClaimGroupType", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var claimTypeParameter = claimType != null ?
                new ObjectParameter("ClaimType", claimType) :
                new ObjectParameter("ClaimType", typeof(string));
    
            var insuranceCompanyParameter = insuranceCompany.HasValue ?
                new ObjectParameter("InsuranceCompany", insuranceCompany) :
                new ObjectParameter("InsuranceCompany", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ReportBillingRequestResultConfirm_Select_Result>("usp_ReportBillingRequestResultConfirm_Select", dateTypeParameter, claimGroupTypeParameter, dateFromParameter, dateToParameter, claimTypeParameter, insuranceCompanyParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_Report_BillingRequest_Select_Result> usp_Report_BillingRequest_Select(Nullable<int> searchTypeId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> insuranceId)
        {
            var searchTypeIdParameter = searchTypeId.HasValue ?
                new ObjectParameter("SearchTypeId", searchTypeId) :
                new ObjectParameter("SearchTypeId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var insuranceIdParameter = insuranceId.HasValue ?
                new ObjectParameter("InsuranceId", insuranceId) :
                new ObjectParameter("InsuranceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Report_BillingRequest_Select_Result>("usp_Report_BillingRequest_Select", searchTypeIdParameter, dateFromParameter, dateToParameter, insuranceIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimType_Select_Result> usp_ClaimType_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimType_Select_Result>("usp_ClaimType_Select");
        }
    
        public virtual ObjectResult<usp_DashboardOutstandingBalanceTotal_Select_Result> usp_DashboardOutstandingBalanceTotal_Select(string claimType, Nullable<int> organizeId)
        {
            var claimTypeParameter = claimType != null ?
                new ObjectParameter("ClaimType", claimType) :
                new ObjectParameter("ClaimType", typeof(string));
    
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DashboardOutstandingBalanceTotal_Select_Result>("usp_DashboardOutstandingBalanceTotal_Select", claimTypeParameter, organizeIdParameter);
        }
    
        public virtual ObjectResult<usp_DashboardOutStandingOverDuedateAmount_Select_Result> usp_DashboardOutStandingOverDuedateAmount_Select(string claimType, string dueDateLength, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail, Nullable<int> organizeId)
        {
            var claimTypeParameter = claimType != null ?
                new ObjectParameter("ClaimType", claimType) :
                new ObjectParameter("ClaimType", typeof(string));
    
            var dueDateLengthParameter = dueDateLength != null ?
                new ObjectParameter("DueDateLength", dueDateLength) :
                new ObjectParameter("DueDateLength", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DashboardOutStandingOverDuedateAmount_Select_Result>("usp_DashboardOutStandingOverDuedateAmount_Select", claimTypeParameter, dueDateLengthParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter, organizeIdParameter);
        }
    
        public virtual ObjectResult<usp_Report_PaymentDifferenceResult_Select_Result> usp_Report_PaymentDifferenceResult_Select(Nullable<int> searchTypeId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> insuranceId)
        {
            var searchTypeIdParameter = searchTypeId.HasValue ?
                new ObjectParameter("SearchTypeId", searchTypeId) :
                new ObjectParameter("SearchTypeId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var insuranceIdParameter = insuranceId.HasValue ?
                new ObjectParameter("InsuranceId", insuranceId) :
                new ObjectParameter("InsuranceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Report_PaymentDifferenceResult_Select_Result>("usp_Report_PaymentDifferenceResult_Select", searchTypeIdParameter, dateFromParameter, dateToParameter, insuranceIdParameter);
        }
    
        public virtual ObjectResult<usp_Report_OutStandingBalance_Select_Result> usp_Report_OutStandingBalance_Select(string claimType, Nullable<int> organizeId)
        {
            var claimTypeParameter = claimType != null ?
                new ObjectParameter("ClaimType", claimType) :
                new ObjectParameter("ClaimType", typeof(string));
    
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Report_OutStandingBalance_Select_Result>("usp_Report_OutStandingBalance_Select", claimTypeParameter, organizeIdParameter);
        }
    
        public virtual ObjectResult<usp_DashboardOutStandingDuedateAmount_Select_Result> usp_DashboardOutStandingDuedateAmount_Select(string claimType, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail, Nullable<int> organizeId)
        {
            var claimTypeParameter = claimType != null ?
                new ObjectParameter("ClaimType", claimType) :
                new ObjectParameter("ClaimType", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DashboardOutStandingDuedateAmount_Select_Result>("usp_DashboardOutStandingDuedateAmount_Select", claimTypeParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter, organizeIdParameter);
        }
    
        public virtual ObjectResult<usp_Report_EstimatePaymentReport_Select_Result> usp_Report_EstimatePaymentReport_Select(Nullable<int> searchTypeId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> insuranceId, Nullable<int> productGroupId)
        {
            var searchTypeIdParameter = searchTypeId.HasValue ?
                new ObjectParameter("SearchTypeId", searchTypeId) :
                new ObjectParameter("SearchTypeId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var insuranceIdParameter = insuranceId.HasValue ?
                new ObjectParameter("InsuranceId", insuranceId) :
                new ObjectParameter("InsuranceId", typeof(int));
    
            var productGroupIdParameter = productGroupId.HasValue ?
                new ObjectParameter("ProductGroupId", productGroupId) :
                new ObjectParameter("ProductGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Report_EstimatePaymentReport_Select_Result>("usp_Report_EstimatePaymentReport_Select", searchTypeIdParameter, dateFromParameter, dateToParameter, insuranceIdParameter, productGroupIdParameter);
        }
    
        public virtual ObjectResult<usp_Report_AmountPaymentReport_Select_Result> usp_Report_AmountPaymentReport_Select(Nullable<int> searchTypeId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> insuranceId, Nullable<int> productGroupId)
        {
            var searchTypeIdParameter = searchTypeId.HasValue ?
                new ObjectParameter("SearchTypeId", searchTypeId) :
                new ObjectParameter("SearchTypeId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var insuranceIdParameter = insuranceId.HasValue ?
                new ObjectParameter("InsuranceId", insuranceId) :
                new ObjectParameter("InsuranceId", typeof(int));
    
            var productGroupIdParameter = productGroupId.HasValue ?
                new ObjectParameter("ProductGroupId", productGroupId) :
                new ObjectParameter("ProductGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Report_AmountPaymentReport_Select_Result>("usp_Report_AmountPaymentReport_Select", searchTypeIdParameter, dateFromParameter, dateToParameter, insuranceIdParameter, productGroupIdParameter);
        }
    
        public virtual ObjectResult<usp_Report_OutStandingBalanceDetail_Select_Result> usp_Report_OutStandingBalanceDetail_Select(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> insuranceId)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var insuranceIdParameter = insuranceId.HasValue ?
                new ObjectParameter("InsuranceId", insuranceId) :
                new ObjectParameter("InsuranceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Report_OutStandingBalanceDetail_Select_Result>("usp_Report_OutStandingBalanceDetail_Select", dateFromParameter, dateToParameter, insuranceIdParameter);
        }
    
        public virtual ObjectResult<usp_DashboardClaimRejectCountAndAmountTotal_Select_Result> usp_DashboardClaimRejectCountAndAmountTotal_Select(Nullable<System.DateTime> billingDateFrom, Nullable<System.DateTime> billingDateTo, string claimType, Nullable<int> claimHeaderGroupType, Nullable<int> organizeId)
        {
            var billingDateFromParameter = billingDateFrom.HasValue ?
                new ObjectParameter("BillingDateFrom", billingDateFrom) :
                new ObjectParameter("BillingDateFrom", typeof(System.DateTime));
    
            var billingDateToParameter = billingDateTo.HasValue ?
                new ObjectParameter("BillingDateTo", billingDateTo) :
                new ObjectParameter("BillingDateTo", typeof(System.DateTime));
    
            var claimTypeParameter = claimType != null ?
                new ObjectParameter("ClaimType", claimType) :
                new ObjectParameter("ClaimType", typeof(string));
    
            var claimHeaderGroupTypeParameter = claimHeaderGroupType.HasValue ?
                new ObjectParameter("ClaimHeaderGroupType", claimHeaderGroupType) :
                new ObjectParameter("ClaimHeaderGroupType", typeof(int));
    
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DashboardClaimRejectCountAndAmountTotal_Select_Result>("usp_DashboardClaimRejectCountAndAmountTotal_Select", billingDateFromParameter, billingDateToParameter, claimTypeParameter, claimHeaderGroupTypeParameter, organizeIdParameter);
        }
    
        public virtual ObjectResult<usp_DashboardClaimRejectCountAndAmountTotalChart_Select_Result> usp_DashboardClaimRejectCountAndAmountTotalChart_Select(Nullable<System.DateTime> billingDateFrom, Nullable<System.DateTime> billingDateTo, string claimType, Nullable<int> claimHeaderGroupType, Nullable<int> organizeId)
        {
            var billingDateFromParameter = billingDateFrom.HasValue ?
                new ObjectParameter("BillingDateFrom", billingDateFrom) :
                new ObjectParameter("BillingDateFrom", typeof(System.DateTime));
    
            var billingDateToParameter = billingDateTo.HasValue ?
                new ObjectParameter("BillingDateTo", billingDateTo) :
                new ObjectParameter("BillingDateTo", typeof(System.DateTime));
    
            var claimTypeParameter = claimType != null ?
                new ObjectParameter("ClaimType", claimType) :
                new ObjectParameter("ClaimType", typeof(string));
    
            var claimHeaderGroupTypeParameter = claimHeaderGroupType.HasValue ?
                new ObjectParameter("ClaimHeaderGroupType", claimHeaderGroupType) :
                new ObjectParameter("ClaimHeaderGroupType", typeof(int));
    
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DashboardClaimRejectCountAndAmountTotalChart_Select_Result>("usp_DashboardClaimRejectCountAndAmountTotalChart_Select", billingDateFromParameter, billingDateToParameter, claimTypeParameter, claimHeaderGroupTypeParameter, organizeIdParameter);
        }
    
        public virtual ObjectResult<usp_DecisionStatus_Select_Result> usp_DecisionStatus_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DecisionStatus_Select_Result>("usp_DecisionStatus_Select");
        }
    
        public virtual ObjectResult<usp_Report_BillingRejectClaim_select_Result> usp_Report_BillingRejectClaim_select(Nullable<int> decisionStatusId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> insuranceId)
        {
            var decisionStatusIdParameter = decisionStatusId.HasValue ?
                new ObjectParameter("DecisionStatusId", decisionStatusId) :
                new ObjectParameter("DecisionStatusId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var insuranceIdParameter = insuranceId.HasValue ?
                new ObjectParameter("InsuranceId", insuranceId) :
                new ObjectParameter("InsuranceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Report_BillingRejectClaim_select_Result>("usp_Report_BillingRejectClaim_select", decisionStatusIdParameter, dateFromParameter, dateToParameter, insuranceIdParameter);
        }
    
        public virtual ObjectResult<usp_S3UploaderConfig_Select_Result> usp_S3UploaderConfig_Select(string parameterName)
        {
            var parameterNameParameter = parameterName != null ?
                new ObjectParameter("ParameterName", parameterName) :
                new ObjectParameter("ParameterName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_S3UploaderConfig_Select_Result>("usp_S3UploaderConfig_Select", parameterNameParameter);
        }
    
        public virtual ObjectResult<usp_GetS3ByBillingRequestGroupId_Select_Result> usp_GetS3ByBillingRequestGroupId_Select(Nullable<int> billingRequestGroupId, string billingRequestGroupListId, Nullable<int> isCheck)
        {
            var billingRequestGroupIdParameter = billingRequestGroupId.HasValue ?
                new ObjectParameter("BillingRequestGroupId", billingRequestGroupId) :
                new ObjectParameter("BillingRequestGroupId", typeof(int));
    
            var billingRequestGroupListIdParameter = billingRequestGroupListId != null ?
                new ObjectParameter("BillingRequestGroupListId", billingRequestGroupListId) :
                new ObjectParameter("BillingRequestGroupListId", typeof(string));
    
            var isCheckParameter = isCheck.HasValue ?
                new ObjectParameter("IsCheck", isCheck) :
                new ObjectParameter("IsCheck", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetS3ByBillingRequestGroupId_Select_Result>("usp_GetS3ByBillingRequestGroupId_Select", billingRequestGroupIdParameter, billingRequestGroupListIdParameter, isCheckParameter);
        }
    
        public virtual ObjectResult<usp_TmpClaimHeaderGroupImportDetail_Select_Result> usp_TmpClaimHeaderGroupImportDetail_Select(string tmpCode, Nullable<int> tmpClaimHeaderGroupImportId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var tmpCodeParameter = tmpCode != null ?
                new ObjectParameter("TmpCode", tmpCode) :
                new ObjectParameter("TmpCode", typeof(string));
    
            var tmpClaimHeaderGroupImportIdParameter = tmpClaimHeaderGroupImportId.HasValue ?
                new ObjectParameter("TmpClaimHeaderGroupImportId", tmpClaimHeaderGroupImportId) :
                new ObjectParameter("TmpClaimHeaderGroupImportId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TmpClaimHeaderGroupImportDetail_Select_Result>("usp_TmpClaimHeaderGroupImportDetail_Select", tmpCodeParameter, tmpClaimHeaderGroupImportIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_TmpClaimHeaderGroupImport_Validate_V2_Result> usp_TmpClaimHeaderGroupImport_Validate_V2(string tmpCode)
        {
            var tmpCodeParameter = tmpCode != null ?
                new ObjectParameter("TmpCode", tmpCode) :
                new ObjectParameter("TmpCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TmpClaimHeaderGroupImport_Validate_V2_Result>("usp_TmpClaimHeaderGroupImport_Validate_V2", tmpCodeParameter);
        }
    
        public virtual ObjectResult<usp_ClaimPayBackSubGroup_Insert_Result> usp_ClaimPayBackSubGroup_Insert(Nullable<int> claimPayBackTransferId, Nullable<int> createdByUserId)
        {
            var claimPayBackTransferIdParameter = claimPayBackTransferId.HasValue ?
                new ObjectParameter("ClaimPayBackTransferId", claimPayBackTransferId) :
                new ObjectParameter("ClaimPayBackTransferId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimPayBackSubGroup_Insert_Result>("usp_ClaimPayBackSubGroup_Insert", claimPayBackTransferIdParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_CompanyGroupHospital_Select_Result> usp_CompanyGroupHospital_Select(string province_id, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var province_idParameter = province_id != null ?
                new ObjectParameter("Province_id", province_id) :
                new ObjectParameter("Province_id", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CompanyGroupHospital_Select_Result>("usp_CompanyGroupHospital_Select", province_idParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_MedicalBillsReport_Select_Result> usp_MedicalBillsReport_Select(Nullable<int> claimPayBackSubGroupId)
        {
            var claimPayBackSubGroupIdParameter = claimPayBackSubGroupId.HasValue ?
                new ObjectParameter("ClaimPayBackSubGroupId", claimPayBackSubGroupId) :
                new ObjectParameter("ClaimPayBackSubGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MedicalBillsReport_Select_Result>("usp_MedicalBillsReport_Select", claimPayBackSubGroupIdParameter);
        }
    
        public virtual ObjectResult<usp_Province_Select_Result> usp_Province_Select(Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Province_Select_Result>("usp_Province_Select", indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_GetEmployeesByBranch_Select_Result> usp_GetEmployeesByBranch_Select(Nullable<int> userId, Nullable<int> branchId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetEmployeesByBranch_Select_Result>("usp_GetEmployeesByBranch_Select", userIdParameter, branchIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual int usp_GenerateCode_MedicalBill(string transactionCodeControlTypeDetail, Nullable<int> runningLenght, ObjectParameter result)
        {
            var transactionCodeControlTypeDetailParameter = transactionCodeControlTypeDetail != null ?
                new ObjectParameter("TransactionCodeControlTypeDetail", transactionCodeControlTypeDetail) :
                new ObjectParameter("TransactionCodeControlTypeDetail", typeof(string));
    
            var runningLenghtParameter = runningLenght.HasValue ?
                new ObjectParameter("RunningLenght", runningLenght) :
                new ObjectParameter("RunningLenght", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GenerateCode_MedicalBill", transactionCodeControlTypeDetailParameter, runningLenghtParameter, result);
        }
    
        public virtual ObjectResult<usp_ClaimPayBackSubGroupReferenceNo_Update_Result> usp_ClaimPayBackSubGroupReferenceNo_Update(Nullable<int> claimPayBackTransferId, Nullable<int> userId)
        {
            var claimPayBackTransferIdParameter = claimPayBackTransferId.HasValue ?
                new ObjectParameter("ClaimPayBackTransferId", claimPayBackTransferId) :
                new ObjectParameter("ClaimPayBackTransferId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimPayBackSubGroupReferenceNo_Update_Result>("usp_ClaimPayBackSubGroupReferenceNo_Update", claimPayBackTransferIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<usp_Report_ClaimPayBackTransfer_Select_Result> usp_Report_ClaimPayBackTransfer_Select(Nullable<int> searchTypeId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> insuranceId, Nullable<int> productGroupId, Nullable<int> branchId, Nullable<int> claimGroupTypeId)
        {
            var searchTypeIdParameter = searchTypeId.HasValue ?
                new ObjectParameter("SearchTypeId", searchTypeId) :
                new ObjectParameter("SearchTypeId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var insuranceIdParameter = insuranceId.HasValue ?
                new ObjectParameter("InsuranceId", insuranceId) :
                new ObjectParameter("InsuranceId", typeof(int));
    
            var productGroupIdParameter = productGroupId.HasValue ?
                new ObjectParameter("ProductGroupId", productGroupId) :
                new ObjectParameter("ProductGroupId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var claimGroupTypeIdParameter = claimGroupTypeId.HasValue ?
                new ObjectParameter("ClaimGroupTypeId", claimGroupTypeId) :
                new ObjectParameter("ClaimGroupTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Report_ClaimPayBackTransfer_Select_Result>("usp_Report_ClaimPayBackTransfer_Select", searchTypeIdParameter, dateFromParameter, dateToParameter, insuranceIdParameter, productGroupIdParameter, branchIdParameter, claimGroupTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimHeaderGroupDetail_SelectV3_Result> usp_ClaimHeaderGroupDetail_SelectV3(Nullable<int> productGroupId, Nullable<int> insuranceId, Nullable<int> claimGroupTypeId, Nullable<int> branchId, string createByUser_Code, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail, Nullable<bool> isShowDocumentLink)
        {
            var productGroupIdParameter = productGroupId.HasValue ?
                new ObjectParameter("ProductGroupId", productGroupId) :
                new ObjectParameter("ProductGroupId", typeof(int));
    
            var insuranceIdParameter = insuranceId.HasValue ?
                new ObjectParameter("InsuranceId", insuranceId) :
                new ObjectParameter("InsuranceId", typeof(int));
    
            var claimGroupTypeIdParameter = claimGroupTypeId.HasValue ?
                new ObjectParameter("ClaimGroupTypeId", claimGroupTypeId) :
                new ObjectParameter("ClaimGroupTypeId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var createByUser_CodeParameter = createByUser_Code != null ?
                new ObjectParameter("CreateByUser_Code", createByUser_Code) :
                new ObjectParameter("CreateByUser_Code", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            var isShowDocumentLinkParameter = isShowDocumentLink.HasValue ?
                new ObjectParameter("IsShowDocumentLink", isShowDocumentLink) :
                new ObjectParameter("IsShowDocumentLink", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimHeaderGroupDetail_SelectV3_Result>("usp_ClaimHeaderGroupDetail_SelectV3", productGroupIdParameter, insuranceIdParameter, claimGroupTypeIdParameter, branchIdParameter, createByUser_CodeParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter, isShowDocumentLinkParameter);
        }
    
        public virtual ObjectResult<usp_MedicalBillAttachment_Insert_Result> usp_MedicalBillAttachment_Insert(Nullable<int> documentId, string attachmentName, string employeeCode)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(int));
    
            var attachmentNameParameter = attachmentName != null ?
                new ObjectParameter("AttachmentName", attachmentName) :
                new ObjectParameter("AttachmentName", typeof(string));
    
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MedicalBillAttachment_Insert_Result>("usp_MedicalBillAttachment_Insert", documentIdParameter, attachmentNameParameter, employeeCodeParameter);
        }
    
        public virtual ObjectResult<usp_MedicalBillDocument_Insert_Result> usp_MedicalBillDocument_Insert(Nullable<int> documentListID, Nullable<System.DateTime> documentDate, string employeeCode)
        {
            var documentListIDParameter = documentListID.HasValue ?
                new ObjectParameter("DocumentListID", documentListID) :
                new ObjectParameter("DocumentListID", typeof(int));
    
            var documentDateParameter = documentDate.HasValue ?
                new ObjectParameter("DocumentDate", documentDate) :
                new ObjectParameter("DocumentDate", typeof(System.DateTime));
    
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MedicalBillDocument_Insert_Result>("usp_MedicalBillDocument_Insert", documentListIDParameter, documentDateParameter, employeeCodeParameter);
        }
    
        public virtual ObjectResult<usp_MedicalBillDocumentData_Insert_Result> usp_MedicalBillDocumentData_Insert(Nullable<int> documentIndexID, Nullable<int> documentID, string documentIndexData, string employeeCode)
        {
            var documentIndexIDParameter = documentIndexID.HasValue ?
                new ObjectParameter("DocumentIndexID", documentIndexID) :
                new ObjectParameter("DocumentIndexID", typeof(int));
    
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var documentIndexDataParameter = documentIndexData != null ?
                new ObjectParameter("DocumentIndexData", documentIndexData) :
                new ObjectParameter("DocumentIndexData", typeof(string));
    
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MedicalBillDocumentData_Insert_Result>("usp_MedicalBillDocumentData_Insert", documentIndexIDParameter, documentIDParameter, documentIndexDataParameter, employeeCodeParameter);
        }
    
        public virtual ObjectResult<usp_ClaimPayBackSubGroup_Select_Result> usp_ClaimPayBackSubGroup_Select(Nullable<int> claimPayBackTransferId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail, Nullable<bool> mailStatus, Nullable<bool> docStatus, Nullable<bool> isTransaction)
        {
            var claimPayBackTransferIdParameter = claimPayBackTransferId.HasValue ?
                new ObjectParameter("ClaimPayBackTransferId", claimPayBackTransferId) :
                new ObjectParameter("ClaimPayBackTransferId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            var mailStatusParameter = mailStatus.HasValue ?
                new ObjectParameter("MailStatus", mailStatus) :
                new ObjectParameter("MailStatus", typeof(bool));
    
            var docStatusParameter = docStatus.HasValue ?
                new ObjectParameter("DocStatus", docStatus) :
                new ObjectParameter("DocStatus", typeof(bool));
    
            var isTransactionParameter = isTransaction.HasValue ?
                new ObjectParameter("IsTransaction", isTransaction) :
                new ObjectParameter("IsTransaction", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimPayBackSubGroup_Select_Result>("usp_ClaimPayBackSubGroup_Select", claimPayBackTransferIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter, mailStatusParameter, docStatusParameter, isTransactionParameter);
        }
    
        public virtual ObjectResult<usp_CheckCompanyBankAccount_Select_Result> usp_CheckCompanyBankAccount_Select(string claimGroupCodeList, Nullable<int> claimGroupTypeId)
        {
            var claimGroupCodeListParameter = claimGroupCodeList != null ?
                new ObjectParameter("ClaimGroupCodeList", claimGroupCodeList) :
                new ObjectParameter("ClaimGroupCodeList", typeof(string));
    
            var claimGroupTypeIdParameter = claimGroupTypeId.HasValue ?
                new ObjectParameter("ClaimGroupTypeId", claimGroupTypeId) :
                new ObjectParameter("ClaimGroupTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CheckCompanyBankAccount_Select_Result>("usp_CheckCompanyBankAccount_Select", claimGroupCodeListParameter, claimGroupTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_MedicalBillsReportByClaimPayBackSubGroupId_Select_Result> usp_MedicalBillsReportByClaimPayBackSubGroupId_Select(Nullable<int> claimPayBackSubGroupId)
        {
            var claimPayBackSubGroupIdParameter = claimPayBackSubGroupId.HasValue ?
                new ObjectParameter("ClaimPayBackSubGroupId", claimPayBackSubGroupId) :
                new ObjectParameter("ClaimPayBackSubGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MedicalBillsReportByClaimPayBackSubGroupId_Select_Result>("usp_MedicalBillsReportByClaimPayBackSubGroupId_Select", claimPayBackSubGroupIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimPayBackTransfer_Update_Result> usp_ClaimPayBackTransfer_Update(Nullable<int> claimBayBackTransferId, Nullable<decimal> transferAmount, Nullable<System.DateTime> transferDate, Nullable<int> updatedByUserId)
        {
            var claimBayBackTransferIdParameter = claimBayBackTransferId.HasValue ?
                new ObjectParameter("ClaimBayBackTransferId", claimBayBackTransferId) :
                new ObjectParameter("ClaimBayBackTransferId", typeof(int));
    
            var transferAmountParameter = transferAmount.HasValue ?
                new ObjectParameter("TransferAmount", transferAmount) :
                new ObjectParameter("TransferAmount", typeof(decimal));
    
            var transferDateParameter = transferDate.HasValue ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(System.DateTime));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimPayBackTransfer_Update_Result>("usp_ClaimPayBackTransfer_Update", claimBayBackTransferIdParameter, transferAmountParameter, transferDateParameter, updatedByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_Report_ClaimPayBackTransferCL_Select_Result1> usp_Report_ClaimPayBackTransferCL_Select(Nullable<int> searchTypeId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> insuranceId, Nullable<int> productGroupId, Nullable<int> branchId, Nullable<int> claimGroupTypeId)
        {
            var searchTypeIdParameter = searchTypeId.HasValue ?
                new ObjectParameter("SearchTypeId", searchTypeId) :
                new ObjectParameter("SearchTypeId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var insuranceIdParameter = insuranceId.HasValue ?
                new ObjectParameter("InsuranceId", insuranceId) :
                new ObjectParameter("InsuranceId", typeof(int));
    
            var productGroupIdParameter = productGroupId.HasValue ?
                new ObjectParameter("ProductGroupId", productGroupId) :
                new ObjectParameter("ProductGroupId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var claimGroupTypeIdParameter = claimGroupTypeId.HasValue ?
                new ObjectParameter("ClaimGroupTypeId", claimGroupTypeId) :
                new ObjectParameter("ClaimGroupTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Report_ClaimPayBackTransferCL_Select_Result1>("usp_Report_ClaimPayBackTransferCL_Select", searchTypeIdParameter, dateFromParameter, dateToParameter, insuranceIdParameter, productGroupIdParameter, branchIdParameter, claimGroupTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_DashboardBillingAmountTotal_Detail_Select_Result> usp_DashboardBillingAmountTotal_Detail_Select(Nullable<System.DateTime> billingDateFrom, Nullable<System.DateTime> billingDateTo, string claimType, Nullable<int> claimHeaderGroupType, Nullable<int> organizeId)
        {
            var billingDateFromParameter = billingDateFrom.HasValue ?
                new ObjectParameter("BillingDateFrom", billingDateFrom) :
                new ObjectParameter("BillingDateFrom", typeof(System.DateTime));
    
            var billingDateToParameter = billingDateTo.HasValue ?
                new ObjectParameter("BillingDateTo", billingDateTo) :
                new ObjectParameter("BillingDateTo", typeof(System.DateTime));
    
            var claimTypeParameter = claimType != null ?
                new ObjectParameter("ClaimType", claimType) :
                new ObjectParameter("ClaimType", typeof(string));
    
            var claimHeaderGroupTypeParameter = claimHeaderGroupType.HasValue ?
                new ObjectParameter("ClaimHeaderGroupType", claimHeaderGroupType) :
                new ObjectParameter("ClaimHeaderGroupType", typeof(int));
    
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DashboardBillingAmountTotal_Detail_Select_Result>("usp_DashboardBillingAmountTotal_Detail_Select", billingDateFromParameter, billingDateToParameter, claimTypeParameter, claimHeaderGroupTypeParameter, organizeIdParameter);
        }
    
        public virtual ObjectResult<usp_DashboardClaimApproveBillingCountAndAmount_Select_Result> usp_DashboardClaimApproveBillingCountAndAmount_Select(Nullable<System.DateTime> billingDateFrom, Nullable<System.DateTime> billingDateTo, string claimType, Nullable<int> claimHeaderGroupType, Nullable<int> organizeId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var billingDateFromParameter = billingDateFrom.HasValue ?
                new ObjectParameter("BillingDateFrom", billingDateFrom) :
                new ObjectParameter("BillingDateFrom", typeof(System.DateTime));
    
            var billingDateToParameter = billingDateTo.HasValue ?
                new ObjectParameter("BillingDateTo", billingDateTo) :
                new ObjectParameter("BillingDateTo", typeof(System.DateTime));
    
            var claimTypeParameter = claimType != null ?
                new ObjectParameter("ClaimType", claimType) :
                new ObjectParameter("ClaimType", typeof(string));
    
            var claimHeaderGroupTypeParameter = claimHeaderGroupType.HasValue ?
                new ObjectParameter("ClaimHeaderGroupType", claimHeaderGroupType) :
                new ObjectParameter("ClaimHeaderGroupType", typeof(int));
    
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DashboardClaimApproveBillingCountAndAmount_Select_Result>("usp_DashboardClaimApproveBillingCountAndAmount_Select", billingDateFromParameter, billingDateToParameter, claimTypeParameter, claimHeaderGroupTypeParameter, organizeIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_DashboardOutstandingBalanceTotal_Detail_Select_Result> usp_DashboardOutstandingBalanceTotal_Detail_Select(Nullable<System.DateTime> billingDateFrom, Nullable<System.DateTime> billingDateTo, string claimType, Nullable<int> claimHeaderGroupType, Nullable<int> organizeId)
        {
            var billingDateFromParameter = billingDateFrom.HasValue ?
                new ObjectParameter("BillingDateFrom", billingDateFrom) :
                new ObjectParameter("BillingDateFrom", typeof(System.DateTime));
    
            var billingDateToParameter = billingDateTo.HasValue ?
                new ObjectParameter("BillingDateTo", billingDateTo) :
                new ObjectParameter("BillingDateTo", typeof(System.DateTime));
    
            var claimTypeParameter = claimType != null ?
                new ObjectParameter("ClaimType", claimType) :
                new ObjectParameter("ClaimType", typeof(string));
    
            var claimHeaderGroupTypeParameter = claimHeaderGroupType.HasValue ?
                new ObjectParameter("ClaimHeaderGroupType", claimHeaderGroupType) :
                new ObjectParameter("ClaimHeaderGroupType", typeof(int));
    
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DashboardOutstandingBalanceTotal_Detail_Select_Result>("usp_DashboardOutstandingBalanceTotal_Detail_Select", billingDateFromParameter, billingDateToParameter, claimTypeParameter, claimHeaderGroupTypeParameter, organizeIdParameter);
        }
    
        public virtual ObjectResult<usp_DashboardPaymentAmountTotal_Detail_Select_Result> usp_DashboardPaymentAmountTotal_Detail_Select(Nullable<System.DateTime> billingDateFrom, Nullable<System.DateTime> billingDateTo, string claimType, Nullable<int> claimHeaderGroupType, Nullable<int> organizeId)
        {
            var billingDateFromParameter = billingDateFrom.HasValue ?
                new ObjectParameter("BillingDateFrom", billingDateFrom) :
                new ObjectParameter("BillingDateFrom", typeof(System.DateTime));
    
            var billingDateToParameter = billingDateTo.HasValue ?
                new ObjectParameter("BillingDateTo", billingDateTo) :
                new ObjectParameter("BillingDateTo", typeof(System.DateTime));
    
            var claimTypeParameter = claimType != null ?
                new ObjectParameter("ClaimType", claimType) :
                new ObjectParameter("ClaimType", typeof(string));
    
            var claimHeaderGroupTypeParameter = claimHeaderGroupType.HasValue ?
                new ObjectParameter("ClaimHeaderGroupType", claimHeaderGroupType) :
                new ObjectParameter("ClaimHeaderGroupType", typeof(int));
    
            var organizeIdParameter = organizeId.HasValue ?
                new ObjectParameter("OrganizeId", organizeId) :
                new ObjectParameter("OrganizeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DashboardPaymentAmountTotal_Detail_Select_Result>("usp_DashboardPaymentAmountTotal_Detail_Select", billingDateFromParameter, billingDateToParameter, claimTypeParameter, claimHeaderGroupTypeParameter, organizeIdParameter);
        }
    
        public virtual ObjectResult<usp_BillingRequestResultConfirm_Insert_Result> usp_BillingRequestResultConfirm_Insert(string tmpCode, string fileName, Nullable<int> createByUseId)
        {
            var tmpCodeParameter = tmpCode != null ?
                new ObjectParameter("TmpCode", tmpCode) :
                new ObjectParameter("TmpCode", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var createByUseIdParameter = createByUseId.HasValue ?
                new ObjectParameter("CreateByUseId", createByUseId) :
                new ObjectParameter("CreateByUseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BillingRequestResultConfirm_Insert_Result>("usp_BillingRequestResultConfirm_Insert", tmpCodeParameter, fileNameParameter, createByUseIdParameter);
        }
    
        public virtual ObjectResult<usp_Out2ApproveMonitor_Select_Result> usp_Out2ApproveMonitor_Select(Nullable<int> dateType, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> billingRecieveStatusId, Nullable<int> insuranceCompanyId, Nullable<int> claimGroupTypeId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var dateTypeParameter = dateType.HasValue ?
                new ObjectParameter("DateType", dateType) :
                new ObjectParameter("DateType", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var billingRecieveStatusIdParameter = billingRecieveStatusId.HasValue ?
                new ObjectParameter("BillingRecieveStatusId", billingRecieveStatusId) :
                new ObjectParameter("BillingRecieveStatusId", typeof(int));
    
            var insuranceCompanyIdParameter = insuranceCompanyId.HasValue ?
                new ObjectParameter("InsuranceCompanyId", insuranceCompanyId) :
                new ObjectParameter("InsuranceCompanyId", typeof(int));
    
            var claimGroupTypeIdParameter = claimGroupTypeId.HasValue ?
                new ObjectParameter("ClaimGroupTypeId", claimGroupTypeId) :
                new ObjectParameter("ClaimGroupTypeId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Out2ApproveMonitor_Select_Result>("usp_Out2ApproveMonitor_Select", dateTypeParameter, startDateParameter, endDateParameter, billingRecieveStatusIdParameter, insuranceCompanyIdParameter, claimGroupTypeIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_HospitalAccountDetails_Select_Result> usp_HospitalAccountDetails_Select(string hospitalCode)
        {
            var hospitalCodeParameter = hospitalCode != null ?
                new ObjectParameter("HospitalCode", hospitalCode) :
                new ObjectParameter("HospitalCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_HospitalAccountDetails_Select_Result>("usp_HospitalAccountDetails_Select", hospitalCodeParameter);
        }
    
        public virtual ObjectResult<usp_ClaimPayBackSubGroupTransactionDetails_Select_Result> usp_ClaimPayBackSubGroupTransactionDetails_Select(Nullable<int> subGroupId)
        {
            var subGroupIdParameter = subGroupId.HasValue ?
                new ObjectParameter("SubGroupId", subGroupId) :
                new ObjectParameter("SubGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimPayBackSubGroupTransactionDetails_Select_Result>("usp_ClaimPayBackSubGroupTransactionDetails_Select", subGroupIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimPayBackSubGroupRePayTransfer_Select_Result> usp_ClaimPayBackSubGroupRePayTransfer_Select(string hospitalCode, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var hospitalCodeParameter = hospitalCode != null ?
                new ObjectParameter("HospitalCode", hospitalCode) :
                new ObjectParameter("HospitalCode", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimPayBackSubGroupRePayTransfer_Select_Result>("usp_ClaimPayBackSubGroupRePayTransfer_Select", hospitalCodeParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_Report_ClaimPayBackTransfersFinancialTransaction_Select_Result> usp_Report_ClaimPayBackTransfersFinancialTransaction_Select(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> insuranceId, Nullable<int> productGroupId, Nullable<int> claimGroupTypeId)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var insuranceIdParameter = insuranceId.HasValue ?
                new ObjectParameter("InsuranceId", insuranceId) :
                new ObjectParameter("InsuranceId", typeof(int));
    
            var productGroupIdParameter = productGroupId.HasValue ?
                new ObjectParameter("ProductGroupId", productGroupId) :
                new ObjectParameter("ProductGroupId", typeof(int));
    
            var claimGroupTypeIdParameter = claimGroupTypeId.HasValue ?
                new ObjectParameter("ClaimGroupTypeId", claimGroupTypeId) :
                new ObjectParameter("ClaimGroupTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Report_ClaimPayBackTransfersFinancialTransaction_Select_Result>("usp_Report_ClaimPayBackTransfersFinancialTransaction_Select", dateFromParameter, dateToParameter, insuranceIdParameter, productGroupIdParameter, claimGroupTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_Report_ClaimPayBackFinancialTransactionDetail_Select_Result> usp_Report_ClaimPayBackFinancialTransactionDetail_Select(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> insuranceId, Nullable<int> productGroupId, Nullable<int> claimGroupTypeId)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var insuranceIdParameter = insuranceId.HasValue ?
                new ObjectParameter("InsuranceId", insuranceId) :
                new ObjectParameter("InsuranceId", typeof(int));
    
            var productGroupIdParameter = productGroupId.HasValue ?
                new ObjectParameter("ProductGroupId", productGroupId) :
                new ObjectParameter("ProductGroupId", typeof(int));
    
            var claimGroupTypeIdParameter = claimGroupTypeId.HasValue ?
                new ObjectParameter("ClaimGroupTypeId", claimGroupTypeId) :
                new ObjectParameter("ClaimGroupTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Report_ClaimPayBackFinancialTransactionDetail_Select_Result>("usp_Report_ClaimPayBackFinancialTransactionDetail_Select", dateFromParameter, dateToParameter, insuranceIdParameter, productGroupIdParameter, claimGroupTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimPayBackTransferMonitor_Select_Result> usp_ClaimPayBackTransferMonitor_Select(Nullable<System.DateTime> createdDateFrom, Nullable<System.DateTime> createdDateTo, Nullable<int> claimPayBackTransferStatusId, Nullable<int> claimGroupType, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType, string searchDetail)
        {
            var createdDateFromParameter = createdDateFrom.HasValue ?
                new ObjectParameter("CreatedDateFrom", createdDateFrom) :
                new ObjectParameter("CreatedDateFrom", typeof(System.DateTime));
    
            var createdDateToParameter = createdDateTo.HasValue ?
                new ObjectParameter("CreatedDateTo", createdDateTo) :
                new ObjectParameter("CreatedDateTo", typeof(System.DateTime));
    
            var claimPayBackTransferStatusIdParameter = claimPayBackTransferStatusId.HasValue ?
                new ObjectParameter("ClaimPayBackTransferStatusId", claimPayBackTransferStatusId) :
                new ObjectParameter("ClaimPayBackTransferStatusId", typeof(int));
    
            var claimGroupTypeParameter = claimGroupType.HasValue ?
                new ObjectParameter("ClaimGroupType", claimGroupType) :
                new ObjectParameter("ClaimGroupType", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchDetailParameter = searchDetail != null ?
                new ObjectParameter("SearchDetail", searchDetail) :
                new ObjectParameter("SearchDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimPayBackTransferMonitor_Select_Result>("usp_ClaimPayBackTransferMonitor_Select", createdDateFromParameter, createdDateToParameter, claimPayBackTransferStatusIdParameter, claimGroupTypeParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter, searchDetailParameter);
        }
    
        public virtual ObjectResult<usp_Report_ClaimPayBackFinancialSMITransaction_Select_Result> usp_Report_ClaimPayBackFinancialSMITransaction_Select(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> insuranceId, Nullable<int> productGroupId, Nullable<int> claimGroupTypeId)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var insuranceIdParameter = insuranceId.HasValue ?
                new ObjectParameter("InsuranceId", insuranceId) :
                new ObjectParameter("InsuranceId", typeof(int));
    
            var productGroupIdParameter = productGroupId.HasValue ?
                new ObjectParameter("ProductGroupId", productGroupId) :
                new ObjectParameter("ProductGroupId", typeof(int));
    
            var claimGroupTypeIdParameter = claimGroupTypeId.HasValue ?
                new ObjectParameter("ClaimGroupTypeId", claimGroupTypeId) :
                new ObjectParameter("ClaimGroupTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Report_ClaimPayBackFinancialSMITransaction_Select_Result>("usp_Report_ClaimPayBackFinancialSMITransaction_Select", dateFromParameter, dateToParameter, insuranceIdParameter, productGroupIdParameter, claimGroupTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_Report_ClaimPayBackFinancialTransactionDetailSMI_Select_Result> usp_Report_ClaimPayBackFinancialTransactionDetailSMI_Select(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> insuranceId, Nullable<int> productGroupId, Nullable<int> claimGroupTypeId)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var insuranceIdParameter = insuranceId.HasValue ?
                new ObjectParameter("InsuranceId", insuranceId) :
                new ObjectParameter("InsuranceId", typeof(int));
    
            var productGroupIdParameter = productGroupId.HasValue ?
                new ObjectParameter("ProductGroupId", productGroupId) :
                new ObjectParameter("ProductGroupId", typeof(int));
    
            var claimGroupTypeIdParameter = claimGroupTypeId.HasValue ?
                new ObjectParameter("ClaimGroupTypeId", claimGroupTypeId) :
                new ObjectParameter("ClaimGroupTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Report_ClaimPayBackFinancialTransactionDetailSMI_Select_Result>("usp_Report_ClaimPayBackFinancialTransactionDetailSMI_Select", dateFromParameter, dateToParameter, insuranceIdParameter, productGroupIdParameter, claimGroupTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_ClaimPayBackDetail_InsertV4_Result> usp_ClaimPayBackDetail_InsertV4(string claimGroupCodeList, Nullable<int> productGroupId, Nullable<int> claimGroupTypeId, Nullable<int> createdByUserId)
        {
            var claimGroupCodeListParameter = claimGroupCodeList != null ?
                new ObjectParameter("ClaimGroupCodeList", claimGroupCodeList) :
                new ObjectParameter("ClaimGroupCodeList", typeof(string));
    
            var productGroupIdParameter = productGroupId.HasValue ?
                new ObjectParameter("ProductGroupId", productGroupId) :
                new ObjectParameter("ProductGroupId", typeof(int));
    
            var claimGroupTypeIdParameter = claimGroupTypeId.HasValue ?
                new ObjectParameter("ClaimGroupTypeId", claimGroupTypeId) :
                new ObjectParameter("ClaimGroupTypeId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClaimPayBackDetail_InsertV4_Result>("usp_ClaimPayBackDetail_InsertV4", claimGroupCodeListParameter, productGroupIdParameter, claimGroupTypeIdParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_Report_ClaimPayBackFinancialTransaction_Select_Result> usp_Report_ClaimPayBackFinancialTransaction_Select(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> insuranceId, Nullable<int> productGroupId, Nullable<int> claimGroupTypeId)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var insuranceIdParameter = insuranceId.HasValue ?
                new ObjectParameter("InsuranceId", insuranceId) :
                new ObjectParameter("InsuranceId", typeof(int));
    
            var productGroupIdParameter = productGroupId.HasValue ?
                new ObjectParameter("ProductGroupId", productGroupId) :
                new ObjectParameter("ProductGroupId", typeof(int));
    
            var claimGroupTypeIdParameter = claimGroupTypeId.HasValue ?
                new ObjectParameter("ClaimGroupTypeId", claimGroupTypeId) :
                new ObjectParameter("ClaimGroupTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Report_ClaimPayBackFinancialTransaction_Select_Result>("usp_Report_ClaimPayBackFinancialTransaction_Select", dateFromParameter, dateToParameter, insuranceIdParameter, productGroupIdParameter, claimGroupTypeIdParameter);
        }
    }
}
