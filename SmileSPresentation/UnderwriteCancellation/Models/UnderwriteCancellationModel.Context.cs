//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UnderwriteCancellation.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class UnderwriteCancellationEntities : DbContext
    {
        public UnderwriteCancellationEntities()
            : base("name=UnderwriteCancellationEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<usp_pvProductGroupQueueCount_Select_Result> usp_pvProductGroupQueueCount_Select(Nullable<System.DateTime> period, Nullable<int> assignToUserId)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pvProductGroupQueueCount_Select_Result>("usp_pvProductGroupQueueCount_Select", periodParameter, assignToUserIdParameter);
        }
    
        public virtual ObjectResult<usp_pvQueueStatusCount_Select_Result> usp_pvQueueStatusCount_Select(Nullable<System.DateTime> period, Nullable<int> assignToUserId)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pvQueueStatusCount_Select_Result>("usp_pvQueueStatusCount_Select", periodParameter, assignToUserIdParameter);
        }
    
        public virtual ObjectResult<usp_pvQueueQCUser_Select_Result> usp_pvQueueQCUser_Select(Nullable<System.DateTime> period, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pvQueueQCUser_Select_Result>("usp_pvQueueQCUser_Select", periodParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_CallStatus_Select_Result> usp_CallStatus_Select(Nullable<int> callStatusId)
        {
            var callStatusIdParameter = callStatusId.HasValue ?
                new ObjectParameter("CallStatusId", callStatusId) :
                new ObjectParameter("CallStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CallStatus_Select_Result>("usp_CallStatus_Select", callStatusIdParameter);
        }
    
        public virtual ObjectResult<usp_QCEmployee_Select_Result> usp_QCEmployee_Select(string searchText)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QCEmployee_Select_Result>("usp_QCEmployee_Select", searchTextParameter);
        }
    
        public virtual ObjectResult<usp_QCUser_Insert_Result> usp_QCUser_Insert(Nullable<int> userId, Nullable<int> createdByUserId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QCUser_Insert_Result>("usp_QCUser_Insert", userIdParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QCUser_Select_Result> usp_QCUser_Select(string searchText, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QCUser_Select_Result>("usp_QCUser_Select", searchTextParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QCUser_Update_Result> usp_QCUser_Update(Nullable<int> qCUserId, Nullable<bool> isActive, Nullable<int> updatedByUserId)
        {
            var qCUserIdParameter = qCUserId.HasValue ?
                new ObjectParameter("QCUserId", qCUserId) :
                new ObjectParameter("QCUserId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QCUser_Update_Result>("usp_QCUser_Update", qCUserIdParameter, isActiveParameter, updatedByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QCUserById_Select_Result> usp_QCUserById_Select(Nullable<int> qCUserId)
        {
            var qCUserIdParameter = qCUserId.HasValue ?
                new ObjectParameter("QCUserId", qCUserId) :
                new ObjectParameter("QCUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QCUserById_Select_Result>("usp_QCUserById_Select", qCUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueCreate_Insert_Result> usp_QueueCreate_Insert(Nullable<System.DateTime> period, Nullable<int> createdByUserId)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCreate_Insert_Result>("usp_QueueCreate_Insert", periodParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueCreate_Select_Result> usp_QueueCreate_Select(Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCreate_Select_Result>("usp_QueueCreate_Select", indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueCloseAll_Update_Result> usp_QueueCloseAll_Update(Nullable<System.DateTime> period, Nullable<int> assignToUserId, Nullable<int> callStatusId, string payerName, string payerIdCard, string payerPhone, Nullable<int> updatedByUserId)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var callStatusIdParameter = callStatusId.HasValue ?
                new ObjectParameter("CallStatusId", callStatusId) :
                new ObjectParameter("CallStatusId", typeof(int));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var payerIdCardParameter = payerIdCard != null ?
                new ObjectParameter("PayerIdCard", payerIdCard) :
                new ObjectParameter("PayerIdCard", typeof(string));
    
            var payerPhoneParameter = payerPhone != null ?
                new ObjectParameter("PayerPhone", payerPhone) :
                new ObjectParameter("PayerPhone", typeof(string));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCloseAll_Update_Result>("usp_QueueCloseAll_Update", periodParameter, assignToUserIdParameter, callStatusIdParameter, payerNameParameter, payerIdCardParameter, payerPhoneParameter, updatedByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueuePending_Select_Result> usp_QueuePending_Select(Nullable<System.DateTime> period, Nullable<int> assignToUserId, Nullable<int> callStatusId, string payerName, string payerIdCard, string payerPhone, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var callStatusIdParameter = callStatusId.HasValue ?
                new ObjectParameter("CallStatusId", callStatusId) :
                new ObjectParameter("CallStatusId", typeof(int));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var payerIdCardParameter = payerIdCard != null ?
                new ObjectParameter("PayerIdCard", payerIdCard) :
                new ObjectParameter("PayerIdCard", typeof(string));
    
            var payerPhoneParameter = payerPhone != null ?
                new ObjectParameter("PayerPhone", payerPhone) :
                new ObjectParameter("PayerPhone", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueuePending_Select_Result>("usp_QueuePending_Select", periodParameter, assignToUserIdParameter, callStatusIdParameter, payerNameParameter, payerIdCardParameter, payerPhoneParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueClose_Update_Result> usp_QueueClose_Update(Nullable<int> queueId, Nullable<int> updatedByUserId)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueClose_Update_Result>("usp_QueueClose_Update", queueIdParameter, updatedByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueDetail_Select_Result> usp_QueueDetail_Select(Nullable<int> queueId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueDetail_Select_Result>("usp_QueueDetail_Select", queueIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueDetailRemark_Update_Result> usp_QueueDetailRemark_Update(Nullable<int> queueDetailId, string queueDetailRemark, Nullable<int> updatedByUserId)
        {
            var queueDetailIdParameter = queueDetailId.HasValue ?
                new ObjectParameter("QueueDetailId", queueDetailId) :
                new ObjectParameter("QueueDetailId", typeof(int));
    
            var queueDetailRemarkParameter = queueDetailRemark != null ?
                new ObjectParameter("QueueDetailRemark", queueDetailRemark) :
                new ObjectParameter("QueueDetailRemark", typeof(string));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueDetailRemark_Update_Result>("usp_QueueDetailRemark_Update", queueDetailIdParameter, queueDetailRemarkParameter, updatedByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueFullDetailById_Select_Result> usp_QueueFullDetailById_Select(Nullable<int> queueId)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueFullDetailById_Select_Result>("usp_QueueFullDetailById_Select", queueIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueResult_Insert_Result> usp_QueueResult_Insert(Nullable<int> queueId, Nullable<bool> isAudit, Nullable<int> callStatusId, string callRemark, Nullable<bool> isIssue, string issueRemark, Nullable<bool> isCancelCause1, Nullable<bool> isCancelCause2, Nullable<bool> isCancelCause3, Nullable<bool> isCancelCause4, Nullable<bool> isCancelCause5, Nullable<bool> isCancelCause6, Nullable<bool> isCancelCause7, Nullable<bool> isCancelCause8, Nullable<bool> isCancelCause9, Nullable<bool> isCancelCause10, Nullable<bool> isCancelCause11, Nullable<bool> isCancelCause12, Nullable<bool> isCancelCause13, Nullable<bool> isCancelCause14, Nullable<bool> isCancelCause15, Nullable<bool> isCancelCause16, Nullable<bool> isCancelCause17, string cancelCauseRemark, Nullable<int> createdByUserId)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var isAuditParameter = isAudit.HasValue ?
                new ObjectParameter("IsAudit", isAudit) :
                new ObjectParameter("IsAudit", typeof(bool));
    
            var callStatusIdParameter = callStatusId.HasValue ?
                new ObjectParameter("CallStatusId", callStatusId) :
                new ObjectParameter("CallStatusId", typeof(int));
    
            var callRemarkParameter = callRemark != null ?
                new ObjectParameter("CallRemark", callRemark) :
                new ObjectParameter("CallRemark", typeof(string));
    
            var isIssueParameter = isIssue.HasValue ?
                new ObjectParameter("IsIssue", isIssue) :
                new ObjectParameter("IsIssue", typeof(bool));
    
            var issueRemarkParameter = issueRemark != null ?
                new ObjectParameter("IssueRemark", issueRemark) :
                new ObjectParameter("IssueRemark", typeof(string));
    
            var isCancelCause1Parameter = isCancelCause1.HasValue ?
                new ObjectParameter("IsCancelCause1", isCancelCause1) :
                new ObjectParameter("IsCancelCause1", typeof(bool));
    
            var isCancelCause2Parameter = isCancelCause2.HasValue ?
                new ObjectParameter("IsCancelCause2", isCancelCause2) :
                new ObjectParameter("IsCancelCause2", typeof(bool));
    
            var isCancelCause3Parameter = isCancelCause3.HasValue ?
                new ObjectParameter("IsCancelCause3", isCancelCause3) :
                new ObjectParameter("IsCancelCause3", typeof(bool));
    
            var isCancelCause4Parameter = isCancelCause4.HasValue ?
                new ObjectParameter("IsCancelCause4", isCancelCause4) :
                new ObjectParameter("IsCancelCause4", typeof(bool));
    
            var isCancelCause5Parameter = isCancelCause5.HasValue ?
                new ObjectParameter("IsCancelCause5", isCancelCause5) :
                new ObjectParameter("IsCancelCause5", typeof(bool));
    
            var isCancelCause6Parameter = isCancelCause6.HasValue ?
                new ObjectParameter("IsCancelCause6", isCancelCause6) :
                new ObjectParameter("IsCancelCause6", typeof(bool));
    
            var isCancelCause7Parameter = isCancelCause7.HasValue ?
                new ObjectParameter("IsCancelCause7", isCancelCause7) :
                new ObjectParameter("IsCancelCause7", typeof(bool));
    
            var isCancelCause8Parameter = isCancelCause8.HasValue ?
                new ObjectParameter("IsCancelCause8", isCancelCause8) :
                new ObjectParameter("IsCancelCause8", typeof(bool));
    
            var isCancelCause9Parameter = isCancelCause9.HasValue ?
                new ObjectParameter("IsCancelCause9", isCancelCause9) :
                new ObjectParameter("IsCancelCause9", typeof(bool));
    
            var isCancelCause10Parameter = isCancelCause10.HasValue ?
                new ObjectParameter("IsCancelCause10", isCancelCause10) :
                new ObjectParameter("IsCancelCause10", typeof(bool));
    
            var isCancelCause11Parameter = isCancelCause11.HasValue ?
                new ObjectParameter("IsCancelCause11", isCancelCause11) :
                new ObjectParameter("IsCancelCause11", typeof(bool));
    
            var isCancelCause12Parameter = isCancelCause12.HasValue ?
                new ObjectParameter("IsCancelCause12", isCancelCause12) :
                new ObjectParameter("IsCancelCause12", typeof(bool));
    
            var isCancelCause13Parameter = isCancelCause13.HasValue ?
                new ObjectParameter("IsCancelCause13", isCancelCause13) :
                new ObjectParameter("IsCancelCause13", typeof(bool));
    
            var isCancelCause14Parameter = isCancelCause14.HasValue ?
                new ObjectParameter("IsCancelCause14", isCancelCause14) :
                new ObjectParameter("IsCancelCause14", typeof(bool));
    
            var isCancelCause15Parameter = isCancelCause15.HasValue ?
                new ObjectParameter("IsCancelCause15", isCancelCause15) :
                new ObjectParameter("IsCancelCause15", typeof(bool));
    
            var isCancelCause16Parameter = isCancelCause16.HasValue ?
                new ObjectParameter("IsCancelCause16", isCancelCause16) :
                new ObjectParameter("IsCancelCause16", typeof(bool));
    
            var isCancelCause17Parameter = isCancelCause17.HasValue ?
                new ObjectParameter("IsCancelCause17", isCancelCause17) :
                new ObjectParameter("IsCancelCause17", typeof(bool));
    
            var cancelCauseRemarkParameter = cancelCauseRemark != null ?
                new ObjectParameter("CancelCauseRemark", cancelCauseRemark) :
                new ObjectParameter("CancelCauseRemark", typeof(string));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueResult_Insert_Result>("usp_QueueResult_Insert", queueIdParameter, isAuditParameter, callStatusIdParameter, callRemarkParameter, isIssueParameter, issueRemarkParameter, isCancelCause1Parameter, isCancelCause2Parameter, isCancelCause3Parameter, isCancelCause4Parameter, isCancelCause5Parameter, isCancelCause6Parameter, isCancelCause7Parameter, isCancelCause8Parameter, isCancelCause9Parameter, isCancelCause10Parameter, isCancelCause11Parameter, isCancelCause12Parameter, isCancelCause13Parameter, isCancelCause14Parameter, isCancelCause15Parameter, isCancelCause16Parameter, isCancelCause17Parameter, cancelCauseRemarkParameter, createdByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueLog_Select_Result> usp_QueueLog_Select(Nullable<int> queueId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueLog_Select_Result>("usp_QueueLog_Select", queueIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueComplete_Select_Result> usp_QueueComplete_Select(Nullable<System.DateTime> period, Nullable<int> assignToUserId, Nullable<int> queueStatusId, string payerName, string payerIdCard, string payerPhone, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var queueStatusIdParameter = queueStatusId.HasValue ?
                new ObjectParameter("QueueStatusId", queueStatusId) :
                new ObjectParameter("QueueStatusId", typeof(int));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var payerIdCardParameter = payerIdCard != null ?
                new ObjectParameter("PayerIdCard", payerIdCard) :
                new ObjectParameter("PayerIdCard", typeof(string));
    
            var payerPhoneParameter = payerPhone != null ?
                new ObjectParameter("PayerPhone", payerPhone) :
                new ObjectParameter("PayerPhone", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueComplete_Select_Result>("usp_QueueComplete_Select", periodParameter, assignToUserIdParameter, queueStatusIdParameter, payerNameParameter, payerIdCardParameter, payerPhoneParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueStatus_Select_Result> usp_QueueStatus_Select(Nullable<int> queueStatusId)
        {
            var queueStatusIdParameter = queueStatusId.HasValue ?
                new ObjectParameter("QueueStatusId", queueStatusId) :
                new ObjectParameter("QueueStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueStatus_Select_Result>("usp_QueueStatus_Select", queueStatusIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueAssign_Select_Result> usp_QueueAssign_Select(Nullable<int> callStatusId, Nullable<int> assignToUserId, string payerName, string payerIdCard, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var callStatusIdParameter = callStatusId.HasValue ?
                new ObjectParameter("CallStatusId", callStatusId) :
                new ObjectParameter("CallStatusId", typeof(int));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var payerIdCardParameter = payerIdCard != null ?
                new ObjectParameter("PayerIdCard", payerIdCard) :
                new ObjectParameter("PayerIdCard", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueAssign_Select_Result>("usp_QueueAssign_Select", callStatusIdParameter, assignToUserIdParameter, payerNameParameter, payerIdCardParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueAssign_Update_Result> usp_QueueAssign_Update(string queueId, Nullable<int> assignToUserId, Nullable<int> updatedByUserId)
        {
            var queueIdParameter = queueId != null ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(string));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueAssign_Update_Result>("usp_QueueAssign_Update", queueIdParameter, assignToUserIdParameter, updatedByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_Branch_Select_Result> usp_Branch_Select(Nullable<int> branchId)
        {
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Branch_Select_Result>("usp_Branch_Select", branchIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueIssueComplete_Select_Result> usp_QueueIssueComplete_Select(Nullable<System.DateTime> period, Nullable<int> assignToUserId, Nullable<int> branchId, string payerName, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueIssueComplete_Select_Result>("usp_QueueIssueComplete_Select", periodParameter, assignToUserIdParameter, branchIdParameter, payerNameParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueIssuePending_Select_Result> usp_QueueIssuePending_Select(Nullable<System.DateTime> period, Nullable<int> assignToUserId, Nullable<int> branchId, string payerName, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var assignToUserIdParameter = assignToUserId.HasValue ?
                new ObjectParameter("AssignToUserId", assignToUserId) :
                new ObjectParameter("AssignToUserId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueIssuePending_Select_Result>("usp_QueueIssuePending_Select", periodParameter, assignToUserIdParameter, branchIdParameter, payerNameParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueReport1_Select_Result> usp_QueueReport1_Select(Nullable<System.DateTime> period, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueReport1_Select_Result>("usp_QueueReport1_Select", periodParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_QueueReport2_Select_Result> usp_QueueReport2_Select(Nullable<System.DateTime> period, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueReport2_Select_Result>("usp_QueueReport2_Select", periodParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_ResultRemark_Update_Result> usp_ResultRemark_Update(Nullable<int> queueId, string resultRemark)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var resultRemarkParameter = resultRemark != null ?
                new ObjectParameter("ResultRemark", resultRemark) :
                new ObjectParameter("ResultRemark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ResultRemark_Update_Result>("usp_ResultRemark_Update", queueIdParameter, resultRemarkParameter);
        }
    
        public virtual ObjectResult<usp_QueueIssueComplete_Update_Result> usp_QueueIssueComplete_Update(Nullable<int> queueId, string issueCompleteRemark, Nullable<int> updatedByUserId)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var issueCompleteRemarkParameter = issueCompleteRemark != null ?
                new ObjectParameter("IssueCompleteRemark", issueCompleteRemark) :
                new ObjectParameter("IssueCompleteRemark", typeof(string));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueIssueComplete_Update_Result>("usp_QueueIssueComplete_Update", queueIdParameter, issueCompleteRemarkParameter, updatedByUserIdParameter);
        }
    
        public virtual ObjectResult<usp_QueueIssueReport_Select_Result> usp_QueueIssueReport_Select(Nullable<System.DateTime> period, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(System.DateTime));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueIssueReport_Select_Result>("usp_QueueIssueReport_Select", periodParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_QueueDocument_Select_Result> usp_QueueDocument_Select(Nullable<int> queueId, Nullable<int> documentTypeId, Nullable<int> indexStart, Nullable<int> pageSize, string sortField, string orderType)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var documentTypeIdParameter = documentTypeId.HasValue ?
                new ObjectParameter("DocumentTypeId", documentTypeId) :
                new ObjectParameter("DocumentTypeId", typeof(int));
    
            var indexStartParameter = indexStart.HasValue ?
                new ObjectParameter("IndexStart", indexStart) :
                new ObjectParameter("IndexStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueDocument_Select_Result>("usp_QueueDocument_Select", queueIdParameter, documentTypeIdParameter, indexStartParameter, pageSizeParameter, sortFieldParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<usp_QueueCancel_Update_Result> usp_QueueCancel_Update(Nullable<int> queueId, Nullable<int> updatedByUserId)
        {
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_QueueCancel_Update_Result>("usp_QueueCancel_Update", queueIdParameter, updatedByUserIdParameter);
        }
    }
}
