//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmileSMobileWebUI.CommunicateService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CommunicateService.ICommunicateService")]
    public interface ICommunicateService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommunicateService/Get_Communicate", ReplyAction="http://tempuri.org/ICommunicateService/Get_CommunicateResponse")]
        bool Get_Communicate(int communicateTypeid, int templateTypeid, string criteria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommunicateService/Get_Communicate", ReplyAction="http://tempuri.org/ICommunicateService/Get_CommunicateResponse")]
        System.Threading.Tasks.Task<bool> Get_CommunicateAsync(int communicateTypeid, int templateTypeid, string criteria);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICommunicateServiceChannel : SmileSMobileWebUI.CommunicateService.ICommunicateService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CommunicateServiceClient : System.ServiceModel.ClientBase<SmileSMobileWebUI.CommunicateService.ICommunicateService>, SmileSMobileWebUI.CommunicateService.ICommunicateService {
        
        public CommunicateServiceClient() {
        }
        
        public CommunicateServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CommunicateServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommunicateServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommunicateServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Get_Communicate(int communicateTypeid, int templateTypeid, string criteria) {
            return base.Channel.Get_Communicate(communicateTypeid, templateTypeid, criteria);
        }
        
        public System.Threading.Tasks.Task<bool> Get_CommunicateAsync(int communicateTypeid, int templateTypeid, string criteria) {
            return base.Channel.Get_CommunicateAsync(communicateTypeid, templateTypeid, criteria);
        }
    }
}
