//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmileSMobileWebUI.IdentityService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AspNetRoles", Namespace="http://schemas.datacontract.org/2004/07/SmileDataCenterService")]
    [System.SerializableAttribute()]
    public partial class AspNetRoles : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SmileSMobileWebUI.IdentityService.AspNetUserRoles[] AspNetUserRolesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SmileSMobileWebUI.IdentityService.AspNetUserRoles[] AspNetUserRoles {
            get {
                return this.AspNetUserRolesField;
            }
            set {
                if ((object.ReferenceEquals(this.AspNetUserRolesField, value) != true)) {
                    this.AspNetUserRolesField = value;
                    this.RaisePropertyChanged("AspNetUserRoles");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AspNetUserRoles", Namespace="http://schemas.datacontract.org/2004/07/SmileDataCenterService")]
    [System.SerializableAttribute()]
    public partial class AspNetUserRoles : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SmileSMobileWebUI.IdentityService.AspNetRoles AspNetRolesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SmileSMobileWebUI.IdentityService.AspNetUsers AspNetUsersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SmileSMobileWebUI.IdentityService.AspNetRoles AspNetRoles {
            get {
                return this.AspNetRolesField;
            }
            set {
                if ((object.ReferenceEquals(this.AspNetRolesField, value) != true)) {
                    this.AspNetRolesField = value;
                    this.RaisePropertyChanged("AspNetRoles");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SmileSMobileWebUI.IdentityService.AspNetUsers AspNetUsers {
            get {
                return this.AspNetUsersField;
            }
            set {
                if ((object.ReferenceEquals(this.AspNetUsersField, value) != true)) {
                    this.AspNetUsersField = value;
                    this.RaisePropertyChanged("AspNetUsers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleId {
            get {
                return this.RoleIdField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleIdField, value) != true)) {
                    this.RoleIdField = value;
                    this.RaisePropertyChanged("RoleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AspNetUsers", Namespace="http://schemas.datacontract.org/2004/07/SmileDataCenterService")]
    [System.SerializableAttribute()]
    public partial class AspNetUsers : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AccessFailedCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SmileSMobileWebUI.IdentityService.AspNetUserClaims[] AspNetUserClaimsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SmileSMobileWebUI.IdentityService.AspNetUserLogins[] AspNetUserLoginsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SmileSMobileWebUI.IdentityService.AspNetUserRoles[] AspNetUserRolesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EmailConfirmedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LockoutEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LockoutEndDateUtcField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordHashField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PhoneNumberConfirmedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SecurityStampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool TwoFactorEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int User_IDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccessFailedCount {
            get {
                return this.AccessFailedCountField;
            }
            set {
                if ((this.AccessFailedCountField.Equals(value) != true)) {
                    this.AccessFailedCountField = value;
                    this.RaisePropertyChanged("AccessFailedCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SmileSMobileWebUI.IdentityService.AspNetUserClaims[] AspNetUserClaims {
            get {
                return this.AspNetUserClaimsField;
            }
            set {
                if ((object.ReferenceEquals(this.AspNetUserClaimsField, value) != true)) {
                    this.AspNetUserClaimsField = value;
                    this.RaisePropertyChanged("AspNetUserClaims");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SmileSMobileWebUI.IdentityService.AspNetUserLogins[] AspNetUserLogins {
            get {
                return this.AspNetUserLoginsField;
            }
            set {
                if ((object.ReferenceEquals(this.AspNetUserLoginsField, value) != true)) {
                    this.AspNetUserLoginsField = value;
                    this.RaisePropertyChanged("AspNetUserLogins");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SmileSMobileWebUI.IdentityService.AspNetUserRoles[] AspNetUserRoles {
            get {
                return this.AspNetUserRolesField;
            }
            set {
                if ((object.ReferenceEquals(this.AspNetUserRolesField, value) != true)) {
                    this.AspNetUserRolesField = value;
                    this.RaisePropertyChanged("AspNetUserRoles");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool EmailConfirmed {
            get {
                return this.EmailConfirmedField;
            }
            set {
                if ((this.EmailConfirmedField.Equals(value) != true)) {
                    this.EmailConfirmedField = value;
                    this.RaisePropertyChanged("EmailConfirmed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool LockoutEnabled {
            get {
                return this.LockoutEnabledField;
            }
            set {
                if ((this.LockoutEnabledField.Equals(value) != true)) {
                    this.LockoutEnabledField = value;
                    this.RaisePropertyChanged("LockoutEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LockoutEndDateUtc {
            get {
                return this.LockoutEndDateUtcField;
            }
            set {
                if ((this.LockoutEndDateUtcField.Equals(value) != true)) {
                    this.LockoutEndDateUtcField = value;
                    this.RaisePropertyChanged("LockoutEndDateUtc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PasswordHash {
            get {
                return this.PasswordHashField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordHashField, value) != true)) {
                    this.PasswordHashField = value;
                    this.RaisePropertyChanged("PasswordHash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PhoneNumberConfirmed {
            get {
                return this.PhoneNumberConfirmedField;
            }
            set {
                if ((this.PhoneNumberConfirmedField.Equals(value) != true)) {
                    this.PhoneNumberConfirmedField = value;
                    this.RaisePropertyChanged("PhoneNumberConfirmed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecurityStamp {
            get {
                return this.SecurityStampField;
            }
            set {
                if ((object.ReferenceEquals(this.SecurityStampField, value) != true)) {
                    this.SecurityStampField = value;
                    this.RaisePropertyChanged("SecurityStamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TwoFactorEnabled {
            get {
                return this.TwoFactorEnabledField;
            }
            set {
                if ((this.TwoFactorEnabledField.Equals(value) != true)) {
                    this.TwoFactorEnabledField = value;
                    this.RaisePropertyChanged("TwoFactorEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int User_ID {
            get {
                return this.User_IDField;
            }
            set {
                if ((this.User_IDField.Equals(value) != true)) {
                    this.User_IDField = value;
                    this.RaisePropertyChanged("User_ID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AspNetUserClaims", Namespace="http://schemas.datacontract.org/2004/07/SmileDataCenterService")]
    [System.SerializableAttribute()]
    public partial class AspNetUserClaims : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SmileSMobileWebUI.IdentityService.AspNetUsers AspNetUsersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClaimTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClaimValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SmileSMobileWebUI.IdentityService.AspNetUsers AspNetUsers {
            get {
                return this.AspNetUsersField;
            }
            set {
                if ((object.ReferenceEquals(this.AspNetUsersField, value) != true)) {
                    this.AspNetUsersField = value;
                    this.RaisePropertyChanged("AspNetUsers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClaimType {
            get {
                return this.ClaimTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ClaimTypeField, value) != true)) {
                    this.ClaimTypeField = value;
                    this.RaisePropertyChanged("ClaimType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClaimValue {
            get {
                return this.ClaimValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ClaimValueField, value) != true)) {
                    this.ClaimValueField = value;
                    this.RaisePropertyChanged("ClaimValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AspNetUserLogins", Namespace="http://schemas.datacontract.org/2004/07/SmileDataCenterService")]
    [System.SerializableAttribute()]
    public partial class AspNetUserLogins : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SmileSMobileWebUI.IdentityService.AspNetUsers AspNetUsersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginProviderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProviderKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SmileSMobileWebUI.IdentityService.AspNetUsers AspNetUsers {
            get {
                return this.AspNetUsersField;
            }
            set {
                if ((object.ReferenceEquals(this.AspNetUsersField, value) != true)) {
                    this.AspNetUsersField = value;
                    this.RaisePropertyChanged("AspNetUsers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LoginProvider {
            get {
                return this.LoginProviderField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginProviderField, value) != true)) {
                    this.LoginProviderField = value;
                    this.RaisePropertyChanged("LoginProvider");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProviderKey {
            get {
                return this.ProviderKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.ProviderKeyField, value) != true)) {
                    this.ProviderKeyField = value;
                    this.RaisePropertyChanged("ProviderKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="IdentityService.ISmileIdentityService")]
    public interface ISmileIdentityService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmileIdentityService/Set_AspNetRoles_Insert", ReplyAction="http://tempuri.org/ISmileIdentityService/Set_AspNetRoles_InsertResponse")]
        bool Set_AspNetRoles_Insert(string RolesName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmileIdentityService/Set_AspNetRoles_Insert", ReplyAction="http://tempuri.org/ISmileIdentityService/Set_AspNetRoles_InsertResponse")]
        System.Threading.Tasks.Task<bool> Set_AspNetRoles_InsertAsync(string RolesName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmileIdentityService/Get_AspNetRoles_SelectAll", ReplyAction="http://tempuri.org/ISmileIdentityService/Get_AspNetRoles_SelectAllResponse")]
        SmileSMobileWebUI.IdentityService.AspNetRoles[] Get_AspNetRoles_SelectAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmileIdentityService/Get_AspNetRoles_SelectAll", ReplyAction="http://tempuri.org/ISmileIdentityService/Get_AspNetRoles_SelectAllResponse")]
        System.Threading.Tasks.Task<SmileSMobileWebUI.IdentityService.AspNetRoles[]> Get_AspNetRoles_SelectAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmileIdentityService/Set_AspNetUsers_Insert", ReplyAction="http://tempuri.org/ISmileIdentityService/Set_AspNetUsers_InsertResponse")]
        bool Set_AspNetUsers_Insert(string username, string password, string roles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmileIdentityService/Set_AspNetUsers_Insert", ReplyAction="http://tempuri.org/ISmileIdentityService/Set_AspNetUsers_InsertResponse")]
        System.Threading.Tasks.Task<bool> Set_AspNetUsers_InsertAsync(string username, string password, string roles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmileIdentityService/Set_AspNetUserRoles_Delete_AllRolesFromU" +
            "ser", ReplyAction="http://tempuri.org/ISmileIdentityService/Set_AspNetUserRoles_Delete_AllRolesFromU" +
            "serResponse")]
        bool Set_AspNetUserRoles_Delete_AllRolesFromUser(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmileIdentityService/Set_AspNetUserRoles_Delete_AllRolesFromU" +
            "ser", ReplyAction="http://tempuri.org/ISmileIdentityService/Set_AspNetUserRoles_Delete_AllRolesFromU" +
            "serResponse")]
        System.Threading.Tasks.Task<bool> Set_AspNetUserRoles_Delete_AllRolesFromUserAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmileIdentityService/Get_AspNetUsers_SelectBy", ReplyAction="http://tempuri.org/ISmileIdentityService/Get_AspNetUsers_SelectByResponse")]
        SmileSMobileWebUI.IdentityService.AspNetUsers[] Get_AspNetUsers_SelectBy(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmileIdentityService/Get_AspNetUsers_SelectBy", ReplyAction="http://tempuri.org/ISmileIdentityService/Get_AspNetUsers_SelectByResponse")]
        System.Threading.Tasks.Task<SmileSMobileWebUI.IdentityService.AspNetUsers[]> Get_AspNetUsers_SelectByAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmileIdentityService/Set_AspNetUsersRoles_Insert_RolesToUser", ReplyAction="http://tempuri.org/ISmileIdentityService/Set_AspNetUsersRoles_Insert_RolesToUserR" +
            "esponse")]
        bool Set_AspNetUsersRoles_Insert_RolesToUser(string username, string roles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmileIdentityService/Set_AspNetUsersRoles_Insert_RolesToUser", ReplyAction="http://tempuri.org/ISmileIdentityService/Set_AspNetUsersRoles_Insert_RolesToUserR" +
            "esponse")]
        System.Threading.Tasks.Task<bool> Set_AspNetUsersRoles_Insert_RolesToUserAsync(string username, string roles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmileIdentityService/Set_AspNetUserRoles_Insert_UsersToRole", ReplyAction="http://tempuri.org/ISmileIdentityService/Set_AspNetUserRoles_Insert_UsersToRoleRe" +
            "sponse")]
        bool Set_AspNetUserRoles_Insert_UsersToRole(string username, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmileIdentityService/Set_AspNetUserRoles_Insert_UsersToRole", ReplyAction="http://tempuri.org/ISmileIdentityService/Set_AspNetUserRoles_Insert_UsersToRoleRe" +
            "sponse")]
        System.Threading.Tasks.Task<bool> Set_AspNetUserRoles_Insert_UsersToRoleAsync(string username, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmileIdentityService/Get_AspNetUsers_SelectAll", ReplyAction="http://tempuri.org/ISmileIdentityService/Get_AspNetUsers_SelectAllResponse")]
        SmileSMobileWebUI.IdentityService.AspNetUsers[] Get_AspNetUsers_SelectAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmileIdentityService/Get_AspNetUsers_SelectAll", ReplyAction="http://tempuri.org/ISmileIdentityService/Get_AspNetUsers_SelectAllResponse")]
        System.Threading.Tasks.Task<SmileSMobileWebUI.IdentityService.AspNetUsers[]> Get_AspNetUsers_SelectAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmileIdentityService/Set_AspNetUsers_ResetPassword", ReplyAction="http://tempuri.org/ISmileIdentityService/Set_AspNetUsers_ResetPasswordResponse")]
        bool Set_AspNetUsers_ResetPassword(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmileIdentityService/Set_AspNetUsers_ResetPassword", ReplyAction="http://tempuri.org/ISmileIdentityService/Set_AspNetUsers_ResetPasswordResponse")]
        System.Threading.Tasks.Task<bool> Set_AspNetUsers_ResetPasswordAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmileIdentityService/Set_AspNetUsers_ChangePassword", ReplyAction="http://tempuri.org/ISmileIdentityService/Set_AspNetUsers_ChangePasswordResponse")]
        bool Set_AspNetUsers_ChangePassword(string username, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmileIdentityService/Set_AspNetUsers_ChangePassword", ReplyAction="http://tempuri.org/ISmileIdentityService/Set_AspNetUsers_ChangePasswordResponse")]
        System.Threading.Tasks.Task<bool> Set_AspNetUsers_ChangePasswordAsync(string username, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmileIdentityService/Set_AspNetRoles_DeleteRole", ReplyAction="http://tempuri.org/ISmileIdentityService/Set_AspNetRoles_DeleteRoleResponse")]
        bool Set_AspNetRoles_DeleteRole(string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmileIdentityService/Set_AspNetRoles_DeleteRole", ReplyAction="http://tempuri.org/ISmileIdentityService/Set_AspNetRoles_DeleteRoleResponse")]
        System.Threading.Tasks.Task<bool> Set_AspNetRoles_DeleteRoleAsync(string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmileIdentityService/Get_SSSPersonUser_SelectBy", ReplyAction="http://tempuri.org/ISmileIdentityService/Get_SSSPersonUser_SelectByResponse")]
        bool Get_SSSPersonUser_SelectBy(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmileIdentityService/Get_SSSPersonUser_SelectBy", ReplyAction="http://tempuri.org/ISmileIdentityService/Get_SSSPersonUser_SelectByResponse")]
        System.Threading.Tasks.Task<bool> Get_SSSPersonUser_SelectByAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmileIdentityService/Get_AspNetUser_Login", ReplyAction="http://tempuri.org/ISmileIdentityService/Get_AspNetUser_LoginResponse")]
        bool Get_AspNetUser_Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmileIdentityService/Get_AspNetUser_Login", ReplyAction="http://tempuri.org/ISmileIdentityService/Get_AspNetUser_LoginResponse")]
        System.Threading.Tasks.Task<bool> Get_AspNetUser_LoginAsync(string username, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISmileIdentityServiceChannel : SmileSMobileWebUI.IdentityService.ISmileIdentityService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SmileIdentityServiceClient : System.ServiceModel.ClientBase<SmileSMobileWebUI.IdentityService.ISmileIdentityService>, SmileSMobileWebUI.IdentityService.ISmileIdentityService {
        
        public SmileIdentityServiceClient() {
        }
        
        public SmileIdentityServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SmileIdentityServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SmileIdentityServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SmileIdentityServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Set_AspNetRoles_Insert(string RolesName) {
            return base.Channel.Set_AspNetRoles_Insert(RolesName);
        }
        
        public System.Threading.Tasks.Task<bool> Set_AspNetRoles_InsertAsync(string RolesName) {
            return base.Channel.Set_AspNetRoles_InsertAsync(RolesName);
        }
        
        public SmileSMobileWebUI.IdentityService.AspNetRoles[] Get_AspNetRoles_SelectAll() {
            return base.Channel.Get_AspNetRoles_SelectAll();
        }
        
        public System.Threading.Tasks.Task<SmileSMobileWebUI.IdentityService.AspNetRoles[]> Get_AspNetRoles_SelectAllAsync() {
            return base.Channel.Get_AspNetRoles_SelectAllAsync();
        }
        
        public bool Set_AspNetUsers_Insert(string username, string password, string roles) {
            return base.Channel.Set_AspNetUsers_Insert(username, password, roles);
        }
        
        public System.Threading.Tasks.Task<bool> Set_AspNetUsers_InsertAsync(string username, string password, string roles) {
            return base.Channel.Set_AspNetUsers_InsertAsync(username, password, roles);
        }
        
        public bool Set_AspNetUserRoles_Delete_AllRolesFromUser(string username) {
            return base.Channel.Set_AspNetUserRoles_Delete_AllRolesFromUser(username);
        }
        
        public System.Threading.Tasks.Task<bool> Set_AspNetUserRoles_Delete_AllRolesFromUserAsync(string username) {
            return base.Channel.Set_AspNetUserRoles_Delete_AllRolesFromUserAsync(username);
        }
        
        public SmileSMobileWebUI.IdentityService.AspNetUsers[] Get_AspNetUsers_SelectBy(string username) {
            return base.Channel.Get_AspNetUsers_SelectBy(username);
        }
        
        public System.Threading.Tasks.Task<SmileSMobileWebUI.IdentityService.AspNetUsers[]> Get_AspNetUsers_SelectByAsync(string username) {
            return base.Channel.Get_AspNetUsers_SelectByAsync(username);
        }
        
        public bool Set_AspNetUsersRoles_Insert_RolesToUser(string username, string roles) {
            return base.Channel.Set_AspNetUsersRoles_Insert_RolesToUser(username, roles);
        }
        
        public System.Threading.Tasks.Task<bool> Set_AspNetUsersRoles_Insert_RolesToUserAsync(string username, string roles) {
            return base.Channel.Set_AspNetUsersRoles_Insert_RolesToUserAsync(username, roles);
        }
        
        public bool Set_AspNetUserRoles_Insert_UsersToRole(string username, string role) {
            return base.Channel.Set_AspNetUserRoles_Insert_UsersToRole(username, role);
        }
        
        public System.Threading.Tasks.Task<bool> Set_AspNetUserRoles_Insert_UsersToRoleAsync(string username, string role) {
            return base.Channel.Set_AspNetUserRoles_Insert_UsersToRoleAsync(username, role);
        }
        
        public SmileSMobileWebUI.IdentityService.AspNetUsers[] Get_AspNetUsers_SelectAll() {
            return base.Channel.Get_AspNetUsers_SelectAll();
        }
        
        public System.Threading.Tasks.Task<SmileSMobileWebUI.IdentityService.AspNetUsers[]> Get_AspNetUsers_SelectAllAsync() {
            return base.Channel.Get_AspNetUsers_SelectAllAsync();
        }
        
        public bool Set_AspNetUsers_ResetPassword(string username, string password) {
            return base.Channel.Set_AspNetUsers_ResetPassword(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> Set_AspNetUsers_ResetPasswordAsync(string username, string password) {
            return base.Channel.Set_AspNetUsers_ResetPasswordAsync(username, password);
        }
        
        public bool Set_AspNetUsers_ChangePassword(string username, string oldPassword, string newPassword) {
            return base.Channel.Set_AspNetUsers_ChangePassword(username, oldPassword, newPassword);
        }
        
        public System.Threading.Tasks.Task<bool> Set_AspNetUsers_ChangePasswordAsync(string username, string oldPassword, string newPassword) {
            return base.Channel.Set_AspNetUsers_ChangePasswordAsync(username, oldPassword, newPassword);
        }
        
        public bool Set_AspNetRoles_DeleteRole(string roleName) {
            return base.Channel.Set_AspNetRoles_DeleteRole(roleName);
        }
        
        public System.Threading.Tasks.Task<bool> Set_AspNetRoles_DeleteRoleAsync(string roleName) {
            return base.Channel.Set_AspNetRoles_DeleteRoleAsync(roleName);
        }
        
        public bool Get_SSSPersonUser_SelectBy(string username) {
            return base.Channel.Get_SSSPersonUser_SelectBy(username);
        }
        
        public System.Threading.Tasks.Task<bool> Get_SSSPersonUser_SelectByAsync(string username) {
            return base.Channel.Get_SSSPersonUser_SelectByAsync(username);
        }
        
        public bool Get_AspNetUser_Login(string username, string password) {
            return base.Channel.Get_AspNetUser_Login(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> Get_AspNetUser_LoginAsync(string username, string password) {
            return base.Channel.Get_AspNetUser_LoginAsync(username, password);
        }
    }
}
